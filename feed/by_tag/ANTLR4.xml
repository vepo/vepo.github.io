<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/ANTLR4.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/ANTLR4.xml</id><title type="html">vepo</title><subtitle>Um reposit√≥rio para todos os posts, palestras e tutoriais que j√° fiz. Java, Desenvolvimento de Software e reflex√µes sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">Como criar uma linguagem usando ANTLR4 e Java</title><link href="https://blog.vepo.dev/posts/como-criar-uma-linguagem-usando-antlr4-e-java" rel="alternate" type="text/html" title="Como criar uma linguagem usando ANTLR4 e Java" /><published>2020-04-13T00:00:00+00:00</published><updated>2020-04-13T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/23-44-31-como-criar-uma-linguagem-usando-antlr4-e-java</id><content type="html" xml:base="https://blog.vepo.dev/posts/como-criar-uma-linguagem-usando-antlr4-e-java"><![CDATA[<p>Ao desenvolver qualquer ferramenta, voc√™ topar√° com a ingrata tarefa de escrever um parser. Usei o termo ingrata porque a principio pode parecer f√°cil, mas depois voc√™ ver√° que √© bem complicado.</p>

<p>O problema na maioria das vezes n√£o √© o parser, mas a infinidade de possibilidades que surgem ao se propor uma solu√ß√£o t√£o aberta a ponto de precisar de uma linguagem.</p>

<h1 id="antes-do-parser">Antes do Parser</h1>

<p>Para se precisar de um parser √© primeiro necess√°rio um problema que se precisa de uma linguagem. Temos dois tipos de linguagem em computa√ß√£o: Linguagem Formal e Linguagem Natural.</p>

<p>Parsers resolvem o problema de se compreender uma Linguagem Formal, mas precisamos entender o que √© cada uma.</p>

<h2 id="linguagem-natural">Linguagem Natural</h2>

<p>Vamos primeiro iniciar pela que aprendemos primeiro. Linguagem Natural √© a que estamos tentando ensinar para o meu filho de 1 ano e meio üë∂. Devido a uma exposi√ß√£o a telas, ele acabou desenvolvendo outras linguagens antes da qual ser√° a principal em sua vida. Ele j√° compreende o portugu√™s, compreende algumas m√∫sicas, consegue cantarolar‚Ä¶. Mas n√£o consegue falar ainda. S√≥ o papai e mam√£e, mas ainda n√£o associa a fala dele as coisas. Ele associa o som nosso as coisas. Bizarro n√£o?</p>

<p>Mas essa √© a forma de compreens√£o nossa. Temos sons, falas, fonemas, etc‚Ä¶ Eles existem apesar da gram√°tica. A gram√°tica serve como base, serve para criar uma linguagem comum onde todos podemos ser compreendidos.</p>

<p>Em uma linguagem natural, ela j√° existe antes de uma gram√°tica. A gram√°tica vem para normalizar ela.</p>

<p>Temos in√∫meras Linguagens Natural no mundo:</p>
<ul>
  <li>M√∫sica ‚û°Ô∏è Partituras</li>
  <li>Fala ‚û°Ô∏è Portugu√™s, Ingl√™s, Espanhol, etc‚Ä¶.</li>
  <li>UX ‚û°Ô∏è Aplicativo Mobile, Aplicativo Web, etc‚Ä¶</li>
</ul>

<p>H√° in√∫meras formas de Linguagem Natural, se formos analisar filosoficamente, uma <em><strong>Linguagem Natural</strong> √© qualquer formas de s√≠mbolos gerados e consumidor conscientemente por humanos</em>.</p>

<p>Quer saber como processar uma Linguagem Natural. Procure por <a href="https://towardsdatascience.com/natural-language-processing-from-basics-to-using-rnn-and-lstm-ef6779e4ae66">RNN ou LSTM</a>.</p>

<h2 id="linguagem-formal">Linguagem Formal</h2>

<p>Apesar de usar a mesma palavra, uma <strong>Linguagem Formal</strong> ela √© completamente diferente de uma <strong>Linguagem Natural</strong>. Uma Linguagem Formal tem um fim especifico, seja ele dar ordens a uma m√°quina ou a troca de informa√ß√µes entre sistemas.</p>

<p>Agora n√£o sei se voc√™ percebeu a principal diferen√ßa: <em><strong>Linguagens Formais s√£o feitas para serem compreendidas por M√°quinas</strong></em>.</p>

<p>Voc√™ pode ter a f√© que for em Tecnologia, mas a grande diferen√ßa √© que nunca existir√° um <strong>Guimar√£es Rosa</strong> da computa√ß√£o, pois Linguagens Formais n√£o aceitam neologismos. Ou a linguagem segue estritamente ao bin√¥mio gram√°tica e sintaxe, ou ela n√£o √© compreendida. Um compilador n√£o entende aquilo que √© fora do que j√° conhece.</p>

<p>T√°, e quais s√£o as Linguagens Formais conhecidas:</p>
<ul>
  <li>C</li>
  <li>C++</li>
  <li>Java</li>
  <li>XML</li>
  <li>brainfuck!!! <em>Um dia aprenderei brainfuck!!!</em></li>
</ul>

<p>Segue o Hello World em brainfuck:</p>
<div class="language-brainfuck highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">+</span><span class="p">[</span><span class="nf">-</span><span class="p">[</span><span class="nb">&lt;&lt;</span><span class="p">[</span><span class="nf">+</span><span class="p">[</span><span class="nf">---</span><span class="nb">&gt;</span><span class="p">]</span><span class="nf">-</span><span class="p">[</span><span class="nb">&lt;&lt;&lt;</span><span class="p">]]]</span><span class="nb">&gt;&gt;&gt;</span><span class="nf">-</span><span class="p">]</span><span class="nb">&gt;</span><span class="nf">-.---.</span><span class="nb">&gt;</span><span class="nf">..</span><span class="nb">&gt;</span><span class="nf">.</span><span class="nb">&lt;&lt;&lt;&lt;</span><span class="nf">-.</span><span class="nb">&lt;</span><span class="nf">+.</span><span class="nb">&gt;&gt;&gt;&gt;&gt;</span><span class="nf">.</span><span class="nb">&gt;</span><span class="nf">.</span><span class="nb">&lt;&lt;</span><span class="nf">.</span><span class="nb">&lt;</span><span class="nf">-.</span><span class="c1">
</span></code></pre></div></div>

<h1 id="a-necessidade">A Necessidade</h1>

<p>T√°, mais porque vou precisar de uma nova linguagem? Bom, antes disso √© preciso de uma necessidade. Eu acabei desenvolvendo uma em casa nos √∫ltimos dias como um exerc√≠cio. A necessidade era: em uma reuni√£o, todos odeia o JMeter.</p>

<p>A raz√£o de todos odiarem o JMeter era √≥bvia, o JMeter usa o XML como Linguagem e XML √© apenas uma Linguagem para armazenar informa√ß√µes, ela n√£o √© desenvolvida para se processar testes.</p>

<p>Ent√£o fiz esse exerc√≠cio: Como seria uma Linguagem de Testes?</p>

<p><strong>Observa√ß√£o</strong>: Esse √© um exerc√≠cio e existem outras linguagens para Testes. Mas poucas substituem o que o JMeter faz‚Ä¶</p>

<h1 id="criando-o-parser">Criando o Parser</h1>

<p>A partir desse ponto, irei me referir a essa linguagem que estou desenvolvendo como <strong>PlainTest</strong>.</p>

<h2 id="imaginar">Imaginar</h2>

<p>O primeiro passo para se projetar uma Linguagem Formal √© imaginar uma gram√°tica b√°sica.</p>

<p>Para a <strong>PlainTest</strong>, eu imaginei duas unidades b√°sicas:</p>

<ul>
  <li>A <strong>Suite</strong>: √â um agrupamento ordenado de passos ou suites. Serve como agrupamento l√≥gico. Seria o <em>CriarUsu√°rio</em>.</li>
  <li>O <strong>Step</strong>: √â a √∫nidade b√°sica do Teste, ou seja a realiza√ß√£o dele. Executar um comando, enviar uma Request HTTP, etc‚Ä¶</li>
</ul>

<p>Segue o meu primeiro exemplo de <strong>PlainTest</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Suite UserTest {
    HTTP CreateUser {
        url   : "http://127.0.0.1"
        method: "POST"
        body  : """
                   {
                       "id": 123,
                       "firstName": "John",
                       "lastName" : "Doe"
                   }
                """
        assert responseCode Equals 200
    }
}
</code></pre></div></div>

<h2 id="extrair">Extrair</h2>

<p>Imaginada a gram√°tica, √© preciso extrair dela algumas informa√ß√µes: seu l√©xico e sua gram√°tica. Para isso precisaremos de uma Linguagem Formal, e por isso escolheremos o <a href="https://www.antlr.org/">ANTLR4</a>. O ANTLR4 tem uma gram√°tica pr√≥pria onde o desenvolvedor pode declarar a gram√°tica e o l√©xico da sua linguagem.</p>

<h2 id="l√©xico">L√©xico</h2>

<p>Vamos definir grosseiramente o L√©xico, ou Tokeniza√ß√£o, como a identifica√ß√£o de cada elemento da Linguagem.</p>

<p>Assim podemos definir na nossa linguagem:</p>
<ul>
  <li>Reserved Words: <code class="language-plaintext highlighter-rouge">Suite</code>, <code class="language-plaintext highlighter-rouge">assert</code></li>
  <li>Identifier: Serve para identificar elementos</li>
  <li>N√∫mero: sim, um n√∫mero‚Ä¶.</li>
  <li>String: sim, uma string‚Ä¶</li>
  <li>MultilineString: String definida por <code class="language-plaintext highlighter-rouge">"""</code> e que n√£o necessita <em>escapes</em>.</li>
</ul>

<p>Para definir um <a href="https://github.com/antlr/antlr4/blob/master/doc/lexicon.md#identifiers">Token</a> em ANTLR4, √© preciso definir um identificar com letra mai√∫scula:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grammar TestSuite;

STRING : DQUOTE (ESC | ~["\\])* DQUOTE;

VERB: 'Contains' | 'Equals';

IDENTIFIER: [A-Za-z] [._\-A-Za-z0-9]*;

NUMBER: '-'? INT '.' [0-9]+ EXP? | '-'? INT EXP | '-'? INT;

fragment DQUOTE: '"';

fragment ESC: '\\' (["\\/bfnrt] | UNICODE);

fragment UNICODE: 'u' HEX HEX HEX HEX;

fragment HEX: [0-9a-fA-F];

fragment INT: '0' | [1-9] [0-9]*; // no leading zeros

fragment EXP: [Ee] [+\-]? INT; // \- since - means "range" inside [...]

// Just ignore WhiteSpaces
WS: [ \t\r\n]+ -&gt; skip;
</code></pre></div></div>
<p>Na gram√°tica acima definimos apenas alguns tokens. Observe que existem Tokens e fragmentos. No ANTLR4, o <em>fragment</em> deve ser usado porque um identificador n√£o aceita ser composto por identificadores, ele deve ser composto por algo similar a um Regex e fragmentos.</p>

<h2 id="sint√°tico">Sint√°tico</h2>

<p>Quando me refiro a Sint√°tico em ANTLR4, estou falando da gram√°tica em si, as regras. No nosso caso iremos criar os seguintes valores:</p>

<ul>
  <li>Suite: Composto por Suites e Steps</li>
  <li>Step: Unidade b√°sica do test</li>
  <li>Attribute: Um par de Chave/Valor</li>
  <li>Assertion: Um par de Chave/Valor</li>
  <li>Value: Um valor que pode ser de Attribute ou Assertion.</li>
</ul>

<p>Cada regra dessa ser√° uma <a href="https://github.com/antlr/antlr4/blob/master/doc/parser-rules.md#parser-rules">Parser Rule</a> na gram√°tica do ANTLR4. Na defini√ß√£o da gram√°tica elas s√£o diferenciadas pela primeira letra. O L√©xico √© mai√∫scula, enquanto o Sint√°tico √© min√∫sculo. Posteriormente veremos a diferen√ßa na pr√°tica.</p>

<p>Segue o exemplo de como ficaria nossa Suite definida:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grammar TestSuite;

suite:
	'Suite' IDENTIFIER '{'
		(suite | step)* 
	'}'
;

step:
	IDENTIFIER IDENTIFIER '{'
		(assertion | attribute)* 
	'}'
;

assertion: 'assert' IDENTIFIER VERB value;

attribute: IDENTIFIER ':' value;

value: NUMBER | STRING;

STRING : DQUOTE (ESC | ~["\\])* DQUOTE;

VERB: 'Contains' | 'Equals';

IDENTIFIER: [A-Za-z] [._\-A-Za-z0-9]*;

NUMBER: '-'? INT '.' [0-9]+ EXP? | '-'? INT EXP | '-'? INT;

fragment DQUOTE: '"';

fragment ESC: '\\' (["\\/bfnrt] | UNICODE);

fragment UNICODE: 'u' HEX HEX HEX HEX;

fragment HEX: [0-9a-fA-F];

fragment INT: '0' | [1-9] [0-9]*; // no leading zeros

fragment EXP: [Ee] [+\-]? INT; // \- since - means "range" inside [...]

// Just ignore WhiteSpaces
WS: [ \t\r\n]+ -&gt; skip;
</code></pre></div></div>
<h2 id="gerando-o-c√≥digo">Gerando o C√≥digo</h2>

<p>Essa Gram√°tica n√£o ir se <em>plugar</em> automaticamente no c√≥digo, antes disso √© necess√°rio gerar alguns c√≥digos antes.</p>

<p>Nesse ponto recomendo fortemente usar o Maven para gerenciar o ANTLR4, assim voc√™ j√° ter√° tudo configurado facilmente.</p>

<p>Mas caso queira gerar manualmente‚Ä¶</p>

<h3 id="gerando-c√≥digo-manualmente">Gerando C√≥digo Manualmente</h3>

<ol>
  <li>Fa√ßa o download do ANTLR4 Tool em <a href="https://www.antlr.org/download.html">
Download ANTLR</a>, procura por <strong>ANTLR tool itself</strong></li>
  <li>Depois execute o ANTLR4 Tool:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> ~/Downloads/antlr-4.8-complete.jar <span class="nt">-package</span> io.vepo.tutorial.antlr4.generated src/main/antlr4/io/vepo/tutorial/antlr4/generated/TestSuite.g4
</code></pre></div>    </div>
  </li>
  <li>Use os arquivos gerados no seu projeto, conforme abaixo:
<img src="https://dev-to-uploads.s3.amazonaws.com/i/wbw4yg3ntuv7bhha3ms8.png" alt="Arquivos ANTLR4" /></li>
</ol>

<h3 id="gerando-usando-o-maven">Gerando usando o Maven</h3>

<p>Usando o Maven √© bem mais simples. Crie seu arquivo <code class="language-plaintext highlighter-rouge">.g4</code> no diret√≥rio similar ao pacote. Por exemplo, em nosso exemplo est√°:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/iuughcd323jeemn01d2f.png" alt="ANTLR4 Gram√°tica" /></p>

<p>E depois configure o plugin do ANTLR4 em seu <code class="language-plaintext highlighter-rouge">pom.xml</code></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.antlr<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>antlr4-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;version&gt;</span>${version.antlr4}<span class="nt">&lt;/version&gt;</span>
	<span class="nt">&lt;configuration&gt;</span>
		<span class="nt">&lt;arguments&gt;</span>
			<span class="nt">&lt;argument&gt;</span>-package<span class="nt">&lt;/argument&gt;</span>
			<span class="nt">&lt;argument&gt;</span>io.vepo.tutorial.antlr4.generated<span class="nt">&lt;/argument&gt;</span>
		<span class="nt">&lt;/arguments&gt;</span>
	<span class="nt">&lt;/configuration&gt;</span>
	<span class="nt">&lt;executions&gt;</span>
		<span class="nt">&lt;execution&gt;</span>
			<span class="nt">&lt;goals&gt;</span>
				<span class="nt">&lt;goal&gt;</span>antlr4<span class="nt">&lt;/goal&gt;</span>
			<span class="nt">&lt;/goals&gt;</span>
		<span class="nt">&lt;/execution&gt;</span>
	<span class="nt">&lt;/executions&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<h2 id="usando-o-c√≥digo-gerado">Usando o C√≥digo Gerado</h2>

<p>Do c√≥digo gerado, ser√° preciso apenas reimplementar uma classe. Veja a interface <code class="language-plaintext highlighter-rouge">TestSuiteListener</code>, para cada Regra √© chamado um M√©todo antes e depois de processado. Em cada m√©todo h√° um objeto de contexto onde podemos acessar todos os Tokens.</p>

<p>Esses m√©todos s√£o chamados em ordem, assim para o exemplo abaixo, qualquer metodo do atributo <code class="language-plaintext highlighter-rouge">url</code> ser√° chamado antes de <code class="language-plaintext highlighter-rouge">method</code> e assim por diante. Todos como tem apenas uma suite, o <code class="language-plaintext highlighter-rouge">enterSuite</code> e  o <code class="language-plaintext highlighter-rouge">exitSuite</code> ser√£o o primeiro e √∫ltimo a serem chamados.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Suite UserTest {
    HTTP CreateUser {
        url   : "http://127.0.0.1"
        method: "POST"
        body  : """
                   {
                       "id": 123,
                       "firstName": "John",
                       "lastName" : "Doe"
                   }
                """
        assert responseCode Equals 200
    }
}
</code></pre></div></div>

<p>Por fim, para transformar texto em Objetos, basta chamar o parser?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TestSuiteParser</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TestSuiteParser</span><span class="o">(</span>
		<span class="k">new</span> <span class="nf">CommonTokenStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">TestSuiteLexer</span><span class="o">(</span><span class="nc">CharStreams</span><span class="o">.</span><span class="na">fromString</span><span class="o">(</span><span class="n">contents</span><span class="o">))));</span>
<span class="nc">ParseTreeWalker</span> <span class="n">walker</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ParseTreeWalker</span><span class="o">();</span>
<span class="nc">SuiteCreator</span> <span class="n">creator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SuiteCreator</span><span class="o">();</span>
<span class="n">walker</span><span class="o">.</span><span class="na">walk</span><span class="o">(</span><span class="n">creator</span><span class="o">,</span> <span class="n">parser</span><span class="o">.</span><span class="na">suite</span><span class="o">());</span>
<span class="nc">Suite</span> <span class="n">suite</span> <span class="o">=</span> <span class="n">creator</span><span class="o">.</span><span class="na">getTestSuite</span><span class="o">();</span>
</code></pre></div></div>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>Existem problemas que s√≥ podem ser resolvidos criando uma linguagem. Se usarmos padr√µes como JSON ou XML vamos complicar mais que simplificar.</p>

<p>Para essas solu√ß√µes, √© mais f√°cil usar o ANTLR. Assim criamos uma linguagem facilmente.</p>

<h1 id="recursos">Recursos</h1>

<p>Todo o c√≥digo usado nesse post est√° dispon√≠vel no reposit√≥rio <a href="https://github.com/vepo/antlr4-post">github.com/vepo/antlr4-post</a></p>

<p>Continuarei o desenvolvimento dessa tool em <a href="https://github.com/vepo/plain-test">Plain Test github.com/vepo/plain-test</a>. Qualquer ajuda √© bem vinda‚Ä¶.</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Parser" /><category term="ANTLR4" /><category term="Tutorial" /><summary type="html"><![CDATA[Nesse post ensinarei como criar uma linguagem, n√£o de programa√ß√£o, usando ANTLR4 em Java.]]></summary></entry></feed>