<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/Java.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/Java.xml</id><title type="html">vepo</title><subtitle>Um repositório para todos os posts, palestras e tutoriais que já fiz. Java, Desenvolvimento de Software e reflexões sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">Sotaques e fluência em linguagens de programação</title><link href="https://blog.vepo.dev/posts/sotaques-e-fluencia-em-linguagens-de-programacao" rel="alternate" type="text/html" title="Sotaques e fluência em linguagens de programação" /><published>2025-08-28T00:00:00+00:00</published><updated>2025-08-28T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/09-49-00-java-language</id><content type="html" xml:base="https://blog.vepo.dev/posts/sotaques-e-fluencia-em-linguagens-de-programacao"><![CDATA[<p>Linguagens de programação são uma forma de expressão, da mesma forma que as linguas falantes. Elas possuem uma comunidade e, em conseguência, uma cultura associada. Dessa forma, podemos concluir que cada linguagem possui sua própria “personalidade” - um conjunto de convenções, padrões e estilos que constituem sua expressão idiomática. Eu sempre digo que todo código é idiomático, só precisamos descobri qual idioma ele está expressando. Escrever código idiomático significa não apenas fazer funcionar, mas fazer da maneira que a comunidade daquela linguagem espera e valoriza.</p>

<h2 id="o-que-são-padrões-idiomáticos">O que são Padrões Idiomáticos?</h2>

<p>Padrões idiomáticos são convenções estabelecidas pela comunidade que tornam o código mais legível, maintainable e alinhado com a filosofia da linguagem. É a diferença entre simplesmente falar uma língua e falá-la com fluência nativa.</p>

<h2 id="java-a-linguagem-corporativa-por-excelência">Java: A Linguagem Corporativa por Excelência</h2>

<p>Java surgiu em 1995 com o mantra “Write Once, Run Anywhere” e rapidamente se estabeleceu como a linguagem preferida para aplicações empresariais. Sua filosofia valoriza:</p>

<ul>
  <li><strong>Clareza acima de brevidade</strong></li>
  <li><strong>Manutenibilidade a longo prazo</strong></li>
  <li><strong>Robustez e segurança</strong></li>
  <li><strong>Compatibilidade reversa</strong></li>
</ul>

<h2 id="como-escrever-código-java-idiomático">Como Escrever Código Java Idiomático</h2>

<h3 id="1-convenções-de-nomenclatura">1. Convenções de Nomenclatura</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Classes e interfaces: PascalCase</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerService</span> <span class="kd">implements</span> <span class="nc">Validatable</span> <span class="o">{</span>
    
    <span class="c1">// Constantes: UPPER_SNAKE_CASE</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAX_RETRY_ATTEMPTS</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">DEFAULT_TIMEZONE</span> <span class="o">=</span> <span class="s">"UTC"</span><span class="o">;</span>
    
    <span class="c1">// Variáveis e métodos: camelCase</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">customerName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">pendingOrders</span><span class="o">;</span>
    
    <span class="c1">// Métodos devem ser verbos</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processOrder</span><span class="o">(</span><span class="nc">Order</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">validateOrder</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
        <span class="n">calculateTotal</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
        <span class="n">persistOrder</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="c1">// Métodos booleanos geralmente começam com "is", "has", "can"</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValidCustomer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">customerName</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">customerName</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="2-estrutura-de-classes-e-pacotes">2. Estrutura de Classes e Pacotes</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Ordem recomendada dentro de uma classe:</span>
<span class="c1">// 1. Variáveis estáticas</span>
<span class="c1">// 2. Variáveis de instância</span>
<span class="c1">// 3. Construtores</span>
<span class="c1">// 4. Métodos</span>

<span class="kn">package</span> <span class="nn">com.empresa.projeto.modulo.service</span><span class="o">;</span> <span class="c1">// Pacotes em lowercase</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>

<span class="c1">// Uma classe por arquivo, nome do arquivo = nome da classe</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderProcessor</span> <span class="o">{</span>
    
    <span class="c1">// Campos primeiro</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">OrderRepository</span> <span class="n">orderRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">NotificationService</span> <span class="n">notificationService</span><span class="o">;</span>
    
    <span class="c1">// Injeção de dependências via construtor</span>
    <span class="kd">public</span> <span class="nf">OrderProcessor</span><span class="o">(</span><span class="nc">OrderRepository</span> <span class="n">orderRepository</span><span class="o">,</span> 
                         <span class="nc">NotificationService</span> <span class="n">notificationService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderRepository</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">notificationService</span> <span class="o">=</span> <span class="n">notificationService</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="c1">// Métodos públicos primeiro, depois privados</span>
    <span class="kd">public</span> <span class="nc">ProcessingResult</span> <span class="nf">processBatch</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">orders</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">validateOrders</span><span class="o">(</span><span class="n">orders</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">internalProcess</span><span class="o">(</span><span class="n">orders</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="nc">ProcessingResult</span> <span class="nf">internalProcess</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">orders</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Implementação</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3-tratamento-de-exceções">3. Tratamento de Exceções</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PaymentService</span> <span class="o">{</span>
    
    <span class="c1">// Use exceções específicas</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processPayment</span><span class="o">(</span><span class="nc">Payment</span> <span class="n">payment</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">PaymentProcessingException</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">validatePayment</span><span class="o">(</span><span class="n">payment</span><span class="o">);</span>
            <span class="n">gateway</span><span class="o">.</span><span class="na">charge</span><span class="o">(</span><span class="n">payment</span><span class="o">);</span>
            <span class="n">logSuccess</span><span class="o">(</span><span class="n">payment</span><span class="o">);</span>
            
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InvalidPaymentException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Exceções de negócio - geralmente unchecked</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">PaymentProcessingException</span><span class="o">(</span><span class="s">"Pagamento inválido"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">GatewayTimeoutException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Exceções técnicas - possivelmente checked</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">PaymentProcessingException</span><span class="o">(</span><span class="s">"Timeout no gateway"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="c1">// Sempre libere recursos no finally</span>
            <span class="n">cleanupResources</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="c1">// Prefira exceções unchecked para erros de programação</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">validatePayment</span><span class="o">(</span><span class="nc">Payment</span> <span class="n">payment</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">payment</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Payment cannot be null"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="4-uso-de-collections-e-streams-api">4. Uso de Collections e Streams API</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderAnalyzer</span> <span class="o">{</span>
    
    <span class="c1">// Prefira interfaces sobre implementações</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="nf">filterActiveOrders</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">orders</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">// Java moderno: use Streams API para processamento</span>
        <span class="k">return</span> <span class="n">orders</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Order:</span><span class="o">:</span><span class="n">isActive</span><span class="o">)</span>          <span class="c1">// Method reference</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">order</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">order</span><span class="o">.</span><span class="na">isExpired</span><span class="o">())</span> <span class="c1">// Lambda expression</span>
            <span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="nc">Comparator</span><span class="o">.</span><span class="na">comparing</span><span class="o">(</span><span class="nl">Order:</span><span class="o">:</span><span class="n">getCreatedDate</span><span class="o">)</span>
            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>    <span class="c1">// Coletor idiomático</span>
    <span class="o">}</span>
    
    <span class="c1">// Use factories para criar collections</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;&gt;</span> <span class="nf">groupOrdersByCategory</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">orders</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;&gt;</span> <span class="n">grouped</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        
        <span class="k">for</span> <span class="o">(</span><span class="nc">Order</span> <span class="n">order</span> <span class="o">:</span> <span class="n">orders</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// ComputeIfAbsent é idiomático para agrupamento</span>
            <span class="n">grouped</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getCategory</span><span class="o">(),</span> <span class="n">k</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;())</span>
                  <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableMap</span><span class="o">(</span><span class="n">grouped</span><span class="o">);</span> <span class="c1">// Retorne views imutáveis</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="5-gerenciamento-de-recursos-com-try-with-resources">5. Gerenciamento de Recursos com try-with-resources</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileProcessor</span> <span class="o">{</span>
    
    <span class="c1">// Sempre use try-with-resources para recursos que precisam ser fechados</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">readFile</span><span class="o">(</span><span class="nc">String</span> <span class="n">filename</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileReader</span><span class="o">(</span><span class="n">filename</span><span class="o">)))</span> <span class="o">{</span>
            <span class="nc">StringBuilder</span> <span class="n">content</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
            <span class="nc">String</span> <span class="n">line</span><span class="o">;</span>
            
            <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">content</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
            <span class="o">}</span>
            
            <span class="k">return</span> <span class="n">content</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
        <span class="o">}</span> <span class="c1">// BufferedReader é automaticamente fechado aqui</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="6-imutabilidade-e-records">6. Imutabilidade e Records</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Prefira imutabilidade onde possível</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ImmutableCustomer</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tags</span><span class="o">;</span> <span class="c1">// Defensiva para collections</span>
    
    <span class="kd">public</span> <span class="nf">ImmutableCustomer</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tags</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tags</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">tags</span><span class="o">));</span>
    <span class="o">}</span>
    
    <span class="c1">// Apenas getters, sem setters</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getTags</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">tags</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Java 14+: Use records para DTOs imutáveis</span>
<span class="kd">public</span> <span class="n">record</span> <span class="nf">CustomerRecord</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tags</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Construtor compacto para validação</span>
    <span class="kd">public</span> <span class="nc">CustomerRecord</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">name</span><span class="o">.</span><span class="na">isBlank</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Name cannot be blank"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">tags</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">tags</span><span class="o">);</span> <span class="c1">// Garante imutabilidade</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="7-padrões-de-projeto-idiomáticos">7. Padrões de Projeto Idiomáticos</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Builder pattern para objetos complexos</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerBuilder</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nc">CustomerBuilder</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nc">Customer</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Customer</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">email</span><span class="o">,</span> <span class="n">phone</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Factory method pattern</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PaymentProcessor</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="nc">PaymentProcessor</span> <span class="nf">create</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">case</span> <span class="s">"creditcard"</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">CreditCardProcessor</span><span class="o">();</span>
            <span class="k">case</span> <span class="s">"paypal"</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">PayPalProcessor</span><span class="o">();</span>
            <span class="k">default</span> <span class="o">-&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">"Unknown processor type: "</span> <span class="o">+</span> <span class="n">type</span><span class="o">);</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="8-anotações-e-metadados">8. Anotações e Metadados</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Use anotações consistentemente</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/customers"</span><span class="o">)</span>
<span class="nd">@Validated</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerController</span> <span class="o">{</span>
    
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{id}"</span><span class="o">)</span>
    <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">CustomerResponse</span> <span class="nf">getCustomer</span><span class="o">(</span>
            <span class="nd">@PathVariable</span> <span class="nd">@Min</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">,</span>
            <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="nc">String</span> <span class="n">expand</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="k">return</span> <span class="n">customerService</span><span class="o">.</span><span class="na">findCustomerById</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">expand</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="nd">@PostMapping</span>
    <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">CustomerResponse</span> <span class="nf">createCustomer</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nd">@Valid</span> <span class="nc">CustomerRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">customerService</span><span class="o">.</span><span class="na">createCustomer</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="boas-práticas-adicionais">Boas Práticas Adicionais</h2>

<ol>
  <li><strong>Documentação</strong>: Use Javadoc consistentemente</li>
  <li><strong>Testes</strong>: Junit 5 com nomes descritivos</li>
  <li><strong>Logging</strong>: Use SLF4J com logs significativos</li>
  <li><strong>Null Safety</strong>: Use Optional para retornos potencialmente nulos</li>
  <li><strong>Performance</strong>: Evite otimização prematura, mas conheça o custo das operações</li>
</ol>

<h2 id="conclusão">Conclusão</h2>

<p>Escrever código Java idiomático vai além da sintaxe correta. É sobre entender a cultura Java: valorizar clareza, robustez e maintainability. É escrever código que não apenas funciona, mas que comunica claramente sua intenção para outros desenvolvedores Java.</p>

<p>O código Java idiomático é como um bom documento legal: preciso, completo e sem ambiguidades. Pode não ser o mais conciso, mas é certamente um dos mais legíveis e maintainable quando feito corretamente.</p>

<p>Lembre-se: o código é lido muitas mais vezes do que escrito. Escreva para o leitor, não apenas para o compilador.</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><summary type="html"><![CDATA[Cada linguagem de programação possui um sotque específico e é fácil identificar quando um desenvoledor de outra linguagem não busca conhecer a cultura e os padrões de uma linguagem. Mas esse comportamento não é um mero preciosismo estético, bugs podem aparecer ao não se atentar para a maneira como as coisas são feitas.]]></summary></entry><entry><title type="html">Como gerar flamegraph em aplicações Java</title><link href="https://blog.vepo.dev/posts/como-gerar-flamegraph-na-jvm" rel="alternate" type="text/html" title="Como gerar flamegraph em aplicações Java" /><published>2025-02-24T00:00:00+00:00</published><updated>2025-02-24T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/07-59-00-como-gerar-flamegraph-em-java</id><content type="html" xml:base="https://blog.vepo.dev/posts/como-gerar-flamegraph-na-jvm"><![CDATA[<div class="paragraph">
<p>Profiling tem sido uma das minhas principais atividades nos últimos meses. Como a aplicação que eu trabalho chegou a um bom grau de
maturidade onde há poucas funcionalidades a sere feitas e os bugs de produção são raros, hoje o principal esforço é melhorar o desempenho
e reduzir o uso de recursos. Por isso muito se pede para investigar o uso de CPU ou reduzir o tempo de processamento, o que me levou a
estudar com se dá o uso da CPU em produção e como funciona internamente o Kafka Stream.</p>
</div>
<div class="paragraph">
<p>É nesse contexto que resolvi finalmente investir um tempo para tentar gerar um diagrama muito interessante chamado Flamegraph. Caso você
ainda não o conheça, vamos primeiro falar sobre ele e depois mostrar como você pode gerar ele na sua aplicação Java facilmente!</p>
</div>
<div class="sect1">
<h2 id="_o-flamegraph">O Flamegraph</h2>
<div class="sectionbody">
<div class="paragraph">
<p>O Flamegraph é um diagrama de monitoramento do uso da CPU <a href="https://www.brendangregg.com/flamegraphs.html">criado por Brendan Gregg</a> enquanto trabalhava
investigando problemas de performance no MySQL. Caso você queira ler a descrição do próprio criador, recomendo um post no site pessoal dele
<a href="https://www.brendangregg.com/flamegraphs.html">Flame Graphs</a> e um artigo na Communications da ACM chamado
<a href="https://cacm.acm.org/practice/the-flame-graph/">The Flame Graph</a>.</p>
</div>
<div id="cpu-mysql-updated" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/cpu-mysql-updated.svg" alt="cpu mysql updated">
</div>
<div class="title">Figura 1. Flamegraph do uso de CPU do MySQL</div>
</div>
<div class="paragraph">
<p>A informação provida pelo flamegraph pode não parecer nova, ela já era provida por diversas ferramentas de profiling, mas a forma de interação
com o dado é mais interessante e dos dá mais informações sobre o que realmente acontece em tempo de execução. O VisualVM já provê informação semelhante,
mas a forma que ela é exibida, apesar de mais acurada, torna difícil visualizar o real uso da CPU. As ferramentas tradicionais agrupavam o uso de CPUs por
<em>threads</em>, como é visto na imagem abaixo. Conseguimos ver o uso de cada thread, o que de certa forma está parcialmente certo, mas dificulta a visualização
pois não vemos o dado real por CPU.</p>
</div>
<div id="visualvm-cpu-profiling" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java/visualvm-cpu-profiling.png" alt="visualvm cpu profiling">
</div>
<div class="title">Figura 2. Profiling da CPU pelo VisualVM.</div>
</div>
<div class="paragraph">
<p>Pode parecer estranho o que vou afirmar aqui, mas <em>threads</em> não existem! <em>Threads</em> são uma abstração do Sistema Operacional que facilitam o desenvolvimento de
software ao tratar o paralelismo como uma necessidade básica. Para entender melhor essa afirmação temos que entender que CPU é um recurso do nosso sistema que é
compartilhado entre as diversas <em>threads</em>. O que o flamegraph faz é mostrar todo o uso de CPU ignorando a existência de <em>threads</em> e isso ajuda muito na visualização!</p>
</div>
<div class="paragraph">
<p>Ao afirmar the <em>threads</em> não existem não estou dizendo que você não deva abolir <em>threads</em>, muito pelo contrário. Mas muitas vezes o processamento que está distribuído
em diversas <em>threads</em> é implementado pelo memso código. Vamos pensar no Kafka Stream! Nós normalmente implementamos uma pipeline que é única e será executada pela
<em>StreamThread</em>. Uma aplicação em produção terá diversas <em>StreamThread</em> executando o mesmo código! Quando olhamos para o VisualVM, temos que optar por uma dessas
<em>StreamThread</em>, enquanto ao olharmos para o flamegraph, vemos todas as <em>StreamThreads</em>!!!</p>
</div>
<div class="paragraph">
<p>Isso acontece porque ao se colocar todo o tempo de CPU em um único eixo, facilita-se a visualização. O flamegraph reduz o número de variáveis a se considerar para
se extrair um dado simples: tempo de CPU!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_como-extrair-o-flamegraph">Como extrair o Flamegraph?!</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Se você fizer essa pesquisa no Google, já aviso que se deparará com diversos posts com muita informação antiga e pouca comparação. Verá posts onde só se usou
as ferramentas de performance do Linux, outros posts usando somente o Java Flight Recorder e outros posts usando agentes nativos que integram código Java com
as ferramentas nativas do Linux. Nesse post eu vou mostrar como exatrair de duas formas e depois comparar os resultados obtidos por ambas as formas.</p>
</div>
<div class="sect2">
<h3 id="_extraindo-usando-apenas-o-java-flight-recorder">Extraindo usando apenas o Java Flight Recorder!</h3>
<div class="paragraph">
<p>A primeira forma de se extrair o flamegraph é pegar as informações necessárias usando apenas ferramentas providas pela JVM e depois processar essa informações
criando o framegraph. A JVM já provê uma série de ferramentas de profiling que estão dentro do JDK. Se você não conhece o comando <code>jcmd</code> recomendo parar tudo que
está fazendo e dar uma olhada nele. <a href="https://docs.oracle.com/en/java/javase/21/docs/specs/man/jcmd.html">Na documentação do <code>jcmd</code></a> você consegue encontrar a
descrição de todo comandos que você pode executar só passando o PID da JVM que você quer olhar.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>&gt; jcmd MyProgram <span style="color: #008000">help</span> <span style="color: #666666">(</span>or <span style="color: #BA2121">&quot;jcmd 2125 help&quot;</span><span style="color: #666666">)</span>
<span style="color: #666666">2125</span>:
The following commands are available:
JFR.stop
JFR.start
JFR.dump
JFR.check
VM.native_memory
VM.check_commercial_features
VM.unlock_commercial_features
ManagementAgent.stop
ManagementAgent.start_local
ManagementAgent.start
Thread.print
GC.class_stats
GC.class_histogram
GC.heap_dump
GC.run_finalization
GC.run
VM.uptime
VM.flags
VM.system_properties
VM.command_line
VM.version
<span style="color: #008000">help</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Para gerar o flamegraph independentemente do método, você precisará do <a href="https://github.com/async-profiler/async-profiler"><strong>async-profiler</strong></a>. É uma excelente
ferramenta que gera o flamegraph a partir da gravação do Java Flight Recorder e também gera usando o agente nativo.</p>
</div>
<div class="paragraph">
<p>Nesse primeiro método vamos usar o Java Flight Recorder para gravar as informações de execução e depois gerar o flamegraph, para gravar as informações você
pode usar os dois métodos abaixos, ambos foram extraídos de scripts de profile que eu uso. No primeiro eu inicio a gravação, depois gero trafego (o qual foi
substituído pelo <code>sleep</code>) e por fim finalizo a gravação. A vantagem desse método é que você grava somente o periodo em que o trafego foi gerado.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span><span style="color: #19177C">DURATION</span><span style="color: #666666">=1200</span> <span style="color: #408080; font-style: italic">## 2 minutos</span>
rm -f /tmp/recording.jfr                                            <span style="color: #408080; font-style: italic">## Apaga gravações antigas que podem ter sido feitas</span>
<span style="color: #19177C">NAME</span><span style="color: #666666">=</span><span style="color: #008000; font-weight: bold">$(</span>cat /dev/urandom | tr -dc <span style="color: #BA2121">&#39;a-zA-Z&#39;</span> | fold -w <span style="color: #666666">15</span> | head -n <span style="color: #666666">1</span><span style="color: #008000; font-weight: bold">)</span> <span style="color: #408080; font-style: italic">## Gera um nome aleatório para evitar conflitos</span>
<span style="color: #19177C">PID</span><span style="color: #666666">=</span><span style="color: #008000; font-weight: bold">$(</span>ps -a | grep java | awk <span style="color: #BA2121">&#39;{print $1}&#39;</span><span style="color: #008000; font-weight: bold">)</span>                         <span style="color: #408080; font-style: italic">## Acessa número do processo em execução se rodando em docker/k8s</span>
jcmd <span style="color: #19177C">$PID</span> JFR.start <span style="color: #19177C">name</span><span style="color: #666666">=</span><span style="color: #19177C">$NAME</span> <span style="color: #19177C">settings</span><span style="color: #666666">=</span>profile                     <span style="color: #408080; font-style: italic">## Inicia gravação</span>
sleep <span style="color: #19177C">$DURATION</span>
jcmd <span style="color: #19177C">$PID</span> JFR.stop <span style="color: #19177C">name</span><span style="color: #666666">=</span><span style="color: #19177C">$NAME</span> <span style="color: #19177C">filename</span><span style="color: #666666">=</span>/tmp/recording.jfr</code></pre>
</div>
</div>
<div class="paragraph">
<p>No segundo método, o <code>jcmd</code> é executado de forma asincrona usando os parâmetros <code>duration</code> e <code>delay</code>. Esse método é bom para capturar informações
do ambiente de produção sem precisar reiniciar o servidor.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span><span style="color: #19177C">DELAY</span><span style="color: #666666">=</span>10m
<span style="color: #19177C">DURATION</span><span style="color: #666666">=</span>20m
rm -f /tmp/recording.jfr                                                        <span style="color: #408080; font-style: italic">## Apaga gravações antigas que podem ter sido feitas</span>
<span style="color: #19177C">NAME</span><span style="color: #666666">=</span><span style="color: #008000; font-weight: bold">$(</span>cat /dev/urandom | tr -dc <span style="color: #BA2121">&#39;a-zA-Z&#39;</span> | fold -w <span style="color: #666666">15</span> | head -n <span style="color: #666666">1</span><span style="color: #008000; font-weight: bold">)</span>             <span style="color: #408080; font-style: italic">## Gera um nome aleatório para evitar conflitos</span>
<span style="color: #19177C">PID</span><span style="color: #666666">=</span><span style="color: #008000; font-weight: bold">$(</span>ps -a | grep java | awk <span style="color: #BA2121">&#39;{print $1}&#39;</span><span style="color: #008000; font-weight: bold">)</span>                                     <span style="color: #408080; font-style: italic">## Acessa número do processo em execução se rodando em docker/k8s</span>
jcmd <span style="color: #19177C">$PID</span> JFR.start <span style="color: #19177C">name</span><span style="color: #666666">=</span><span style="color: #19177C">$NAME</span> <span style="color: #19177C">settings</span><span style="color: #666666">=</span>profile <span style="color: #19177C">delay</span><span style="color: #666666">=</span><span style="color: #19177C">$DELAY</span> <span style="color: #19177C">duration</span><span style="color: #666666">=</span><span style="color: #19177C">$DURATION</span> <span style="color: #408080; font-style: italic">## Inicia gravação</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Depois de capturado o arquivo <code>recording.jfr</code>, você precisa gerar o flamegraph usando o
<a href="https://github.com/async-profiler/async-profiler/releases/download/v3.0/converter.jar">converter</a> do async-profile.
Para isso execute o comando abaixo e <em>voilà</em>!!! Você tem uma pagina HTML pura para colocar onde quiser. Eu coloquei ela como
artefato dos testes de carga da aplicação.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>java -cp converter.jar jfr2flame --dot --total --alloc --classify --title <span style="color: #BA2121">&quot;My CPU Profile&quot;</span> /tmp/recording.jfr /tmp/flamegraph.html</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 1. Aviso</div>
<div class="content">
<div class="paragraph">
<p>O tamanho do arquivo gerado será proporcional ao tempo de gravação, por isso garanta que há espaço em disco
e use sabiamente a duração (<em>duration</em>) e o atrado (<em>delay</em>) para capturar o melhor momento da execução.</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_extraindo-usando-agente-nativo">Extraindo usando agente nativo</h3>
<div class="paragraph">
<p>A grande desvantagem de usar somente o Java Flight Recorder é que algumas informações sobre a execução nativa é perdida. Ao migrar para
a execução usando o agente nativo consegui, por exemplo, identificar alguns trechos de código que usavam <strong>exceptions para controle de fluxo
o que pode ser um grande problema de desempenho</strong>.</p>
</div>
<div class="paragraph">
<p>Para executar usando agente natvo com o <a href="https://github.com/async-profiler/async-profiler"><strong>async-profiler</strong></a>, basta fazer o download da buil,
copiar para o ambiente de execução e depois executar o comando <code>asprof</code> como mostrado abaixo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span><span style="color: #19177C">DURATION</span><span style="color: #666666">=1200</span>
<span style="color: #19177C">PID</span><span style="color: #666666">=</span><span style="color: #008000; font-weight: bold">$(</span>ps -a | grep java | awk <span style="color: #BA2121">&#39;{print $1}&#39;</span><span style="color: #008000; font-weight: bold">)</span>                                                <span style="color: #408080; font-style: italic">## Acessa número do processo em execução se rodando em docker/k8s</span>
/tmp/async-profiler-3.0-linux-x64/bin; ./asprof -d <span style="color: #19177C">$DURATION</span> -f /tmp/flamegraph.html <span style="color: #19177C">$PID</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>A desvantagem desse método é que você alterou o ambiente em que o seu software está rodando. Isso não tem problemas na grande maioria dos casos,
mas não é muito bem visto para ambientes de produção.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_recomendações">Recomendações</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Eu recomendo que você use constantemente ferramentas de profiling para visualizar o que está acontecendo no seu software. Existe uma máxima na área
de adminstração que pode ser aplicada em qualquer lugar das nossa vidas "o que não pode ser medido, não pode ser gerenciado", logo é importante para
você saber como está o tempo de execução do seu software.</p>
</div>
<div class="paragraph">
<p>A segunda recomendação é você, caso precise melhorar o desempenho do seu software, olhar primeiro para o local que mais impacta o desemepenho. Ganho
de performance é proprocional ao tempo de desempenho, por isso só investa tempo onde há mais indicios de tempo gasto.</p>
</div>
<div class="paragraph">
<p>Uma outra recomendação é que você pode criar ferramentas de análise de desempenho automatizadas usando ferramentas de DevOps. Quem sabe criar uma task no
Jenkins que extrai o FlameGraph e depois salva para análises futuras? Ou salvar essa página para cada nova versão e comparar como o desempenho tem evoluido?</p>
</div>
<div class="paragraph">
<p>Eu espero ter ajuda com alguma coisa!</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Observabilidade" /><category term="Profiling" /><category term="Tuning" /><category term="JVM" /><category term="Flamegraph" /><summary type="html"><![CDATA[Já ouviu falar de Flamegraph? E quais ferramentas de profiling você usa? Nesse post vamos falar de como podemos ver qual é o uso da CPU em produção de uma aplicação rodando na JVM usando ferramentas simples e um ótimo formato de visualização.]]></summary></entry><entry><title type="html">Entendendo equals(), hashCode() e Collections em Java</title><link href="https://blog.vepo.dev/posts/java-collections-equals-hashcode" rel="alternate" type="text/html" title="Entendendo equals(), hashCode() e Collections em Java" /><published>2024-01-09T00:00:00+00:00</published><updated>2024-01-09T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/14-13-46-java-collections-equals-hashcode</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-collections-equals-hashcode"><![CDATA[<p>Neste post, vamos explorar os conceitos fundamentais de <code class="language-plaintext highlighter-rouge">equals()</code>, <code class="language-plaintext highlighter-rouge">hashCode()</code> e como eles são utilizados em estruturas de dados como <code class="language-plaintext highlighter-rouge">HashSet</code> e <code class="language-plaintext highlighter-rouge">HashMap</code> no Java. Além disso, discutiremos a importância da imutabilidade e como implementar esses métodos corretamente.</p>

<hr />
<iframe width="560" height="315" src="https://www.youtube.com/embed/-ATMYvny-7Y" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
<hr />

<h2 id="introdução-ao-java-collections">Introdução ao Java Collections</h2>

<p>O pacote <code class="language-plaintext highlighter-rouge">java.util.Collections</code> é uma biblioteca padrão do Java que fornece implementações de estruturas de dados comuns, como listas, conjuntos e mapas. Essas estruturas são essenciais para o desenvolvimento eficiente em Java, pois eliminam a necessidade de implementar soluções personalizadas para problemas recorrentes.</p>

<hr />

<h2 id="contratos-em-java">Contratos em Java</h2>

<p>Em Java, os contratos são regras documentadas que definem como determinados métodos devem se comportar. Diferentemente de outras linguagens, o Java não possui um mecanismo embutido para validação de contratos, mas a documentação é clara sobre as expectativas. Dois dos contratos mais importantes são os métodos <code class="language-plaintext highlighter-rouge">equals()</code> e <code class="language-plaintext highlighter-rouge">hashCode()</code>, herdados da classe <code class="language-plaintext highlighter-rouge">Object</code>.</p>

<h3 id="regras-para-equals">Regras para <code class="language-plaintext highlighter-rouge">equals()</code></h3>
<ol>
  <li><strong>Reflexividade</strong>: Um objeto deve ser igual a si mesmo.</li>
  <li><strong>Simetria</strong>: Se <code class="language-plaintext highlighter-rouge">A.equals(B)</code> é <code class="language-plaintext highlighter-rouge">true</code>, então <code class="language-plaintext highlighter-rouge">B.equals(A)</code> também deve ser <code class="language-plaintext highlighter-rouge">true</code>.</li>
  <li><strong>Transitividade</strong>: Se <code class="language-plaintext highlighter-rouge">A.equals(B)</code> e <code class="language-plaintext highlighter-rouge">B.equals(C)</code> são <code class="language-plaintext highlighter-rouge">true</code>, então <code class="language-plaintext highlighter-rouge">A.equals(C)</code> também deve ser <code class="language-plaintext highlighter-rouge">true</code>.</li>
  <li><strong>Consistência</strong>: O método deve sempre retornar o mesmo valor, desde que o objeto não seja modificado.</li>
  <li><strong>Não-nulidade</strong>: Um objeto nunca deve ser igual a <code class="language-plaintext highlighter-rouge">null</code>.</li>
</ol>

<h3 id="regras-para-hashcode">Regras para <code class="language-plaintext highlighter-rouge">hashCode()</code></h3>
<ol>
  <li><strong>Consistência</strong>: Deve retornar o mesmo valor para um objeto não modificado.</li>
  <li><strong>Correspondência com <code class="language-plaintext highlighter-rouge">equals()</code></strong>: Se dois objetos são iguais (<code class="language-plaintext highlighter-rouge">equals()</code> retorna <code class="language-plaintext highlighter-rouge">true</code>), seus <code class="language-plaintext highlighter-rouge">hashCode()</code> devem ser iguais. O inverso não é necessariamente verdadeiro.</li>
</ol>

<hr />

<h2 id="hashset-e-hashmap">HashSet e HashMap</h2>

<h3 id="hashset">HashSet</h3>
<ul>
  <li>É uma implementação de <code class="language-plaintext highlighter-rouge">Set</code> que não permite elementos duplicados.</li>
  <li>Utiliza <code class="language-plaintext highlighter-rouge">hashCode()</code> para determinar a posição do elemento em uma tabela interna.</li>
  <li>Em caso de colisões (dois objetos com o mesmo <code class="language-plaintext highlighter-rouge">hashCode()</code>), o <code class="language-plaintext highlighter-rouge">equals()</code> é usado para verificar a igualdade.</li>
</ul>

<h3 id="hashmap">HashMap</h3>
<ul>
  <li>É uma implementação de <code class="language-plaintext highlighter-rouge">Map</code> que armazena pares chave-valor.</li>
  <li>A chave é usada para calcular o <code class="language-plaintext highlighter-rouge">hashCode()</code> e determinar a posição na tabela.</li>
  <li>Assim como no <code class="language-plaintext highlighter-rouge">HashSet</code>, colisões são resolvidas usando <code class="language-plaintext highlighter-rouge">equals()</code>.</li>
</ul>

<h4 id="exemplo-de-colisão">Exemplo de Colisão</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Objeto</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="nc">Objeto</span> <span class="n">obj1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Objeto</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="nc">Objeto</span> <span class="n">obj2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Objeto</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// Mesmo hashCode que obj1</span>
<span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obj1</span><span class="o">);</span>
<span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obj2</span><span class="o">);</span> <span class="c1">// Só será adicionado se obj1.equals(obj2) for false</span>
</code></pre></div></div>

<hr />

<h2 id="imutabilidade">Imutabilidade</h2>

<p>Objetos imutáveis são aqueles cujo estado não pode ser alterado após a criação. Eles são ideais para uso em <code class="language-plaintext highlighter-rouge">HashSet</code> e <code class="language-plaintext highlighter-rouge">HashMap</code> porque:</p>

<ol>
  <li><strong>Consistência</strong>: O <code class="language-plaintext highlighter-rouge">hashCode()</code> não muda, evitando comportamentos inesperados.</li>
  <li><strong>Segurança</strong>: Não há risco de modificar uma chave após inserção, o que poderia tornar o valor inacessível.</li>
</ol>

<h3 id="como-criar-uma-classe-imutável">Como criar uma classe imutável</h3>
<ul>
  <li>Declare todos os campos como <code class="language-plaintext highlighter-rouge">final</code>.</li>
  <li>Não forneça métodos modificadores (setters).</li>
  <li>Para campos que requerem inicialização tardia (lazy initialization), use campos não <code class="language-plaintext highlighter-rouge">final</code> com cuidado.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Pessoa</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">nome</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">idade</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Pessoa</span><span class="o">(</span><span class="nc">String</span> <span class="n">nome</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idade</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">nome</span> <span class="o">=</span> <span class="n">nome</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">idade</span> <span class="o">=</span> <span class="n">idade</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// Getters, mas sem setters!</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="implementando-equals-e-hashcode">Implementando <code class="language-plaintext highlighter-rouge">equals()</code> e <code class="language-plaintext highlighter-rouge">hashCode()</code></h2>

<h3 id="usando-a-ide">Usando a IDE</h3>
<p>A maioria das IDEs (como IntelliJ ou Eclipse) pode gerar automaticamente esses métodos. Basta selecionar os campos relevantes.</p>

<h3 id="implementação-manual">Implementação manual</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// Reflexividade</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="nc">Pessoa</span> <span class="n">pessoa</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Pessoa</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">idade</span> <span class="o">==</span> <span class="n">pessoa</span><span class="o">.</span><span class="na">idade</span> <span class="o">&amp;&amp;</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">nome</span><span class="o">,</span> <span class="n">pessoa</span><span class="o">.</span><span class="na">nome</span><span class="o">);</span>
<span class="o">}</span>

<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">nome</span><span class="o">,</span> <span class="n">idade</span><span class="o">);</span> <span class="c1">// Usa a classe utilitária Objects</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="conclusão">Conclusão</h2>

<ol>
  <li><strong>Siga os contratos</strong>: Implemente <code class="language-plaintext highlighter-rouge">equals()</code> e <code class="language-plaintext highlighter-rouge">hashCode()</code> corretamente para evitar bugs.</li>
  <li><strong>Prefira imutabilidade</strong>: Objetos imutáveis simplificam o uso em <code class="language-plaintext highlighter-rouge">HashSet</code> e <code class="language-plaintext highlighter-rouge">HashMap</code>.</li>
  <li><strong>Use ferramentas</strong>: Aproveite as IDEs para gerar código, mas entenda o que está sendo gerado.</li>
</ol>

<p>Dominar esses conceitos é essencial para escrever código Java eficiente e livre de erros. Se tiver dúvidas, consulte a documentação oficial ou livros como <em>“Java Efetivo”</em> de Joshua Bloch.</p>

<p><strong>Palavras-chave</strong>: Java, equals, hashCode, HashSet, HashMap, imutabilidade, collections.
```</p>

<p>Este post resume os principais pontos da transcrição, organizando-os em um formato claro e fácil de seguir, com exemplos práticos e dicas úteis.</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Collections" /><category term="Algoritmos" /><summary type="html"><![CDATA[Neste post, vamos explorar os conceitos fundamentais de equals(), hashCode() e como eles são utilizados em estruturas de dados como HashSet e HashMap no Java. Além disso, discutiremos a importância da imutabilidade e como implementar esses métodos corretamente.]]></summary></entry><entry><title type="html">A Evolução do Java no Backend: Jakarta EE, Spring e Quarkus</title><link href="https://blog.vepo.dev/posts/java-no-backend" rel="alternate" type="text/html" title="A Evolução do Java no Backend: Jakarta EE, Spring e Quarkus" /><published>2023-10-16T00:00:00+00:00</published><updated>2023-10-16T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/11-15-52-java-no-backend</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-no-backend"><![CDATA[<p>O ecossistema Java para desenvolvimento backend passou por diversas transformações ao longo dos anos, desde os primórdios da orientação a objetos até as modernas soluções como microsserviços e contêineres. Neste post, exploramos essa jornada, destacando as tecnologias que moldaram o Java no backend e como elas se relacionam hoje.</p>

<hr />
<iframe width="560" height="315" src="https://www.youtube.com/embed/uTHZet430rs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
<hr />

<h2 id="1-as-fases-do-java-no-backend"><strong>1. As Fases do Java no Backend</strong></h2>

<h3 id="orientação-a-objetos-e-servidores-de-aplicação"><strong>Orientação a Objetos e Servidores de Aplicação</strong></h3>
<ul>
  <li><strong>Anos 90</strong>: Java surgiu em 1995 incorporando conceitos como CORBA e servlets (1996).</li>
  <li><strong>J2EE (1999)</strong>: Trouxe soluções como EJB (Enterprise JavaBeans) para objetos distribuídos e JDBC para conexão com bancos de dados.</li>
  <li><strong>Servidores de Aplicação (2001)</strong>: Como JBoss e WebLogic, permitiam deploy de aplicações em um único processo Java, facilitando a gestão de recursos.</li>
</ul>

<h3 id="a-revolução-do-docker-2013"><strong>A Revolução do Docker (2013)</strong></h3>
<ul>
  <li>A conteinerização mudou a forma como aplicações eram deployadas, eliminando a necessidade de servidores de aplicação monolíticos.</li>
  <li>Java 8 (2014) e Spring Boot surgiram como respostas ágeis a essa nova era.</li>
</ul>

<hr />

<h2 id="2-jakarta-ee-o-modelo-baseado-em-especificações"><strong>2. Jakarta EE: O Modelo Baseado em Especificações</strong></h2>
<p>Jakarta EE (antigo Java EE) é um <strong>modelo de programação baseado em specs</strong>, garantindo compatibilidade e flexibilidade.</p>

<h3 id="principais-especificações"><strong>Principais Especificações</strong></h3>
<ul>
  <li><strong>JPA</strong>: Persistência de dados.</li>
  <li><strong>JAX-RS</strong>: Desenvolvimento de APIs REST.</li>
  <li><strong>Bean Validation</strong>: Validação de dados com anotações.</li>
  <li><strong>CDI</strong>: Injeção de dependências.</li>
</ul>

<h3 id="vantagens"><strong>Vantagens</strong></h3>
<ul>
  <li><strong>Estabilidade</strong>: Código escrito há 20 anos ainda roda em servidores modernos.</li>
  <li><strong>Portabilidade</strong>: Depende de interfaces, não de implementações específicas.</li>
</ul>

<h3 id="microprofile-jakarta-ee-para-microsserviços"><strong>MicroProfile: Jakarta EE para Microsserviços</strong></h3>
<ul>
  <li>Extensão do Jakarta EE com foco em:
    <ul>
      <li>Observabilidade (OpenTelemetry).</li>
      <li>Tolerância a falhas.</li>
      <li>Autenticação via JWT.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="3-spring-acelerando-o-desenvolvimento"><strong>3. Spring: Acelerando o Desenvolvimento</strong></h2>
<ul>
  <li><strong>Contexto</strong>: Surgiu para simplificar o desenvolvimento Java EE, que era lento e burocrático.</li>
  <li><strong>Spring Boot (2014)</strong>: Revolucionou com:
    <ul>
      <li>Executáveis independentes (sem servidor de aplicação).</li>
      <li>Configuração simplificada (menos XML, mais anotações).</li>
    </ul>
  </li>
</ul>

<h3 id="comparação-com-jakarta-ee"><strong>Comparação com Jakarta EE</strong></h3>
<p>| <strong>Spring</strong>          | <strong>Jakarta EE</strong>       |
|———————-|———————-|
| <code class="language-plaintext highlighter-rouge">@GetMapping</code>       | <code class="language-plaintext highlighter-rouge">@Path</code> (JAX-RS)    |
| <code class="language-plaintext highlighter-rouge">@RestController</code>   | <code class="language-plaintext highlighter-rouge">@ApplicationScoped</code> (CDI) |
| Foco em produtividade | Foco em padrões empresariais |</p>

<hr />

<h2 id="4-quarkus-java-para-a-era-kubernetes"><strong>4. Quarkus: Java para a Era Kubernetes</strong></h2>
<ul>
  <li><strong>Origem</strong>: Evolução do JBoss/WildFly, focada em:
    <ul>
      <li><strong>Tempo de inicialização rápido</strong> (crucial para microsserviços).</li>
      <li><strong>Experiência do desenvolvedor</strong> (live coding, integração com Kubernetes).</li>
    </ul>
  </li>
  <li><strong>Relacionamento com Jakarta EE</strong>: Implementa specs como JAX-RS e CDI, mas com abordagem moderna.</li>
</ul>

<hr />

<h2 id="conclusão-qual-escolher"><strong>Conclusão: Qual Escolher?</strong></h2>
<ul>
  <li><strong>Jakarta EE</strong>: Ideal para aplicações empresariais robustas e de longa vida.</li>
  <li><strong>Spring</strong>: Melhor para produtividade e adoção rápida.</li>
  <li><strong>Quarkus</strong>: Focado em microsserviços e cloud-native.</li>
</ul>

<h3 id="dicas-para-aprofundar"><strong>Dicas para Aprofundar</strong></h3>
<ol>
  <li>Explore specs como <strong>JAX-RS</strong> e <strong>Bean Validation</strong>.</li>
  <li>Experimente starters em <a href="https://start.jakarta.ee">start.jakarta.ee</a> e <a href="https://code.quarkus.io">code.quarkus.io</a>.</li>
  <li>Para Spring, use <a href="https://start.spring.io">start.spring.io</a>.</li>
</ol>

<p>O Java no backend continua evoluindo, e entender essas tecnologias é essencial para escolher a melhor ferramenta para seu projeto.</p>

<p><strong>#Java #JakartaEE #Spring #Quarkus #Backend</strong></p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Backend" /><category term="Quarkus" /><category term="Spring" /><category term="Jakarta EE" /><summary type="html"><![CDATA[O ecossistema Java para desenvolvimento backend passou por diversas transformações ao longo dos anos, desde os primórdios da orientação a objetos até as modernas soluções como microsserviços e contêineres. Neste post, exploramos essa jornada, destacando as tecnologias que moldaram o Java no backend e como elas se relacionam hoje.]]></summary></entry><entry><title type="html">Testes de Kafka Stream e Schema Registry</title><link href="https://blog.vepo.dev/posts/mock-schema-registry" rel="alternate" type="text/html" title="Testes de Kafka Stream e Schema Registry" /><published>2023-01-27T00:00:00+00:00</published><updated>2023-01-27T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/10-18-00-mock-schema-registry</id><content type="html" xml:base="https://blog.vepo.dev/posts/mock-schema-registry"><![CDATA[<p>Testes unitários são algo bem complexos usando Kafka Stream. É muito difícil separar o que é middleware do que é seu código próprio porque todo código vai depender de alguma dependência do Kafka que será muito difícil de criar mocks. Aqui vou mostrar de forma superficial como é possível criar testes unitários para Kafka Streams.</p>

<p>Antes de continuar precisamos trazer um pequeno esclarecimento sobre testes. Quando falamos de Unit Testing estamos separando uma parte de código para testar isoladamente. Já os testes de integração serão feitos usando os componentes externos. Essa é uma explicação superficial, seja benevolente pois minha intenção aqui não é falar sobre testes em geral.</p>

<h1 id="1-como-testar-um-kafka-stream">1. Como testar um Kafka Stream</h1>

<p>Antes de testar um Kafka Stream você precisa diferenciar dois conceitos do Stream. Todo Stream é um fluxo de dados e esse fluxo é representado pela classe <a href="https://kafka.apache.org/34/javadoc/org/apache/kafka/streams/Topology.html"><code class="language-plaintext highlighter-rouge">Topology</code></a>. A topologia é a implementação da sua lógica de negócios e com ela dá para criar um Stream. Vamos ver isso no código abaixo?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CountDownLatch</span> <span class="n">latch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CountDownLatch</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>    <span class="o">(</span><span class="mi">1</span><span class="o">)</span>

<span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">StreamsConfig</span><span class="o">.</span><span class="na">APPLICATION_ID_CONFIG</span><span class="o">,</span> <span class="n">applicationId</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">StreamsConfig</span><span class="o">.</span><span class="na">BOOTSTRAP_SERVERS_CONFIG</span><span class="o">,</span> <span class="n">bootstrapServers</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">StreamsConfig</span><span class="o">.</span><span class="na">DEFAULT_KEY_SERDE_CLASS_CONFIG</span><span class="o">,</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">String</span><span class="o">().</span><span class="na">getClass</span><span class="o">());</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">StreamsConfig</span><span class="o">.</span><span class="na">DEFAULT_VALUE_SERDE_CLASS_CONFIG</span><span class="o">,</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">String</span><span class="o">().</span><span class="na">getClass</span><span class="o">());</span>

<span class="nc">StreamsBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamsBuilder</span><span class="o">();</span>    <span class="o">(</span><span class="mi">2</span><span class="o">)</span>

<span class="nc">KStream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">textLines</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">inputTopic</span><span class="o">);</span>    <span class="o">(</span><span class="mi">3</span><span class="o">)</span>
<span class="nc">KTable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="n">wordCounts</span> <span class="o">=</span> <span class="n">textLines</span><span class="o">.</span><span class="na">flatMapValues</span><span class="o">(</span><span class="n">textLine</span> <span class="o">-&gt;</span> <span class="o">{</span>
                                                            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Flat Map: "</span> <span class="o">+</span> <span class="n">textLine</span><span class="o">);</span>
                                                            <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">textLine</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">"\\W+"</span><span class="o">));</span>
                                                          <span class="o">}).</span><span class="na">groupBy</span><span class="o">((</span><span class="n">key</span><span class="o">,</span> <span class="n">word</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                                                                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Grouping: key="</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">" work="</span> <span class="o">+</span> <span class="n">word</span><span class="o">);</span>
                                                                        <span class="k">return</span> <span class="n">word</span><span class="o">;</span>
                                                          <span class="o">}).</span><span class="na">count</span><span class="o">(</span><span class="nc">Materialized</span><span class="o">.&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Long</span><span class="o">,</span> <span class="nc">KeyValueStore</span><span class="o">&lt;</span><span class="nc">Bytes</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]&gt;&gt;</span><span class="n">as</span><span class="o">(</span><span class="s">"counts-store"</span><span class="o">));</span>
<span class="n">wordCounts</span><span class="o">.</span><span class="na">toStream</span><span class="o">().</span><span class="na">to</span><span class="o">(</span><span class="n">outputTopic</span><span class="o">,</span> <span class="nc">Produced</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="nc">Serdes</span><span class="o">.</span><span class="na">String</span><span class="o">(),</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">Long</span><span class="o">()));</span>
<span class="nc">Topology</span> <span class="n">topology</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>    <span class="o">(</span><span class="mi">4</span><span class="o">)</span>
<span class="nc">KafkaStreams</span> <span class="n">streams</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">KafkaStreams</span><span class="o">(</span><span class="n">topology</span><span class="o">,</span> <span class="n">props</span><span class="o">);</span>   <span class="o">(</span><span class="mi">5</span><span class="o">)</span>

<span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">addShutdownHook</span><span class="o">(</span><span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="s">"streams-shutdown-hook"</span><span class="o">)</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">streams</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">latch</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="n">streams</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="n">latch</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</code></pre></div></div>

<p>Para explicar esse código vou levantar 5 pontos sobre ele. O primeiro <strong>(1)</strong> é que como o Stream funciona assincronamente quando usamos ele sem o auxilio de um framework precisamos garantir que o thread principal não seja finalizada, por isso eu uso o <code class="language-plaintext highlighter-rouge">CountDownLatch</code>. Depois <strong>(2)</strong> temos a classe <code class="language-plaintext highlighter-rouge">StreamsBuilder</code> que deve ser usada para se construir o Stream, como podemos ver no trecho iniciado em <strong>(3)</strong> deve existir um inicio e um fim do fluxo de dados, isso é feito usando uma DSL, mas depois o builder é usado para se gerar a topologia <strong>(4)</strong>. E por fim usamos a topologia gerada e as propriedades para criar o <code class="language-plaintext highlighter-rouge">KafkaStreams</code>.</p>

<p>A classe gerada pelo <code class="language-plaintext highlighter-rouge">KafkaStreams</code> vai se conectar diretamente com o Kafka, qualquer teste usando ela será um teste de integração, caso você queira fazer um teste de integração, recomendo o uso do <a href="https://www.testcontainers.org/modules/kafka/">TestContainers</a> eu fiz um exemplo uma vez, mas <a href="https://github.com/vepo/kafka-stream-with-testcontainers/blob/main/src/test/java/io/vepo/kafka/stream/delay/KafkaStreamTest.java">o teste</a> fica um pouco lento e limitado.</p>

<p>Mas o Kafka provê uma forma de testarmos a nossa topologia sem criar um Stream, para isso devemos usar a classe <a href="https://kafka.apache.org/34/javadoc/org/apache/kafka/streams/TopologyTestDriver.html"><code class="language-plaintext highlighter-rouge">TopologyTestDriver</code></a>. Ela é instanciada da mesma forma do <code class="language-plaintext highlighter-rouge">KafkaStream</code>. Logo o código acima poderia ser refatorada para que a criação da topologia e o controle do stream fossem feito por trechos de código diferentes (<em>não vou propor nada</em>).</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">StreamsConfig</span><span class="o">.</span><span class="na">APPLICATION_ID_CONFIG</span><span class="o">,</span> <span class="n">applicationId</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">StreamsConfig</span><span class="o">.</span><span class="na">BOOTSTRAP_SERVERS_CONFIG</span><span class="o">,</span> <span class="s">"dummy:1234"</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">StreamsConfig</span><span class="o">.</span><span class="na">DEFAULT_KEY_SERDE_CLASS_CONFIG</span><span class="o">,</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">String</span><span class="o">().</span><span class="na">getClass</span><span class="o">());</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">StreamsConfig</span><span class="o">.</span><span class="na">DEFAULT_VALUE_SERDE_CLASS_CONFIG</span><span class="o">,</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">String</span><span class="o">().</span><span class="na">getClass</span><span class="o">());</span>

<span class="nc">StreamsBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamsBuilder</span><span class="o">();</span>

<span class="nc">KStream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">textLines</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">inputTopic</span><span class="o">);</span>
<span class="nc">KTable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="n">wordCounts</span> <span class="o">=</span> <span class="n">textLines</span><span class="o">.</span><span class="na">flatMapValues</span><span class="o">(</span><span class="n">textLine</span> <span class="o">-&gt;</span> <span class="o">{</span>
                                                            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Flat Map: "</span> <span class="o">+</span> <span class="n">textLine</span><span class="o">);</span>
                                                            <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">textLine</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">"\\W+"</span><span class="o">));</span>
                                                          <span class="o">}).</span><span class="na">groupBy</span><span class="o">((</span><span class="n">key</span><span class="o">,</span> <span class="n">word</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                                                                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Grouping: key="</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">" work="</span> <span class="o">+</span> <span class="n">word</span><span class="o">);</span>
                                                                        <span class="k">return</span> <span class="n">word</span><span class="o">;</span>
                                                          <span class="o">}).</span><span class="na">count</span><span class="o">(</span><span class="nc">Materialized</span><span class="o">.&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Long</span><span class="o">,</span> <span class="nc">KeyValueStore</span><span class="o">&lt;</span><span class="nc">Bytes</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]&gt;&gt;</span><span class="n">as</span><span class="o">(</span><span class="s">"counts-store"</span><span class="o">));</span>
<span class="n">wordCounts</span><span class="o">.</span><span class="na">toStream</span><span class="o">().</span><span class="na">to</span><span class="o">(</span><span class="n">outputTopic</span><span class="o">,</span> <span class="nc">Produced</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="nc">Serdes</span><span class="o">.</span><span class="na">String</span><span class="o">(),</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">Long</span><span class="o">()));</span>
<span class="nc">Topology</span> <span class="n">topology</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="k">try</span> <span class="o">(</span><span class="nc">TopologyTestDriver</span> <span class="n">testDriver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TopologyTestDriver</span><span class="o">(</span><span class="n">topology</span><span class="o">,</span> <span class="n">topologyProps</span><span class="o">))</span> <span class="o">{</span>    <span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="nc">TestInputTopic</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">input</span> <span class="o">=</span> <span class="n">testDriver</span><span class="o">.</span><span class="na">createInputTopic</span><span class="o">(</span><span class="n">inputTopic</span><span class="o">,</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">String</span><span class="o">().</span><span class="na">serializer</span><span class="o">(),</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">String</span><span class="o">().</span><span class="na">serializer</span><span class="o">());</span>    <span class="o">(</span><span class="mi">2</span><span class="o">)</span>
    <span class="nc">TestOutputTopic</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="n">output</span> <span class="o">=</span> <span class="n">testDriver</span><span class="o">.</span><span class="na">createOutputTopic</span><span class="o">(</span><span class="n">outputTopic</span><span class="o">,</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">String</span><span class="o">().</span><span class="na">deserializer</span><span class="o">(),</span> <span class="nc">Serdes</span><span class="o">.</span><span class="na">Long</span><span class="o">().</span><span class="na">deserializer</span><span class="o">());</span>
    <span class="n">input</span><span class="o">.</span><span class="na">pipeInput</span><span class="o">(</span><span class="s">"record-001"</span><span class="o">,</span> <span class="s">"word-1"</span><span class="o">);</span>    <span class="o">(</span><span class="mi">3</span><span class="o">)</span>
    <span class="n">input</span><span class="o">.</span><span class="na">pipeInput</span><span class="o">(</span><span class="s">"record-002"</span><span class="o">,</span> <span class="s">"word-2"</span><span class="o">);</span>
    <span class="n">input</span><span class="o">.</span><span class="na">pipeInput</span><span class="o">(</span><span class="s">"record-003"</span><span class="o">,</span> <span class="s">"word-1"</span><span class="o">);</span>
    <span class="nc">TestRecord</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="n">outputRecord</span> <span class="o">=</span> <span class="n">output</span><span class="o">.</span><span class="na">readRecord</span><span class="o">();</span>    <span class="o">(</span><span class="mi">4</span><span class="o">)</span>
    <span class="o">[...]</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Como podemos ver o mock do Stream é criado em <strong>(1)</strong>, depois devemos definir quais tópicos estão envolvidos no Stream <strong>(2)</strong>, enviamos os dados <strong>(3)</strong> e por fim consumimos as saídas do stream <strong>(4)</strong>. Existe uma série de vantagens ao se usar o <code class="language-plaintext highlighter-rouge">TopologyTestDriver</code> e a principal delas é que podemos controlar o avanço do tempo usando <a href="https://kafka.apache.org/34/javadoc/org/apache/kafka/streams/TopologyTestDriver.html#advanceWallClockTime(java.time.Duration)">testDriver.advanceWallClockTime(Duration.ofMinutes(60))</a>. Sem essa funcionalidade se torna impossível fazermos testes de streams que efetuam agregação no tempo.</p>

<p>Usando esse trecho de código é possível injetar e consultar dados no stream e através da biblioteca de assertions do <a href="https://junit.org/junit5/docs/5.8.2/api/org.junit.jupiter.api/org/junit/jupiter/api/Assertions.html">JUnit 5</a> ou do <a href="https://www.javadoc.io/doc/org.assertj/assertj-core/latest/org/assertj/core/api/Assertions.html">AssertJ</a> podemos criar testes unitários consistentes.</p>

<h1 id="2-como-testar-um-kafka-stream-usando-schema-registry">2. Como testar um Kafka Stream usando Schema Registry</h1>

<p>Quando temos um ambiente de microsserviços um pouco mais complexos, precisamos garantir a evolução dos Schemas das mensagens no Kafka. Existe <a href="https://www.sciencedirect.com/science/article/pii/S0164121221000674#b26">alguma literatura</a> sobre o assunto mas temos apenas alguns produtos no mercado. Os mais comuns são o <a href="https://docs.confluent.io/platform/current/schema-registry/index.html">Schema Registry da Confluent</a> e o <a href="https://www.apicur.io/registry/">Apicurio registry</a>, que segundo a documentação é compatível com o produto da Confluent.</p>

<p>Um Schema Registry vai funcionar como registro de todos os schemas que são usados tanto para se produzir quanto consumir mensagens. Quando um producer vai enviar uma mensagem, ele irá gerá um Schema, que pode ser JSON, AVRO ou Protobuf, depois irá enviar para o registry afim de se garantir que ele já está registrado. Na mensagem enviada os primeiros bytes são reservados ao armazenamento do identificado do Schema. Sendo bem simplista, o schema registry é um CRUD de schema que associa cada tópico a um schema e suas versões. Se eu enviar uma mensagem com um schema diferente, ela será adicionada ao tópico como uma nova versão e eu posso consultar todas as versões existente, assim como alterar a validação de compatibilidade dos schemas.</p>

<p>A grande dificuldade de se testar o Schema Registry é que o cliente é implementado dentro do Serializar/Deserializer do Apache Kafka. Como vimos na primeira parte, os serializers podem ser alterados pois as propriedades usadas para criar o <code class="language-plaintext highlighter-rouge">TopologyTestDriver</code> são diferentes das usadas no <code class="language-plaintext highlighter-rouge">KafkaStreams</code>. Mas algumas vezes não é possível fazer essa diferenciação, pois aquele é o serializer padrão e em alguns casos o serializer é definido pela topologia.</p>

<p>A documentação da Confluent não ajuda muito quando falamos de testes, essa é a maior insatisfação ao se usar qualquer produtos deles, mas descobrimos olhando o <a href="https://github.com/confluentinc/schema-registry/blob/master/avro-serializer/src/main/java/io/confluent/kafka/serializers/AbstractKafkaAvroSerDeConfig.java#L41">código fonte</a> que existe uma maneira de se fazer o teste. Depois quem encontramos isso foi possível ver que essa solução é bem conhecida, mas não há menções dela na documentação.</p>

<p>No trecho de código abaixo conseguimos criar um mock do cliente do Schema Registry, mesmo usando o <a href="https://kafka.apache.org/34/javadoc/org/apache/kafka/common/serialization/Serde.html"><code class="language-plaintext highlighter-rouge">Serde</code></a> padrão para AVRO e foi possível registrar os schemas desejados. Repare que os nomes do tópicos são <code class="language-plaintext highlighter-rouge">input</code>, <code class="language-plaintext highlighter-rouge">join</code> e <code class="language-plaintext highlighter-rouge">output</code>, mas internamente o Schema Registry adiciona os sufixos <code class="language-plaintext highlighter-rouge">-value</code> para o schema da mensagem e <code class="language-plaintext highlighter-rouge">-key</code> para a chave (<em>nós usamos String da massa</em>). Cada schema desejado deve ser configurado se usando a classe <code class="language-plaintext highlighter-rouge">MockSchemaRegistry</code> que criará um cliente local sem usar nenhum servidor web.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[...]</span>

<span class="n">topologyProps</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="nc">StreamsConfig</span><span class="o">.</span><span class="na">DEFAULT_VALUE_SERDE_CLASS_CONFIG</span><span class="o">,</span> <span class="nc">GenericAvroSerde</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
<span class="n">topologyProps</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="nc">AbstractKafkaSchemaSerDeConfig</span><span class="o">.</span><span class="na">SCHEMA_REGISTRY_URL_CONFIG</span><span class="o">,</span> <span class="s">"mock://dummy1"</span><span class="o">);</span>

<span class="o">[...]</span>

<span class="nc">SchemaRegistryClient</span> <span class="n">srClient</span> <span class="o">=</span> <span class="nc">MockSchemaRegistry</span><span class="o">.</span><span class="na">getClientForScope</span><span class="o">(</span><span class="s">"dummy1"</span><span class="o">);</span>
<span class="n">srClient</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"input-value"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AvroSchema</span><span class="o">(</span><span class="n">inputSchema</span><span class="o">));</span>
<span class="n">srClient</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"join-value"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AvroSchema</span><span class="o">(</span><span class="n">inputSchema</span><span class="o">));</span>
<span class="n">srClient</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"output-value"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AvroSchema</span><span class="o">(</span><span class="n">joinedSchema</span><span class="o">));</span>

<span class="o">[...]</span>

<span class="nc">MockSchemaRegistry</span><span class="o">.</span><span class="na">dropScope</span><span class="o">(</span><span class="s">"dummy1"</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="conclusão">Conclusão</h2>

<p>Apesar do Stream do Apache Kafka parecer muito limitado para testes, é possível construir boas suites se separarmos a Topologia. Todo código deve ser testado de forma rápida e eficiente, por isso eu sempre recomendo a criação de testes unitários para que tenhamos uma resposta rápida.</p>

<p>O Schema Registry também permite o mock apesar de não ter uma documentação de fácil acesso sobre o assunto.</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Apache Kafka" /><category term="Unit Test" /><category term="Java" /><summary type="html"><![CDATA[Qual é a maneira mais fácil de se testar um consumer/producer/stream Kafka usando Schema Registry?]]></summary></entry><entry><title type="html">Memória</title><link href="https://blog.vepo.dev/posts/java-101-memoria" rel="alternate" type="text/html" title="Memória" /><published>2022-11-11T00:00:00+00:00</published><updated>2022-11-11T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/15-55-00-java-101-memoria</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-memoria"><![CDATA[<div class="paragraph">
<p>Esse post faz parte de uma série introdutória sobre Java, se você não conhece a linguagem e não leu os posts anteriores, recomendo os ler para ter uma visão melhor da plataforma. Nessa série, já falamos sobre o que é o ecossistema Java, o que é a biblioteca Collections, como Java faz Orientação a Objetos, o que é a biblioteca I/O e como Java implementa paralelismo e concorrência, esses tópicos são necessários para o que vamos falar agora: <strong>Gerenciamento de Memória</strong></p>
</div>
<div class="sect1">
<h2 id="cap-07-o-que-e-memoria">O que é Memória</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Antes de falar de Memória em programas Java, precisamos definir o que é Memória. Memória é o principal recurso de um computador junto com a CPU. A função da CPU é executar operações que alteram a memória e a memória é responsável por quase todas as operações de um computador. Tudo se comunica através da memória. Mas como Java é uma linguagem de alto nível, não temos acesso a memória completa, ela é gerenciada pelo Sistema Operacional e pela JVM.</p>
</div>
<div class="paragraph">
<p>Programas Java rodam dentro de uma Máquina Virtual, logo não precisamos nos preocupar com a alocação de memória. Toda vez que nosso programa precisar de mais memória ela será fornecida automaticamente. Esse tópico é muito importante quando formos falar sobre o <em>tuning</em> de aplicações Java, uma forma de garantir a performance. Precisamos entender que cada objeto e cada linha de comando ocupa um posição da memória. A memória é como um caderno de papel que pegamos pra fazer conta, cada operação realizada ocupa um espaço e quando não há mais espaço na folha temos a opção de pegar uma nova folha ou apagar uma conta já finalizada.</p>
</div>
<div id="cap-07-folha-de-caderno" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-07/pexels-david-bares-204511.jpg" alt="pexels david bares 204511">
</div>
<div class="title">Figura 1. Memória é como uma folha de caderno que usamos como rascunho.</div>
</div>
<div class="paragraph">
<p>A memória é volátil. Isso significa que toda vez que precisamos salvar uma informação que é relevante ou escrevemos ela em um banco de dados ou escrevemos em um arquivo. O "caderno" é apagado toda vez que o computador reinicia.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-07-topologia-da-memoria">Topologia da Memória</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Talvez você já tenha ouvido falar de <em>heap</em> ou <em>stack</em>, essa são dois tidos de memória distintas que existem em todos os programas. Vamos tentar entender elas sem falar de Java?</p>
</div>
<div class="paragraph">
<p><em>Stack</em> significa pilha que é um conceito fundamental em computação. Toda pilha é uma estrutura que você pode apenas remover o elemento superior e quando você adiciona elementos você adiciona em cima do último elemento. Você não pode pegar o terceiro item de uma pilha, você tem que remover os 3 itens superiores. Essa é a memória responsável pela execução do seu programa, cada vez que você entra em um bloco de execução, você adiciona elementos a pilha, quando você sai de um bloco de execução você remove. Para cada execução existe uma <em>stack</em> especifica, isso significa que um programa single thread vai existir apenas uma <em>stack</em>, já um multi-thread terá várias <em>stacks</em>.</p>
</div>
<div class="paragraph">
<p>Já <em>heap</em> significa amontoado, ou seja, é uma memória sem organização, sem hierarquia. A memória <em>heap</em> é usada conforme a necessidade do programa e pode ser compartilhada entre as várias pilhas de execução. Cada programa deve alocar e desalocar espaços na memória <em>heap</em>, a alocação é feita por uma chamada de sistema (<em>system call</em>) <a href="https://man7.org/linux/man-pages/man3/free.3.html"><em>malloc</em></a> (ou <em>calloc</em>) e deve ser liberada pelo programa usando <em>free</em>.</p>
</div>
<div id="cap-05-c-close" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://man7.org/linux/man-pages/man3/free.3.html"><img src="/assets/images/java-101/cap-07/malloc.png" alt="malloc"></a>
</div>
<div class="title">Figura 2. Documentação das funções de gerenciamento de memória oferecidas pelo Sistema Operacional.</div>
</div>
<div class="paragraph">
<p>Quando uma porção da memória é alocada, tudo que o sistema operacional precisa saber é o tamanho da memória que o programa necessita, assim o sistema operacional retorna o endereço de memória onde essa porção de memória foi alocada. Quando o programa não precisa mais dessa posição de memória ela deve ser liberada, para liberar o sistema operacional precisa do endereço de memória que deve ser desalocada. Quando falamos "endereço de memória" estamos falando de um endereço físico mesmo, é a posição da memória que o sistema operacional achou conveniente oferecer ao programa. Com a posse desse endereço o programa pode manipular a memória, por exemplo se estamos falando de um array, o programa pode fazer operações matemática para acessar as posições. Esse é o conceito de ponteiro, ele aponta para uma posição de memória, mas é apenas um número que representa um endereço físico.</p>
</div>
<div class="paragraph">
<p><em>— E se eu não desalocar a posição de memória?</em></p>
</div>
<div class="paragraph">
<p>Todo programa tem que ter muito cuidado ao usar a memória por dois motivos. Primeiro memória é um recurso finito, compartilhado e escasso. Isso significa que se seu servidor tem 10GiB de memória RAM, todos os processos só podem usar 10GiB de memória RAM. Caso seja necessário mais memória, o sistema operacional vai criar um arquivo de paginação que podem degradar a eficiência dos programas em execução. Depois cada programa deve operar com o mínimo de memória possível, logo a alocação e liberação de memória deve ser feita de maneira consciente, se seu programa começa a alocar memória a eficiência dele vai degradar até que o sistema operacional simplesmente, e sem cerimônia, vai finalizar a execução. Então quando um programa simplesmente para de funcionar sem nenhum motivo aparente, a primeira coisa que um desenvolvedor observar é o consumo de memória, se ele está crescendo até o programa ser finalizado isso pode ser um sintoma de um problema chamado <em>Memory Leak</em> (vazamento de memória em tradução livre).</p>
</div>
<div class="paragraph">
<p><em>Memory Leak</em> acontece quando porções de memória são alocados mas não são desalocados criando porções da memória não utilizadas até não haver mais memória disponível. Um programa com <em>memory leak</em> pode comprometer a eficiente de um servidor ou até de um cluster.</p>
</div>
<div id="cap-07-memoria-c" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-07/memoria-c.png" alt="memoria c">
</div>
<div class="title">Figura 3. Topologia de uma memória de um programa C. Todo gerenciamento das alocações é feita manualmente.</div>
</div>
<div class="paragraph">
<p><em>— E porque eu preciso saber disso se vou programar em Java?</em></p>
</div>
<div class="paragraph">
<p>Porque esses conceitos são importantes para você fazer um uso consciente da memória. Você já parou para pensar que ao declara um objeto você ocupa um espaço físico? Mas agora vamos rever todos esses conceitos em Java.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-07-topologia-da-memoria-na-jvm">Topologia da Memória na JVM</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Na JVM também existe a memória <em>heap</em> e a <em>stack</em>. A <em>stack</em> irá conter todas as informações de execução e os valores das variáveis primitivas, quando uma variável é um objeto a <em>stack</em> contém uma <a href="https://docs.oracle.com/javase/specs/jvms/se19/html/jvms-2.html#jvms-2.4"><strong>referência</strong></a> para a <em>heap</em>. Todo objeto é alocado na <em>heap</em>, mas ele não ocupa uma posição fixa pois a <em>heap</em> é gerenciada pela JVM. Diferentemente das linguagens de baixo nível, em Java um novo objeto já cria uma nova alocação de memória sem precisar interagir diretamente com o sistema operacional, mas quando o objeto não é mais necessário ele não precisa ser liberado, pois a JVM tem um processo chamado Garbage Collector que remove da <em>heap</em> todo objeto que não é mais referenciado.</p>
</div>
<div class="paragraph">
<p>Já a <em>heap</em> será dividida entre várias regiões. As primeiras regiões são a <em>Young Generation</em> e a <em>Old Generation</em>, como o nome já demonstra na <em>Young Generation</em> estão localizados os objetos gerados recentemente e na <em>Old Generation</em> estão os objetos mais antigos. Da mesma forma a <em>Young Generation</em> é dividida entre <em>Eden</em>, <em>S1</em> e <em>S2</em> (S de <em>Suvivor</em> 1 e 2, que significa sobrevivente) onde <em>Eden</em> é a região onde os objetos nascem e depois migram pra <em>S1</em> e depois pra <em>S2</em>.</p>
</div>
<div id="cap-07-memoria-java" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-07/memoria-java.png" alt="memoria java">
</div>
<div class="title">Figura 4. Topologia de uma memória de um processo Java. Todo gerenciamento das alocações é automaticamente pela JVM.</div>
</div>
<div class="paragraph">
<p><em>— Mas como acontecem essas migrações? Porque eu preciso saber disso?!?</em></p>
</div>
<div class="paragraph">
<p>Essa informação é importante por dois motivos. O primeiro deles é que o ciclo de vida de um objeto impacta na performance pois a operação feita pelo <em>Garbage Collector</em> é uma operação custosa, já vi processos que 30% do tempo de execução era gasto para liberar memória. O segundo motivo é que, conhecendo o ciclo de vida de um objeto, podemos ajudar o Garbage Collector a eliminar objetos descartáveis.</p>
</div>
<div class="paragraph">
<p><em>— Mas qual é o ciclo de vida de um objeto?</em></p>
</div>
<div class="paragraph">
<p>Quando a JVM encontra um <code>new ObjetoX()</code>, ela vai alocar o espaço necessário na <em>Eden</em>. Se há espaço suficiente, tudo bem. Se não há espaço suficiente o <em>Garbage Collector</em> vai fazer uma limpeza na <em>Eden</em> descartando todos objetos que não são referenciados na <em>stack</em> e movendo todos os objetos restante para a <em>S1</em>. Se há espaço suficiente na <em>S1</em>, tudo bem. Se não há espaço suficiente o <em>Garbage Collector</em> vai fazer uma limpeza na <em>S1</em> descartando todos objetos que não são referenciados na <em>stack</em> e movendo todos os objetos restante para a <em>S2</em>. Se há espaço suficiente na <em>S2</em>, tudo bem. Se não há espaço suficiente o <em>Garbage Collector</em> vai fazer uma limpeza na <em>S2</em> descartando todos objetos que não são referenciados na <em>stack</em> e movendo todos os objetos restante para a <em>Old Generation</em>. Se há espaço suficiente na <em>Old Generation</em>, tudo bem. Se não há espaço suficiente o <em>Garbage Collector</em> vai fazer uma limpeza na <em>Old Generation</em> descartando todos objetos que não são referenciados na <em>stack</em>. Quando essa operação for executada e a JVM não conseguir alocar espaço, a JVM vai lançar uma exceção: <strong>Exception in thread thread_name: java.lang.OutOfMemoryError: Java heap space</strong>.</p>
</div>
<div class="paragraph">
<p>As informações sobre a classe <code>ObjetoX</code> ficam armazenadas no <em>Metaspace</em> que fica responsável por armazenar as informações de classes e <em>ClassLoaders</em>. O <em>Metaspace</em> pode também ser alvo de uma limpeza do <em>Garbage Collector</em>, mas ele só irá atuar se não houver mais espaço no <em>Metaspace</em>. O <em>Metaspace</em> pode, também, conter referências a objetos que estão na <em>heap</em>, qualquer campo <em>estático</em> (que usa <em>static</em>) faz parte da classe e não do objeto e criará uma referência do <em>Metaspace</em> para a <em>heap</em>.</p>
</div>
<div class="paragraph">
<p><em>— Mas na descrição do Garbage Collector só se falou de referência da heap?</em></p>
</div>
<div class="paragraph">
<p>SIM! Por precisamos entender que uma classe pertence a um <em>ClassLoader</em> e se o <em>ClassLoader</em> não for mais usado na heap, ele pode ser eliminado. Um campo estático só será liberado se o <em>ClassLoader</em> for descartado pelo <em>Garbage Collector</em> ou se o valor dele for alterado para <em>null</em>. O <em>ClassLoader</em> é um objeto que tem como responsabilidade ler as informações da classe, ele pode ser definido dinamicamente e sempre tem uma estrutura em árvore, ou seja, se a classe não for encontrada nele será procurada no <em>ClassLoader</em> pai, se não houver <em>ClassLoader</em> pai a JVM lança uma <code>ClassNotFoundException</code>.</p>
</div>
<div class="sect2">
<h3 id="cap-referencias-e-ponteiros">Referências e Ponteiros</h3>
<div class="paragraph">
<p>Agora quero levantar uma provocação:</p>
</div>
<div class="paragraph">
<p><strong>Seriam as referências a objetos estruturas similares aos ponteiros?</strong></p>
</div>
<div class="paragraph">
<p>A primeira resposta pode parecer sim, mas é não. Primeiro porque ponteiros apontam diretamente para posições de memória, já nossas referências apontam para um objeto que pode ser realocado fisicamente na memória. Depois o gerenciamento dos ponteiros é de total responsabilidade do desenvolvedor, já as referências são parte do design do código, uma vez que a referência não existe na <em>stack</em> a JVM está ciente e pode remover a posição porque ela é gerenciada pela JVM.</p>
</div>
<div class="paragraph">
<p>Mas referências podem ser declaras em código também, por isso existe a interface <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/Reference.html">java.lang.ref.Reference</a> que é implementada por <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/PhantomReference.html">PhantomReference</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/SoftReference.html">SoftReference</a> e <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/WeakReference.html">WeakReference</a>. Essas classes recebem um tratamento especial do <em>Garbage Collector</em> e podem ser usadas para tornar mais eficiente o uso da memória. Elas devem ser usadas com muita parcimônia pois não são de fácil compreensão.</p>
</div>
<div class="paragraph">
<p>Uma <code>PhantomReference</code> é usada para verificar se um objeto é elegível para o <em>Garbage Collector</em>. Quando não há nenhuma referência ao objeto, ele é removido do PhantomReference e adicionado ao <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ref/ReferenceQueue.html">ReferenceQueue</a> que é uma pilha especial. Se o objeto está dentro da pilha ou o método <code>get</code> retorna <code>null</code>, significa que ele pode ser eliminado pela JVM. A <code>PhantomReference</code> pode ser usada para verificar se um objeto foi descartado ou não. Se o objeto não for removido da pilha, pode gerar uma <em>memory leak</em>.</p>
</div>
<div class="paragraph">
<p>A classe <code>SoftReference</code> tem um comportamento similar, mas apresenta a possibilidade de não se usar a pilha. Ela pode ser usada para construir cache sensível ao uso da memória. Se um objeto é apenas armazenado dentro de um <code>SoftReference</code> pode ser descartado pelo <code>Garbage Collector</code> quando não há espaço disponível na <em>heap</em> sendo necessário criar uma nova instância.</p>
</div>
<div class="paragraph">
<p>A classe <code>WeakReference</code> é muito similar a classe <code>SoftReference</code>, exceto que o <em>Garbage Collector</em> irá eliminar o objeto na primeira oportunidade ao invés de esperar a necessidade de alocação de espaço.</p>
</div>
<div class="paragraph">
<p>Essas classes podem ser usadas para construção de Caches inteligentes que otimizam o uso da memória. Imagina se você tem um requisito que é manter um valor até que ele não seja mais necessário, basta criar uma <code>HashMap</code> que armazena <code>PhantomReference</code>. Existe também uma mapa chamado <a href="https://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html">WeakHashMap</a> que traz um comportamento semelhante, mas a referência fraca é a chave e não o valor.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-07-ferramentas-de-diagnostico">Ferramentas de Diagnóstico</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Como falamos, o principal problema que o mau uso da memória pode nos trazer é lentidão ou vazamento de memória, mas como podemos analisar se nosso programa tem esses problemas?</p>
</div>
<div class="paragraph">
<p>Podemos usar ferramentas que a própria JVM nos dá para ver o que está acontecendo na memória.</p>
</div>
<div class="sect2">
<h3 id="_visualvm">VisualVM</h3>
<div class="paragraph">
<p>Uma das mais importantes ferramentas é a <a href="https://visualvm.github.io/">VisualVM</a>. Com ela é possível monitorar a memória para ver como a alocação da memória está evoluindo. Para os testes usei um código simples que consumia uma API e envia para um Apache Kafka, e podemos ver abaixo que o uso da memória é bem estável. Um programa em uso estável de memória vai sempre apresentar um uso de memória serrilhado, esse padrão acontece porque objetos são criados até que sejam finalizados pelo <em>Garbage Collector</em>, então podemos afirmar que cada vez que o uso de memória cai houve uma execução do <em>Garbage Collector</em>.</p>
</div>
<div id="cap-07-visualvm" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-07/visualvm.png" alt="visualvm">
</div>
<div class="title">Figura 5. Interface do VisualVM mostrando o uso de memória de um programa simples.</div>
</div>
<div class="paragraph">
<p>Ao executar o VisualVM você consegue atrelar a qualquer JVM em execução na máquina local ou a uma JVM que exponha o gerenciamento através de uma porta JMX. A linha de comando abaixo mostra como executar um processo Java que seja acessível pela porta 8080 sem nenhuma segurança.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>$ java -Dcom.sun.management.jmxremote.port<span style="color: #666666">=8080</span> <span style="color: #BB6622; font-weight: bold">\</span>
       -Dcom.sun.management.jmxremote.ssl<span style="color: #666666">=</span><span style="color: #008000">false</span> <span style="color: #BB6622; font-weight: bold">\</span>
       -Dcom.sun.management.jmxremote.authenticate<span style="color: #666666">=</span><span style="color: #008000">false</span> <span style="color: #BB6622; font-weight: bold">\</span>
       -jar target/produtor.jar --appId <span style="color: #19177C">$APP_ID</span> --timeout <span style="color: #666666">1</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><em>— Será que eu consigo saber quando o Garbage Collector foi chamado? Ou chamar ele manualmente?</em></p>
</div>
<div class="paragraph">
<p>A resposta simples é não! De dentro do seu código Java não dá pra escutar o funcionamento do <em>Garbage Collector</em> e nem é recomendável chamar ele através da biblioteca. A VisualVM possibilita que ele seja chamada manualmente através da interface gráfica (e não da biblioteca padrão). Mas existe a possibilidade de que salvar o log do <em>Garbage Collector</em> para futura analise. Por exemplo, no comando bash abaixo estamos ordenando a JVM a salvar as informações no arquivo <code>gc.log</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>$ java -XX:+PrintGCDetails -Xloggc:gc.log -jar target/produtor.jar --appId <span style="color: #19177C">$APP_ID</span> --timeout <span style="color: #666666">1</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Vamos observar o que temos o cabeçalho desse arquivo de log?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>[0.009s][info][gc,init] CardTable entry size: 512
[0.009s][info][gc     ] Using G1
[0.011s][info][gc,init] Version: 18+36-2087 (release)
[0.011s][info][gc,init] CPUs: 8 total, 8 available
[0.011s][info][gc,init] Memory: 16099M
[0.011s][info][gc,init] Large Page Support: Disabled
[0.011s][info][gc,init] NUMA Support: Disabled
[0.011s][info][gc,init] Compressed Oops: Enabled (Zero based)
[0.011s][info][gc,init] Heap Region Size: 2M
[0.011s][info][gc,init] Heap Min Capacity: 8M
[0.011s][info][gc,init] Heap Initial Capacity: 252M
[0.011s][info][gc,init] Heap Max Capacity: 4026M
[0.012s][info][gc,init] Pre-touch: Disabled
[0.012s][info][gc,init] Parallel Workers: 8
[0.012s][info][gc,init] Concurrent Workers: 2
[0.012s][info][gc,init] Concurrent Refinement Workers: 8
[0.012s][info][gc,init] Periodic GC: Disabled
[0.012s][info][gc,metaspace] CDS archive(s) mapped at: [0x0000000800000000-0x0000000800b90000-0x0000000800b90000), size 12124160, SharedBaseAddress: 0x0000000800000000, ArchiveRelocationMode: 0.
[0.012s][info][gc,metaspace] Compressed class space mapped at: 0x0000000800c00000-0x0000000840c00000, reserved size: 1073741824
[0.012s][info][gc,metaspace] Narrow klass base: 0x0000000800000000, Narrow klass shift: 0, Narrow klass range: 0x100000000</code></pre>
</div>
</div>
<div class="paragraph">
<p>Observe que temos várias informações sobre a máquina e a configuração da JVM. Temos o total de CPU (<em>CPUs: 8 total, 8 available</em>), memória (<em>Memory: 16099M</em>), versão da JVM, <em>Garbage Collector</em> selecionado (<em>Using G1</em>) e configurações do <em>Garbage Collector (_Parallel Workers: 8</em>, <em>Concurrent Workers: 2</em>, <em>Concurrent Refinement Workers: 8</em> e <em>Periodic GC: Disabled</em>). Os valores específicos da JVM podem ser configurados através de parâmetros.</p>
</div>
<div class="paragraph">
<p>Com o log habilitado toda atividade do <em>Garbage Collector</em> estará registrada, vamos analisar uma delas?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>[48.661s][info][gc,start    ] GC(7) Pause Young (Normal) (G1 Evacuation Pause)
[48.662s][info][gc,task     ] GC(7) Using 2 workers of 8 for evacuation
[48.671s][info][gc,phases   ] GC(7)   Pre Evacuate Collection Set: 0.1ms
[48.671s][info][gc,phases   ] GC(7)   Merge Heap Roots: 0.1ms
[48.672s][info][gc,phases   ] GC(7)   Evacuate Collection Set: 8.8ms
[48.672s][info][gc,phases   ] GC(7)   Post Evacuate Collection Set: 0.7ms
[48.672s][info][gc,phases   ] GC(7)   Other: 0.2ms
[48.672s][info][gc,heap     ] GC(7) Eden regions: 6-&gt;0(6)
[48.672s][info][gc,heap     ] GC(7) Survivor regions: 1-&gt;1(1)
[48.672s][info][gc,heap     ] GC(7) Old regions: 5-&gt;5
[48.672s][info][gc,heap     ] GC(7) Archive regions: 0-&gt;0
[48.672s][info][gc,heap     ] GC(7) Humongous regions: 0-&gt;0
[48.672s][info][gc,metaspace] GC(7) Metaspace: 30289K(31040K)-&gt;30289K(31040K) NonClass: 27043K(27392K)-&gt;27043K(27392K) Class: 3245K(3648K)-&gt;3245K(3648K)
[48.672s][info][gc          ] GC(7) Pause Young (Normal) (G1 Evacuation Pause) 21M-&gt;10M(34M) 10.497ms
[48.672s][info][gc,cpu      ] GC(7) User=0.00s Sys=0.00s Real=0.01s</code></pre>
</div>
</div>
<div class="paragraph">
<p>Primeiro vamos observar a topologia dessa mensagem de log. O primeiro parâmetro é de suma importância, ele vai registrar o momento em que a mensagem foi gerada, podemos dizer por exemplo eu que essa execução começou exatamente em <code>48.661s</code> e terminou <code>48.672s</code>. Por fim temos a mensagem de log, e veja que na penúltima linha temos o tempo total da execução <code>10.497ms</code>. Temos os registros de como as regiões foram impactadas, no caso acima os 6 objetos residentes no Eden foram removidos deixando as outras regiões intactas.</p>
</div>
<div class="paragraph">
<p>Qual outra informação esse log trás? Talvez você não tenha percebido, mas se você somar todas as linhas que contém a string <code>[info][gc          ]</code> você tem o tempo total gasto em <em>Garbage Collector</em> que pode ser usado com o tempo de execução que está na primeira coluna e temos a porcentagem de tempo de execução que o <em>Garbage Collector</em> usa. Essa informação é importante porque a maioria das implementações de <em>Garbage Collector</em> para as threads para não criar inconsistências.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-07-solucoes-comuns">Soluções Comuns</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Se seu processo está gastando muito tempo com o <em>Garbage Collector</em> pode ser que algumas ações devam ser tomadas. Não existe uma regra padrão sobre como se otimiza a memória pois cada programa tem um comportamento diferente.</p>
</div>
<div class="paragraph">
<p>O ideal é construir um modelo de otimização, você precisa de dados para isso. Primeiro coloque seu programa em execução com determinada configuração, depois registre o número máximo de requisições por segundo, o tempo usado com <em>Garbage Collector</em> e a latência de resposta de uma requisição. Depois vá alterando as configurações e veja como esses valores se comportam.</p>
</div>
<div class="paragraph">
<p>Eu já trabalhei em um sistema que era possível configurar o número de threads de execução e a performance estava degradada porque a pessoa que dava suporte configurou um elevado número de threads. A solução nesse caso foi reduzir o número de threads e rodar outra instância em paralelo.</p>
</div>
<div class="paragraph">
<p>Com esse experimento, você será capaz de dizer o que acontece com o sistema se você reduzir o tamanho da <em>heap</em> ou se você aumentar o tamanho do <em>Eden</em>, etc.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Gerenciamento de Memória" /><category term="Tuning" /><summary type="html"><![CDATA[Como funciona o gerenciamento de memória com Java? Nesse post vou descrever como funciona a memória de um programa Java e comparar ele com de outros programas. Depois vou mostrar quais os principais desafios do gerenciamento de memória em programas Java. A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">Concorrência e Paralelismo</title><link href="https://blog.vepo.dev/posts/java-101-threads" rel="alternate" type="text/html" title="Concorrência e Paralelismo" /><published>2022-09-03T00:00:00+00:00</published><updated>2022-09-03T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/18-00-00-java-101-threads</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-threads"><![CDATA[<div class="paragraph">
<p>Esse post faz parte de uma série introdutória sobre Java, se você não conhece a linguagem e não leu os posts anteriores, recomendo os ler para ter uma visão melhor da plataforma. Nessa série, já falamos sobre o que é o ecossistema Java, o que é a biblioteca Collections, como Java faz Orientação a Objetos e o que é a biblioteca I/O, esses tópicos são necessários para o que vamos falar agora: <strong>Concorrência e Paralelismo</strong>.</p>
</div>
<div class="sect1">
<h2 id="cap-06-o-que-e-concorrencia-e-paralelismo">O que é Concorrência e Paralelismo?!?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nos frameworks modernos é muito raro lidarmos com paralelismo, apesar que podemos lidar com concorrência o tempo inteiro. Para entender isso precisamos primeiro compreender a diferença entre esses dois conceitos. Para isso vamos imaginar que estamos em uma biblioteca, nessa biblioteca tem dois tipos de livros: os comuns e os raros. Os livros comuns estão acessíveis na estantes para que todos possam ler e pegar emprestado, mas os livros raros estão disponíveis em uma sala especifica em que você precisa pedir para um bibliotecário pegar ele e deve ler somente na sala.</p>
</div>
<div class="paragraph">
<p>Vamos imaginar que surgiu um estranho interesse por se ler livros raros na cidade e isso gerou uma procura inesperada que surpreendeu até mesmo a direção da biblioteca.</p>
</div>
<div class="paragraph">
<p><em>— Todos estão disponíveis na internet! Só acessar o <a href="https://www.gutenberg.org/browse/languages/pt">Projeto Gutenberg</a>!!!</em></p>
</div>
<div class="paragraph">
<p>Isso gerou uma fila enorme na sessão de livros raros pois só tinha um bibliotecário para encontrar o livro, registrar a saída e ele ainda precisava observar se o livro estava sendo manipulado corretamente. Logo surgiram várias opções de como melhorar o atendimento da biblioteca, mas só poderiam ser consideradas as opções que mantivessem o cuidado para com as obras.</p>
</div>
<div id="cap-06-biblioteca-antiga" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-06/biblioteca-antiga.jpg" alt="biblioteca antiga">
</div>
<div class="title">Figura 1. Biblioteca da Escola Sá de Miranda</div>
</div>
<div class="paragraph">
<p>A primeira opção foi contratar mais um bibliotecário. Feita a contratação ele começou a dividir as tarefas com o mais antigo. Enquanto o primeiro cuidava de encontrar as obras e registrar as saídas, o segundo fiscalizava se todos os usuários da biblioteca estavam manuseando corretamente o livro.</p>
</div>
<div class="paragraph">
<p>A direção da biblioteca achou a opção boa, mas eles perceberam que o aumento da eficiência foi de apenas 30% enquanto se esperava 100% de eficiência com a contratação de um novo funcionário. Isso aconteceu porque as atividades foram distribuídas, mas nenhuma atividade era feita em paralelo. A atividade que mais demandava tempo era encontrar a obra e registrar a sua saída com cerca de 90% do tempo, logo essa atividade deveria ser feita em paralelo. <strong>Paralelismo</strong> acontece quando a mesma tarefa é realizada simultaneamente por mais de um bibliotecário. Assim os dois bibliotecários decidiram que iriam trabalhar em todo o conjunto de atividades aumentando a eficiência de 30% para 50%.</p>
</div>
<div class="paragraph">
<p>Mas eles encontraram um pequeno problema, só havia um computador na bancada e por isso eles precisavam se revesar para usar o computador. No começo eles replicavam a atividade que faziam quando havia apenas 1 bibliotecário: atendiam o cliente, encontravam o livro e registravam a saída. Mas perceberam que o tempo de registrar o livro também era demorado, ele demorava cerca de 3 vezes o tempo de pegar o livro, pois o software era bem lento e implementado em Javascript. Logo eles foram procurar solução para o problema deles e descobriram que estavam enfrentando um problema de concorrência. <strong>Concorrência</strong> acontece quando dois ou mais bibliotecários desejam acessar recursos limitados.</p>
</div>
<div class="paragraph">
<p>Eles perceberam que o mais demorado era entrar no sistema, logo resolveram atender 3 clientes por vez. Assim cada bibliotecário pegava o pedido de 3 clientes e depois registravam no sistema. Essa abordagem fez com que o atendimento se tornasse 70% mais eficiente do que era quando se tinha apenas um funcionário.</p>
</div>
<div class="paragraph">
<p>Por fim a biblioteca decidiu contratar uma bibliotecária para fiscalizar o manuseio dos livros porque percebeu que só tinha homens nessa história. E o aumento de eficiência passou para 150% pois ela conseguia fiscalizar e atender na bancada quando possível.</p>
</div>
<div class="paragraph">
<p>Eu espero que com essa história você tenha compreendido que esse processo acontece com qualquer servidor web. É EXATAMENTE ASSIM! Pense que a biblioteca é o servidor, os bibliotecários são <em>threads</em>, os livros são os recursos que o servidor usa e os clientes são os clientes que estão acessando a API do servidor. Eu não sei se os conceitos de concorrência e paralelismo são usado na bibliotecas, eles são conceitos da computação que foram usado nesse texto para descrever e diferenciar eles. Logo podemos redefinir <strong>Paralelismo</strong> quando a mesma tarefa é realizada simultaneamente por mais de uma <em>thread</em> ou processo e <strong>Concorrência</strong> quando acontece duas ou mais <em>threads</em>, ou processos desejam acessar recursos limitados.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-06-thread-e-processo">O que é Thread e Processo?!?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Falar de Paralelismo e Concorrência não é uma tarefa fácil porque envolve vários conceitos de vários níveis. Até agora nós falamos de conceitos abstratos, mas agora vamos falar de algo bem mais concreto. Eu citei Thread e Processo e esses são conceitos sobre o sistema operacional.</p>
</div>
<div class="paragraph">
<p>Um processo é um programa rodando na memória. Ele é instanciado pelo sistema operacional e terá seu ciclo de vida até ser encerrado por si mesmo ou pelo próprio sistema operacional. Cada processo tem um identificador único e compartilha os recursos da máquina com outros processo. No trecho abaixo vemos a listagem dos 9 primeiros processos iniciados pelo Linux que ainda estão em execução, observe que o <code>PID</code> é o identificado único de cada processo, se eu quiser finalizar um processo preciso enviar um comando <code>kill -15 &lt;PID&gt;</code> onde <strong>-15</strong> é o sinal que o programa deve ser encerrado, se eu usar <strong>-9</strong> ele será encerrado imediatamente.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>$ ps -aux | head
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root           <span style="color: #666666">1</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0 <span style="color: #666666">202552</span>  <span style="color: #666666">5172</span> ?        Ss   Jul01  <span style="color: #666666">70</span>:40 /usr/lib/systemd/systemd --switched-root --system --deserialize <span style="color: #666666">22</span>
root           <span style="color: #666666">2</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:05 <span style="color: #666666">[</span>kthreadd<span style="color: #666666">]</span>
root           <span style="color: #666666">4</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S&lt;   Jul01   <span style="color: #666666">0</span>:00 <span style="color: #666666">[</span>kworker/0:0H<span style="color: #666666">]</span>
root           <span style="color: #666666">6</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:35 <span style="color: #666666">[</span>ksoftirqd/0<span style="color: #666666">]</span>
root           <span style="color: #666666">7</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:07 <span style="color: #666666">[</span>migration/0<span style="color: #666666">]</span>
root           <span style="color: #666666">8</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:00 <span style="color: #666666">[</span>rcu_bh<span style="color: #666666">]</span>
root           <span style="color: #666666">9</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01  <span style="color: #666666">37</span>:47 <span style="color: #666666">[</span>rcu_sched<span style="color: #666666">]</span>
root          <span style="color: #666666">10</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S&lt;   Jul01   <span style="color: #666666">0</span>:00 <span style="color: #666666">[</span>lru-add-drain<span style="color: #666666">]</span>
root          <span style="color: #666666">11</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:22 <span style="color: #666666">[</span>watchdog/0<span style="color: #666666">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Se fossemos falar em processos no nosso exemplo da biblioteca, teríamos que criar uma biblioteca nova. Como eu disse, dois processo compartilham recursos mas isso não significa que eles podem acessar o mesmo recurso ao mesmo tempo. Por exemplo, se eu tenho um servidor rodando na porta 80, não posso iniciar outro processo na porta 80. Um processo não tem acesso a memória de outro processo, isso significa que para um mesmo objeto não pode existir em dois processos diferentes. (<em>Até pode, mas não vamos falar de RMI porque é complicado e já foi removido da biblioteca padrão do Java</em>.)</p>
</div>
<div class="paragraph">
<p><em>—  E se eu quiser que as requisições que cheguem na porta 80 sejam processadas em paralelo, como faço?!?!</em></p>
</div>
<div class="paragraph">
<p>Lembra da nossa biblioteca? Pois é, cada biblioteca é um processo, mas cada bibliotecário é uma <em>Thread</em>. <em>Thread</em> são dois fluxos que compartilham o mesmo espaço de memória, ou seja, é quando um processo tem dois fluxos de execução em paralelo compartilhando recursos. Threads podem acessar a mesma porta, assim como podem acessar os mesmo objetos. Mas ele não podem ser feitas ao mesmo momento. Lembra do computador do balcão da biblioteca? A metáfora da biblioteca foi construída para similar exatamente o que acontece em um computador.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-06-thread-e-processo-em-java">Thread e Processo em Java</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vamos agora mostrar algumas classes que podemos usar para manipular processos e threads usando Java. Uma das preocupações da plataforma Java foi criar uma abstração para que o mesmo código possa ser usado em qualquer sistema operacional, logo todo o código demonstrado pode ser executando tando em Linux quando Windows e sistemas derivados do Unix como o MacOS.</p>
</div>
<div class="sect2">
<h3 id="_processos">Processos</h3>
<div class="paragraph">
<p>Para que possamos acessar as informações de todos os processos em execução podemos usar a classe <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/ProcessHandle.html">ProcessHandle</a> (<em>adicionada no Java 9</em>). Navegue pela documentação dela para perceber que processos podem ter uma relação de parentescos como podemos perceber através dos métodos <code>children()</code>, <code>descendants​()</code> e <code>parent​()</code>. Na execução abaixo vemos as informações do processo atual e a listagem de todos os processos em execução.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>$ jshell
<span style="color: #666666">|</span>  Welcome to JShell <span style="color: #666666">--</span> Version <span style="color: #666666">18</span>
<span style="color: #666666">|</span>  For an introduction type: <span style="color: #666666">/</span>help intro

jshell<span style="color: #666666">&gt;</span> System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>().<span style="color: #7D9029">pid</span>());
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>  .<span style="color: #7D9029">pid</span>()  );
<span style="color: #666666">20092</span>

jshell<span style="color: #666666">&gt;</span> System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>().<span style="color: #7D9029">info</span>());
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>  .<span style="color: #7D9029">info</span>  );
<span style="color: #666666">[</span>user: Optional<span style="color: #666666">[</span>VEPO<span style="color: #666666">]</span>, cmd: C:<span style="border: 1px solid #FF0000">\</span>Users<span style="border: 1px solid #FF0000">\</span>vepo<span style="border: 1px solid #FF0000">\</span>.<span style="color: #7D9029">sdkman</span><span style="border: 1px solid #FF0000">\</span>candidates<span style="border: 1px solid #FF0000">\</span>java<span style="border: 1px solid #FF0000">\</span><span style="color: #666666">18-</span>open<span style="border: 1px solid #FF0000">\</span>bin<span style="border: 1px solid #FF0000">\</span>java.<span style="color: #7D9029">exe</span>, startTime: Optional<span style="color: #666666">[2022-09-02</span>T18:<span style="color: #666666">49</span>:<span style="color: #666666">28.093</span>Z<span style="color: #666666">]</span>, totalTime: Optional<span style="color: #666666">[</span>PT0<span style="color: #666666">.328125</span>S<span style="color: #666666">]]</span>

jshell<span style="color: #666666">&gt;</span> ProcessHandle.<span style="color: #7D9029">allProcesses</span>().<span style="color: #7D9029">forEach</span>(System.<span style="color: #7D9029">out</span>::println);
ProcessHandle.<span style="color: #7D9029">allProcesses</span>  .<span style="color: #7D9029">forEach</span>(System.<span style="color: #7D9029">out</span>::println);
<span style="color: #666666">0</span>
<span style="color: #666666">4</span>
<span style="color: #666666">72</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Caso você deseje criar um novo processo, é preciso fazer uma chamada de sistema usando a classe <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Runtime.html">Runtime</a>. No trecho de código abaixo usamos o método <code>exec</code> para criar um novo processo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>jshell<span style="color: #666666">&gt;</span> Runtime.<span style="color: #7D9029">getRuntime</span>().<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>)
Runtime.<span style="color: #7D9029">getRuntime</span>  .<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>)
$4 <span style="color: #666666">==&gt;</span> Process<span style="color: #666666">[</span>pid<span style="color: #666666">=19628</span>, exitValue<span style="color: #666666">=</span><span style="color: #BA2121">&quot;not exited&quot;</span><span style="color: #666666">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Na resposta da execução podemos ver que o método <code>exec</code> retorna o novo processo, mas não espera por ele terminar, retornando apenas um objeto <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html">Process</a> para poder ser manipulado. Em posse desse objeto, podemos esperar por ele terminar e ver se a execução foi um sucesso.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>jshell<span style="color: #666666">&gt;</span> Runtime.<span style="color: #7D9029">getRuntime</span>().<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>).<span style="color: #7D9029">waitFor</span>()
Runtime.<span style="color: #7D9029">getRuntime</span>  .<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>).<span style="color: #7D9029">waitFor</span>
$5 <span style="color: #666666">==&gt;</span> <span style="color: #666666">0</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Percebeu que o método <code>waitFor</code> retornou <strong>0</strong>? Todo processo precisa finalizar com um número e zero significa sucesso. Qualquer número diferente de zero significa que o programa foi finalizado com erro. O programa que eu executei acima é o <code>pwd</code> que retorna o diretório corrente em Linux, apesar de usar Windows uso o Git Bash que é um porte do MinGW que simula um bash Linux.</p>
</div>
</div>
<div class="sect2">
<h3 id="_threads">Threads</h3>
<div class="paragraph">
<p><em>Threads</em> também são criadas pelo sistemas operacional, mas o Java dá suporte a duas bibliotecas bem interessantes que precisamos demonstrar. A primeira é a classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Thread.html">Threads</a> que deve ser usada com muita parcimônia essa classe, o livro <a href="https://www.amazon.com.br/Java-Efetivo-Melhores-Pr%C3%A1ticas-Plataforma/dp/8550804622?crid=6C287ENLSDOW&amp;keywords=java+efetivo&amp;qid=1662253615&amp;sprefix=java+ef%2Caps%2C363&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=092f42dffa52d29c336aacab87c58558&amp;language=pt_BR&amp;ref_=as_li_ss_tl">Java Efetivo</a> nos diz no <strong>Item 80: Dê preferência aos executores, às tarefas e às streams em vez de threads</strong>. Os <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Executors.html">Executors</a> são a proxima classe que vamos ver que podem entregar as mesmas funcionalidades.</p>
</div>
<div class="paragraph">
<p><em>— Então porque entender Threads?!?!</em></p>
</div>
<div class="paragraph">
<p><em>Threads</em> são importantes porque são um conceito do sistema operacional. Um executor não elimina uma thread, ele apenas facilita a implementação delas e otimiza o seu uso. Threads são gerenciadas pelo Sistema Operacional. O tempo de CPU será dividido entre os processos e as threads. Isso significa que se seu computador tem 4 CPUs e seu programa tem ao menos 2 threads, é provável que em algum momento seu programa esteja rodando em 2 CPUs ao mesmo tempo, mas quem define isso é o sistema operacional.</p>
</div>
<div class="paragraph">
<p>Threads são um recurso do sistema operacional limitado e caro. No Windows isso não é transparente, mas no Linux é possível acessar essas informações facilmente através do arquivo <code>/proc/sys/kernel/threads-max</code>. Na execução abaixo vemos que essa instância do Linux só pode rodar 32.768 processos concorrentes e 100.435 threads concorrentes, o que dá em média 3 threads por processo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>$ cat /proc/sys/kernel/threads-max
<span style="color: #666666">100435</span>

$ cat /proc/sys/kernel/pid_max
<span style="color: #666666">32768</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><em>— Mas 3 threads por processo não é muito pouco?!?!</em></p>
</div>
<div class="paragraph">
<p>Não! Porque é praticamente impossível rodar 32.768 processos concorrentes e a grande maioria dos processos tem apenas uma thread rodando.</p>
</div>
<div class="paragraph">
<p><em>— Mas o que acontece quando o Java pede uma thread nova?</em></p>
</div>
<div class="paragraph">
<p>Para entender isso, precisamos compreender outro conceito importante de Sistemas Operacionais o espaço do usuário e o espaço do kernel (<a href="https://pt.wikipedia.org/wiki/Espa%C3%A7o_de_usu%C3%A1rio"><em>user space</em> e <em>kernel space</em></a>). Espaço do usuário é todo o código dos nossos programas, já o espaço do kernel é o código do sistema operacional que nossos programas usam para realizar algumas operações. Toda operação que sai do espaço do usuário e vai para o espaço do kernel é custosa porque pode envolver recursos compartilhados como sockets, arquivos ou threads. Logo, criar uma nova thread é custoso porque tem que criar uma nova thread no sistema operacional que não é apenas alocar um espaço na memória.</p>
</div>
<div class="paragraph">
<p>No código abaixo uma thread é criada que sua única função é pegar o instante em que é iniciada, dormir por 500ms e armazenar o instante em que ela é finalizada. Os tempos deve ser armazenados no array tempos porque nenhuma variável pode ser alterada diretamente entre duas threads que não seja uma variável <code>final</code>, pois estamos falando de duas pilhas de execução diferentes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">long</span><span style="color: #666666">[]</span> tempos <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">long</span><span style="color: #666666">[4]</span>;
tempos<span style="color: #666666">[0]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
Thread t <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Thread() {
    <span style="color: #AA22FF">@Override</span>
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">run</span>() {
        tempos<span style="color: #666666">[1]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            Thread.<span style="color: #7D9029">sleep</span>(<span style="color: #666666">500</span>);
        } <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
            Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
        }
        tempos<span style="color: #666666">[2]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
    }
};
t.<span style="color: #7D9029">start</span>();
<span style="color: #008000; font-weight: bold">try</span> {
    t.<span style="color: #7D9029">join</span>();
} <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
    Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
}
tempos<span style="color: #666666">[3]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de inicialização: %dµs&quot;</span>, (tempos<span style="color: #666666">[1]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de execução     : %dµs&quot;</span>, (tempos<span style="color: #666666">[2]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[1]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo total           : %dµs&quot;</span>, (tempos<span style="color: #666666">[3]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>O resultado da execução é o visto abaixo, observe que demora quase meio milissegundo para que a thread seja iniciada. Esse tempo pode parecer pouco, mas se houver um uso abusivo dessa classe pode impactar a performance, pois esse tempo é latência adicionada ao processamento.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>Tempo de inicialização: 436µs
Tempo de execução     : 510061µs
Tempo total           : 510643µs</code></pre>
</div>
</div>
<div class="paragraph">
<p>Observe também que usamos os métodos <code>start</code> e <code>join</code>, eles servem para controlar a thread. Uma thread não inicia sua execução imediatamente, é preciso que o código que a instanciou dispare a execução. Mas quando a execução se inicia os dois códigos começam a ser executados em paralelo, para que se aguarde a finalização da thread é preciso usar o método <code>join</code> que fará com que a thread corrente seja bloqueada até que a outra seja finalizada.</p>
</div>
<div class="paragraph">
<p>Outro ponto importante é o uso da exceção <code>InterruptedException</code>, ela é lançada pela JVM toda vez que a thread é interrompida pelo sistema operacional.</p>
</div>
<div class="paragraph">
<p><em>— Mas o que significa a thread ser interrompida pelo sistema operacional?</em></p>
</div>
<div class="paragraph">
<p>Ora, já teve vezes em que uma janelinha do Windows ficou não responsiva e você foi lá forçou ela a ser fechada? Ou você executou um comando no bash e não quis esperar a resposta e pressionou <strong>CRTL + C</strong>. Nessa hora o sistema operacional envia um sinal ao programa que ele deve finalizar, o <a href="https://pt.wikipedia.org/wiki/SIGTERM">SIGTERM</a>. Quando esse sinal é recebido pela thread, ela deve liberar todos os recursos e se finalizar, por isso quanto tempos uma <code>InterruptedException</code> é hora de limpar a casa e fechar tudo.</p>
</div>
<div class="paragraph">
<p>Se você ignorar essa exception, o seu processo pode virar um <a href="https://pt.wikipedia.org/wiki/Processo_zombie">processo zumbi</a>, pois outras threads podem ter obedecido o sinal e já ter finalizada criando instabilidade para a execução. Então, recebeu um <code>InterruptedException</code>, fecha tudo e chama <code>Thread.currentThread().interrupt()</code>.</p>
</div>
<div class="paragraph">
<p>Há um outro sinal que não fornece essa informação, o <a href="https://pt.wikipedia.org/wiki/SIGKILL">SIGKILL</a>, o sistema operacional simplesmente mata a execução sem nenhuma educação e protocolo.</p>
</div>
<div class="paragraph">
<p>Por fim, você deve ter reparado que implementamos o método <code>run</code> na thread. Esse método é definido na classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Runnable.html">Runnable</a>, essa classe é muito importante porque nem sempre precisamos definir uma thread nova, podemos estender essa classe e criar quantas threads forem necessária com o mesmo código.</p>
</div>
<div class="paragraph">
<p>Existe a possibilidade de se criar grupos de threads com a classe <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadGroup.html">ThreadGroup</a>, mas não vamos abordar ela porque todas as funcionalidades delas podem ser endereçadas com Executors.</p>
</div>
</div>
<div class="sect2">
<h3 id="_executors">Executors</h3>
<div class="paragraph">
<p>Executors são a nova, <em>em relação a Thread</em>, biblioteca adicionada no Java 5 que permite um controle melhor sobre Threads e grupos de threads. A vantagem do uso da classe Executors é que temos uma interface bem mais interessante, como veremos a diante. Primeiro vamos focar em performance.</p>
</div>
<div class="paragraph">
<p>Como falamos, criar thread pode ser uma operação cara, com executors podemos criar pool de threads ou reutilizar threads já existentes sem a necessidade de se criar novas threads. Se compararmos a execução vemos que o uso de pools de thread diminuem o tempo gasto com a inicialização dessas threads. Nos teste que executamos, vemos que o tempo de inicialização e o tempo médio total são menores, somente o tempo médio de execução é maior, mas isso é devido a fatores externos ao código já que executamos o mesmo código em ambos o caso.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>Usando Threads
Tempo de inicialização: 402µs
Tempo de execução     : 511415µs
Tempo total           : 511939µs

Tempo médio de inicialização: 77370µs
Tempo médio de execução     : 50792817µs
Tempo médio total           : 50880048µs

Usando Executors
Tempo de inicialização: 2829µs    (+2.427µs)
Tempo de execução     : 509877µs  (-1.538µs)
Tempo total           : 513237µs  (+1.298µs)

Tempo médio de inicialização: 19708µs    (-57.662µs)
Tempo médio de execução     : 50806122µs (+13.305µs)
Tempo médio total           : 50839674µs (-40.374µs)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para se criar um <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/ExecutorService.html"><code>ExecutorService</code></a> deve se usar a classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Executors.html"><code>Executors</code></a>. Nessa classe tempos vários tipos de ExecutorServices, mas os mais importantes são os <strong>FixedThreadPool</strong>, <strong>CachedThreadPool</strong> e <strong>ScheduledThreadPool</strong>. Cada um desses tem suas peculiaridades que não vamos abordar aqui, apenas vamos ressaltar que <strong>ScheduledThreadPool</strong> deve ser usado quando precisamos criar threads que executam em intervalos pré definidos.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">long</span><span style="color: #666666">[]</span> tempos <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">long</span><span style="color: #666666">[4]</span>;
tempos<span style="color: #666666">[0]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
ExecutorService executor <span style="color: #666666">=</span> Executors.<span style="color: #7D9029">newSingleThreadExecutor</span>();
Future<span style="color: #666666">&lt;?&gt;</span> ft <span style="color: #666666">=</span> executor.<span style="color: #7D9029">submit</span>(() <span style="color: #666666">-&gt;</span> {
        tempos<span style="color: #666666">[1]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            Thread.<span style="color: #7D9029">sleep</span>(<span style="color: #666666">500</span>);
        } <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
            Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
        }
        tempos<span style="color: #666666">[2]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
    });
<span style="color: #008000; font-weight: bold">try</span> {
    ft.<span style="color: #7D9029">get</span>();
} <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
    Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
}
tempos<span style="color: #666666">[3]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de inicialização: %dµs&quot;</span>, (tempos<span style="color: #666666">[1]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de execução     : %dµs&quot;</span>, (tempos<span style="color: #666666">[2]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[1]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo total           : %dµs&quot;</span>, (tempos<span style="color: #666666">[3]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
executor.<span style="color: #7D9029">shutdown</span>();</code></pre>
</div>
</div>
<div class="paragraph">
<p>A grande diferença é que quando criamos uma nova execução o ExecutorService retorna um <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Future.html"><code>Future</code></a> que irá prover informações sobre a execução e o retorno da execução. Um executor não aceita apenas um <code>Runnable</code>, mas também <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Callable.html"><code>Callable</code></a> que retorna valores. A opção por usar <code>Callable</code> irá tornar seu código mais legível.</p>
</div>
<div class="paragraph">
<p>Outro ponto importante do uso de <code>ExecutorService</code> é que assim que uma nova atividade é submetida, ela entrará na fila de execução. É preciso ressaltar que ela só será executada quando houver thread disponível. Isso significa que um <code>ExecutorService</code> deve ser usado para atividades rápidas e não com longa duração. Se você precisar executar algo que dure toda execução crie um ExecutorService de tamanho pré-definido, usando <code>newFixedThreadPool</code> ou cria a thread manualmente.</p>
</div>
<div class="paragraph">
<p>Por fim um ExecutorService não finaliza automaticamente, ele deve ser finalizado através do método <code>shutdown</code>. Caso você não chame esse método o seu programa vai virar um processo zumbi.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-06-controle-concorrencia">Controle de Concorrência</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Como vimos concorrência é um problema diferente de paralelismo, ela é a solução para garantir que apenas uma thread está executando um trecho de código. As soluções de concorrência da JVM são propostas para que seja usadas dentro de uma mesma instância da JVM, ou seja, não é possível pela biblioteca padrão garantir concorrência entre dois processos distintos.</p>
</div>
<div class="paragraph">
<p>Vamos começar a ver pelos modos mais antigos, mesmo que eles já não sejam os mais utilizados. O primeiro dele é o mais simples de todos, usar o modificado <code>synchronized</code>. No trecho de código abaixo, o <code>synchronized</code> permite que o de counter seja impresso na linha de comando sequencialmente, caso seja removido valores repetidos e fora de ordem aparecerão. O <code>synchronized</code> vai garantir que quando uma thread está executando o método <code>printAndIncrement</code> as outras serão bloqueadas até que a execução seja finalizada. Quando usamos o <code>synchronized</code> em um método de instância, o efeito do bloqueio só acontece quando método de um mesmo objeto são executados concorrentemente, caso o controle de concorrência deva ser feito globalmente o <code>synchronized</code> pode ser usado em métodos estáticos.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Sync</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #B00040">int</span> counter;

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #0000FF">Sync</span>() {
        counter <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">synchronized</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">printAndIncrement</span>() {
        counter<span style="color: #666666">++</span>;
        System.<span style="color: #7D9029">err</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Thread [%s] valor:%d&quot;</span>, Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">getName</span>(), counter));
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Usar o modificador <code>synchronized</code> ainda é uma prática bem comum apesar que existem soluções melhores. Ele deve ser usado quando é realmente necessário bloquear todo o bloco de execução. Se você precisa usar em uma das classes da biblioteca Collection (vista na sessão 3) a melhor solução é usar uma das classes da biblioteca padrão do Java. A classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Collections.html"><code>Collections</code></a> tem alguns métodos que criam um envolucro para objetos, por exemplo, se eu tenho uma lista e desejo usar ela em várias threads, eu posso usar <code>Collections.synchronizedList(minhaLista)</code>.</p>
</div>
<div class="paragraph">
<p>Observe no trecho de código abaixo que temos duas listas mas apenas a segunda pode ser usada em várias threads. Qualquer operação na segunda lista reflete na primeira. Usar uma lista não sincronizada pode ser que não faça o programa apresentar uma exceção, mas com certeza vai criar estados inconsistentes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>$ jshell
<span style="color: #666666">|</span>  Welcome to JShell <span style="color: #666666">--</span> Version <span style="color: #666666">18</span>
<span style="color: #666666">|</span>  For an introduction type: <span style="color: #666666">/</span>help intro

jshell<span style="color: #666666">&gt;</span> List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaLista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;&gt;</span>();
List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaLista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;&gt;</span>  ;
minhaLista <span style="color: #666666">==&gt;</span> <span style="color: #666666">[]</span>

jshell<span style="color: #666666">&gt;</span> List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaListaSync <span style="color: #666666">=</span> Collections.<span style="color: #7D9029">synchronizedList</span>(minhaLista);
List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaListaSync <span style="color: #666666">=</span> Collections.<span style="color: #7D9029">synchronizedList</span>(minhaLista);
minhaListaSync <span style="color: #666666">==&gt;</span> <span style="color: #666666">[]</span>

jshell<span style="color: #666666">&gt;</span> minhaLista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 1&quot;</span>)
minhaLista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 1&quot;</span>)
$3 <span style="color: #666666">==&gt;</span> <span style="color: #008000; font-weight: bold">true</span>

jshell<span style="color: #666666">&gt;</span> minhaListaSync.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 2&quot;</span>)
minhaListaSync.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 2&quot;</span>)
$4 <span style="color: #666666">==&gt;</span> <span style="color: #008000; font-weight: bold">true</span>

jshell<span style="color: #666666">&gt;</span> minhaLista
minhaLista
minhaLista <span style="color: #666666">==&gt;</span> <span style="color: #666666">[</span>String <span style="color: #666666">1</span>, String <span style="color: #666666">2]</span>

jshell<span style="color: #666666">&gt;</span> minhaListaSync
minhaListaSync
minhaListaSync <span style="color: #666666">==&gt;</span> <span style="color: #666666">[</span>String <span style="color: #666666">1</span>, String <span style="color: #666666">2]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>O <code>synchronized</code> também pode ser usado como bloco de código, mas essa é uma forma um pouco arcaica como veremos. Vamos imagina que temos duas threads, uma produzindo valores e a outra consumindo. A thread que consome valores deve sempre retornar um valor, não importa se não existe valores no momento. Normalmente isso é o que acontece quando temos um buffer em quem uma thread está produzindo e outra consumindo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Buffer</span> {
    <span style="color: #008000; font-weight: bold">private</span> Object lock <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Object();
    <span style="color: #008000; font-weight: bold">private</span> List<span style="color: #666666">&lt;</span><span style="color: #B00040">int</span><span style="color: #666666">[]&gt;</span> _buffer <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> LinkedList<span style="color: #666666">&lt;&gt;</span>();
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">add</span>(<span style="color: #B00040">int</span><span style="color: #666666">[]</span> valores) {
        <span style="color: #008000; font-weight: bold">synchronized</span>(lock) {
            _buffer.<span style="color: #7D9029">add</span>(valores);
            lock.<span style="color: #7D9029">notifyAll</span>();
        }
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span><span style="color: #666666">[]</span> <span style="color: #0000FF">consume</span>() {
        <span style="color: #B00040">int</span><span style="color: #666666">[]</span> nextValue <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">null</span>;
        <span style="color: #008000; font-weight: bold">synchronized</span>(lock) {
            <span style="color: #008000; font-weight: bold">while</span>(_buffer.<span style="color: #7D9029">isEmpty</span>()) {
                lock.<span style="color: #7D9029">wait</span>();
            }
            nextValue <span style="color: #666666">=</span> _buffer.<span style="color: #7D9029">remove</span>(<span style="color: #666666">0</span>);
        }
        <span style="color: #008000; font-weight: bold">return</span> nextValue;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>A classe acima está implementada usando técnicas que não devem mais ser usadas. O primeiro problema é que toda chamada ao bloco sincronizado será feita por apenas uma thread por vez, existe técnicas mais recentes que permitem que mais de uma thread acessem um bloco sincronizado que veremos a seguir. O bloco sincronizado deve ser feito usando um objeto em comum, no caso esse objeto pode ser compartilhado em mais de um objeto, caso a thread deseje esperar por alguma condição, deve se usar o método <code>wait</code> que será despertado por uma chamada ao método <code>notify</code> ou <code>notifyAll</code>. No exemplo acima, se não há valores a serem consumidos, eles devem esperar por um valor.</p>
</div>
<div class="paragraph">
<p>Uma alternativa ao bloco sincronizado é o uso da classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html">ReadWriteLock</a>. A necessidade dessa classe surgem quando se percebe que apenas as threads que escrevem devem ter acesso exclusivo, as threads de leitura podem acessar os métodos livremente. No exemplo acima não é possível usar ela porque ambos os métodos escrevem ao adicionar e remover valores na lista por isso serão necessárias algumas alterações.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Buffer</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> ReadWriteLock readWriteLock <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ReentrantReadWriteLock();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Lock readLock <span style="color: #666666">=</span> readWriteLock.<span style="color: #7D9029">readLock</span>();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Lock writeLock <span style="color: #666666">=</span> readWriteLock.<span style="color: #7D9029">writeLock</span>();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Condition newItem <span style="color: #666666">=</span> writeLock.<span style="color: #7D9029">newCondition</span>();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> List<span style="color: #666666">&lt;</span><span style="color: #B00040">int</span><span style="color: #666666">[]&gt;</span> _buffer <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> LinkedList<span style="color: #666666">&lt;&gt;</span>();

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">add</span>(<span style="color: #B00040">int</span><span style="color: #666666">[]</span> valores) {
        writeLock.<span style="color: #7D9029">lock</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            _buffer.<span style="color: #7D9029">add</span>(valores);
            newItem.<span style="color: #7D9029">signalAll</span>();
        } <span style="color: #008000; font-weight: bold">finally</span> {
            writeLock.<span style="color: #7D9029">unlock</span>();
        }
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span> <span style="color: #0000FF">available</span>() {
        readLock.<span style="color: #7D9029">lock</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            <span style="color: #008000; font-weight: bold">return</span> _buffer.<span style="color: #7D9029">size</span>();
        } <span style="color: #008000; font-weight: bold">finally</span> {
            readLock.<span style="color: #7D9029">unlock</span>();
        }
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span><span style="color: #666666">[]</span> <span style="color: #0000FF">consume</span>(<span style="color: #B00040">int</span> position) {
        readLock.<span style="color: #7D9029">lock</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            <span style="color: #008000; font-weight: bold">while</span> (_buffer.<span style="color: #7D9029">size</span>() <span style="color: #666666">&lt;=</span> position) {
                newItem.<span style="color: #7D9029">await</span>();
            }
            <span style="color: #008000; font-weight: bold">return</span> _buffer.<span style="color: #7D9029">get</span>(position);
        } <span style="color: #008000; font-weight: bold">finally</span> {
            readLock.<span style="color: #7D9029">unlock</span>();
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Na nossa nova classe <code>Buffer</code>, quem é responsável por saber a posição no buffer é a thread que consome que pode ser mais de uma. Cada chamada ao método <code>consome</code> e <code>available</code> poderão ser feitas sem nenhum bloqueio. Mas se uma chamada ao método <code>add</code> for feita, ela deverá esperar pela finalização de todas as chamadas aos locks de leitura e todos os locks de leitura deverão esperar pela finalização do lock de escrita. Os locks de leitura podem ser executados concorrentemente, mas o lock de escrita só pode acontecer quando nenhum outro lock estiver ativo.</p>
</div>
<div class="paragraph">
<p>No código acima podemos ver também o uso da classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/locks/Condition.html"><code>Condition</code></a>. Essa classe deve ser usada quando esperamos alguma condição especifica, no nosso caso é a lista ter o item desejado ou não. O uso dessa classe é bem similar ao dos métodos <code>wait</code>, <code>notify</code> e <code>notifyAll</code>, mas é adicionada uma melhor semântica pode podemos criar mais que uma condição e usar elas para dar uma boa legibilidade ao código.</p>
</div>
<div class="paragraph">
<p>Por fim a biblioteca padrão do Java tem uma série de classes atômicas que são extremamente úteis. Elas estão no pacote <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/atomic/package-summary.html"><code>java.util.concurrent.atomic</code></a> e todas elas tem comportamento similar, vão permitir você realizar operações atômicas sem se preocupar com a concorrência. Para demonstrar o uso delas vou mostrar o caso mais comum que é criar um contador sincronizado.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>ExecutorService executor <span style="color: #666666">=</span> Executors.<span style="color: #7D9029">newFixedThreadPool</span>(<span style="color: #666666">15</span>);
AtomicInteger counter <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> AtomicInteger(<span style="color: #666666">0</span>);
List<span style="color: #666666">&lt;</span>Future<span style="color: #666666">&lt;?&gt;&gt;</span> allFuture <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;&gt;</span>();
<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> <span style="color: #666666">1_000</span>; <span style="color: #666666">++</span>i) {
    allFuture.<span style="color: #7D9029">add</span>(executor.<span style="color: #7D9029">submit</span>(() <span style="color: #666666">-&gt;</span> System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Contador: &quot;</span> <span style="color: #666666">+</span> counter.<span style="color: #7D9029">incrementAndGet</span>())));
}
executor.<span style="color: #7D9029">shutdown</span>();
<span style="color: #008000; font-weight: bold">try</span> {
    executor.<span style="color: #7D9029">awaitTermination</span>(<span style="color: #666666">1</span>, TimeUnit.<span style="color: #7D9029">SECONDS</span>);
} <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
    Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>No código acima não podemos garantir que os valores impressos estarão em ordem, mas podemos garantir que todos os valores de 1 a 1000 serão impressos. A classe <code>AtomicInteger</code> garante que a operação <code>incrementAndGet</code> seja feita atomicamente, isso significa que ela não será interrompida por outra chamada a outro método desse mesmo objeto. Todas as classes desse pacote merecem nossa atenção pois elas são bem importantes, principalmente se você está desenvolvendo um aplicativo Desktop que irá lidar com várias threads.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Tutorial" /><category term="Threads" /><category term="Concorrência" /><category term="Paralelismo" /><summary type="html"><![CDATA[O que eu preciso saber de concorrência e paralelismo para desenvolver usando Java? A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">Java I/O</title><link href="https://blog.vepo.dev/posts/java-101-io" rel="alternate" type="text/html" title="Java I/O" /><published>2022-07-04T00:00:00+00:00</published><updated>2022-07-04T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/23-53-00-java101-io</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-io"><![CDATA[<div class="paragraph">
<p>Esse post faz parte de uma série introdutória sobre Java, se você não conhece a linguagem e não leu os posts anteriores, recomendo os ler para ter uma visão melhor da plataforma. Nessa série, já falamos sobre o que é o ecossistema Java, o que é a biblioteca Collections e como Java faz Orientação a Objetos, esses tópicos são necessários para o que vamos falar agora: <strong>I/O</strong>.</p>
</div>
<div class="sect1">
<h2 id="cap-05-o-que-e-io">O que é I/O?!?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Quando pensamos em um computador a primeira coisa que pensamos é no que fazemos online: enviar um tweet, responder email, ver um vídeo ou mesmo ler esse post. Mas um computador não entende essas atividades, para ele tudo são bits, ou seja, todas essa são atividades podem ser traduzidas em outras atividades de baixo nível. Quando eu uso o termo "baixo nível" entenda como algo de menor abstração, por exemplo, para você ler esse post, o seu navegador teve que renderizar uma página HTML, que foi requisitada de um servidor HTTP usando uma conexão Socket, que na verdade é apenas uma troca de bits entre vários computadores. Essas atividades sempre envolvem trocas de informações que só são possível através de algo chamado <strong>serialização</strong>.</p>
</div>
<div class="paragraph">
<p><strong>Serialização</strong> seria a transformação de uma informação em um formato intermediário para que ela possa transitar entre dois processos. Ou seja, a informação que você está lendo agora é composta de alguns arquivos HTML, Javascript, CSS, PNG e JPEG que são enviadas através da web usando o protocolo HTTP sobre TLS.</p>
</div>
<div class="paragraph">
<p><em>—  Você não ia falar de I/O? Que papo é esse de <strong>serialização</strong> e internet?!?</em></p>
</div>
<div class="paragraph">
<p>Sim, I/O é outra forma de falar sobre serialização. Toda informação para ser enviada ela passa pelos passos de (1) serialização, (2) escrita, (3) transmissão, (4) leitura e (5) desserialização. O processo de transmissão pode ser o envio dessa informação através de uma API, ou o armazenamento dela em um banco de dados ou mesmo a escrita no disco para que possa ser lida no futuro. Os formatos de serialização de dados são bem interessantes de se analisar, mas não é o foco desse post, aqui focaremos em conhecer as bibliotecas que a JVM nos oferece para que possamos ler e escrever objetos onde bem desejarmos.</p>
</div>
<div class="paragraph">
<p>Na JVM existem dois pacotes que lidam com serialização em Java. O mais conhecido deles é o <a href="https://docs.oracle.com/javase/8/docs/api/java/io/package-summary.html"><code>java.io</code></a> onde estão definidas as classes para leitura síncrona. Já no <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/package-summary.html"><code>java.nio</code></a> estão definidas as classes para leitura assíncrona (Non-blocking I/O).</p>
</div>
<div class="paragraph">
<p>Seria hipocrisia da minha parte dizer que você deve conhecer esses pacotes por completo, eu não os conheço. Só quem trabalha especificamente com I/O deve conhecer bem essas classes. Não se surpreenda se um desenvolvedor com anos de experiência em Java procurar no Google <em>"how to read a text file in Java"</em>. Isso acontece porque esses pacotes são complexos e por isso difíceis de serem internalizados. Mas você deve saber algumas informações importantes e nós vamos trabalhar elas aqui.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Porque a interface <code>Serializable</code>? Devo usar?</p>
</li>
<li>
<p>O que é um <code>InputStream</code> e um <code>OutputStream</code>?</p>
</li>
<li>
<p>Qual Stream devo usar?</p>
</li>
<li>
<p>Qual a diferença entre um Stream e os Readers/Writers?</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Nós não vamos falar de NIO, esse será o assunto de um post mais a frente. Não estranhe se você perceber que um Sênior não sabe como usar as classes desse pacote, em muitos casos elas são usadas apenas pelos frameworks o que implica que muitos desenvolvedores nunca tiveram contato com ela.</p>
</div>
<div class="sect2">
<h3 id="_a-diferença-entre-io-e-nio">A diferença entre IO e NIO</h3>
<div class="paragraph">
<p>Talvez você tenha ficado curioso do motivo de existirem dois pacotes para I/O. Não ficou? Bom, existem dois pacotes diferentes porque NIO é um conceito muito mais novo do que IO. IO existe desde que os computadores existem e sempre foi um problema para qualquer software. Se você não fez faculdade de Ciência da Computação, saiba que existe até uma matéria só pensando em como se criar estrutura de dados para arquivos, isso porque ao se ler um arquivos nos deparamos com alguns problemas que deveriam ser óbvios: (1) o tempo de leitura é muito inferior ao tempo de acesso a memória, (2) os dados são armazenados em blocos que não são facilmente rearranjáveis e (3) a leitura de blocos próximos é mais rápida que a leitura de blocos distantes. Os discos mais novos não possuem o problema (3), mas mesmo assim ler e escrever de arquivo não pode ser feito da mesma forma que ler e escrever na memória.</p>
</div>
<div class="paragraph">
<p><em>—  Escrever na memória?!?! Eu nunca escrevi na memória!!!</em></p>
</div>
<div class="paragraph">
<p>Todo programa, ao ser executado, está armazenado na memória. Essa é uma operação tão comum que é transparente para linguagens alto nível. Se estivéssemos escrevendo em C seria preciso alocar e desalocar memória. Mas em Java a alocação é feita com um <code>new</code> e a memória é desalocada automaticamente. Mas não é possível alocar espaça em disco.</p>
</div>
<div class="paragraph">
<p>Se compararmos a escrita e memória com a escrita em disco, ou interface de redes, vemos que a primeira é tão rápida que pode ser considerada imediata. Já os outros tipos de escrita não podem ser consideradas imediatas, por isso surgiram uma série de interfaces capazes de avisar ao software quando o dado está pronto para ser lido. É nesse ponto que diferenciamos IO de NIO! O pacote <code>java.io</code> são classes usadas para leitura/escrita bloqueante, enquanto o pacote <code>java.nio</code> são classes de leitura/escrita não bloqueante. E como NIO é mais recente que o IO tradicional, seu pacote foi inserido em uma versão do Java bem mais recente (JDK 1.4).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-05-arquivos-sockets-linux">Arquivos, Sockets e Linux 🐧</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Uma das grandes vantagens do Sistema Operacional Linux é que tudo são arquivos. Quase todas as funcionalidades do sistema operacional são expostas através de arquivos mapeados no sistema de arquivos. Assim ao invés de fazer uma chamada de sistema complexa para, por exemplo, obter o tempo que a máquina está em operação, basta ler o arquivo <code>/proc/uptime</code>. Ou ler o arquivo <code>/proc/cpuinfo</code> para obter uma série de informações sobre a CPU.</p>
</div>
<div class="paragraph">
<p>Essa foi uma escolha arquitetural do sistema que se tornou bastante eficaz porque cria uma interface comum entre diversas operações. Por exemplo, se você for procurar no Windows a maneira de se ver todos os processo em execução, verá que tem uma <a href="https://docs.microsoft.com/pt-br/windows/win32/psapi/enumerating-all-processes">API (<em>lembre-se que API não se refere só a API REST</em>) complexa</a>, mas em um Linux basta executar <code>ls /proc</code> e todos os diretórios com números são processos. Para saber mais informações dos processos, basta acessar alguns arquivos dentro dessas pastas.</p>
</div>
<div class="paragraph">
<p>Essa informação pode parecer perdida, mas ela tem uma relação profunda com o que veremos a seguir. Quando o Linux escolhe mapear tudo como arquivo, a escolha feita é por se tratar diversas formas de dados por uma mesma interface. Arquivos são fáceis de serem lidos, então ao expor tudo como arquivo é fácil conseguir acessar essas informações. A JVM também traz a mesma abordagem! Tudo em serialização vai se resumir a poucas classes. A operação de leitura de um arquivo ou leitura de um socket são tão semelhantes que podem ser executadas pelo mesmo código.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-05-apresentacao-pacote">Apresentação do pacote <code>java.io</code></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Para entendermos o pacote <code>java.io</code> primeiro precisamos entender o que é um Stream (ou fluxo em tradução livre). Não confunda Stream de I/O com Stream de Collections, eles tem um conceito parecido, mas são aplicados em locais diferentes. Stream significa fluxo e quando falamos de Stream estamos falando de uma informação que flui em sentido único.</p>
</div>
<div class="paragraph">
<p>Para entender melhor é preciso pensar em como era feito antes&#8230;&#8203; As bibliotecas do C para leitura de arquivo/socket não fazem diferenciação entre as interfaces de leitura e escrita, ao se criar um canal de comunicação temos um inteiro que identifica o canal e esse inteiro pode ser usado tanto para leitura como para escrita. Observe a documentação das funções <a href="https://man7.org/linux/man-pages/man2/read.2.html"><code>read</code></a> e <a href="https://man7.org/linux/man-pages/man2/write.2.html"><code>write</code></a> e veja que elas recebem os mesmo argumentos.</p>
</div>
<div id="cap-05-c-read" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://man7.org/linux/man-pages/man2/read.2.html"><img src="/assets/images/java-101/cap-05/read.PNG" alt="read"></a>
</div>
<div class="title">Figura 1. Documentação da função read</div>
</div>
<div id="cap-05-c-write" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://man7.org/linux/man-pages/man2/write.2.html"><img src="/assets/images/java-101/cap-05/write.PNG" alt="write"></a>
</div>
<div class="title">Figura 2. Documentação da função write</div>
</div>
<div class="paragraph">
<p>Em Java foi decidido que haveria uma diferenciação lógica entre leitura e escrita. Ao se ler um arquivo poderíamos ter o fluxo de leitura (InputStream ou Reader) e o fluxo de escrita (<code>OutputStream</code> ou <code>Writer</code>). Cada um desses fluxos teria uma orientação única, isso significa que um InputStream apenas lê e o <code>OutputStream</code> apenas escreve. É por isso que se usa o nome Stream.</p>
</div>
<div class="paragraph">
<p>Essa é a primeira informação importante do pacote <code>java.io</code>: <strong>As interfaces de leitura são separadas das interfaces de escrita!</strong> Para apresentar o pacote em um diagrama de classes foi até preciso criar essa separação para possibilitar que melhor visualização.</p>
</div>
<div class="paragraph">
<p>Outro ponto da biblioteca C que explica o funcionamento do pacote <code>java.io</code> são as funções <a href="https://man7.org/linux/man-pages/man2/open.2.html"><code>open</code></a> e <a href="https://man7.org/linux/man-pages/man2/close.2.html"><code>close</code></a>. Em qualquer sistema operacional para se realizar a leitura em arquivo, ou em um socket, só é possível com a alocação de recurso. Isso é feito para evitar que processos diferentes criem estados inconsistentes. Quando um processo chama a função <code>open</code> para um determinado arquivo, ele não poderá ser aberto por outro processo enquanto não for liberado através da função <code>close</code>. Se a função <code>close</code> não for chamada, o arquivo só será liberado quando o processo morrer o que pode também gerar um estado inconsistente. Por isso era importante garantir na escrita do código que a função close sempre fosse chamada e que o arquivo sempre estivesse em um estado consistente. Lembre-se que leitura e escrita não são processos imediatos, se o programa finalizar ou o arquivo for fechado antes da escrita terminar, o arquivo fica em um estado inconsistente.</p>
</div>
<div id="cap-05-c-open" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://man7.org/linux/man-pages/man2/open.2.html"><img src="/assets/images/java-101/cap-05/open.PNG" alt="open"></a>
</div>
<div class="title">Figura 3. Documentação da função open</div>
</div>
<div id="cap-05-c-close" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://man7.org/linux/man-pages/man2/close.2.html"><img src="/assets/images/java-101/cap-05/close.PNG" alt="close"></a>
</div>
<div class="title">Figura 4. Documentação da função close</div>
</div>
<div class="paragraph">
<p>Agora volta ao Java&#8230;&#8203; Em C era preciso criar mecanismos de garantir que o arquivo estava fechado antes que o programa finalizasse. Em Java isso foi internalizado na linguagem através de alguns mecanismos. Por isso temos as interfaces <code>Closeable</code> e <code>AutoCloseable</code>. Se um objeto precisa liberar recursos depois de usado, ele deve implementar a interface <code>Closeable</code> e o método <code>close</code> deve ser chamado. Até a versão 6 do Java era comum ver o <code>close</code> sendo chamado dentro do bloco <code>finally</code> de um <code>try {} catch {} finally {}</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Reader reader <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">null</span>;
<span style="color: #008000; font-weight: bold">try</span> {
    reader <span style="color: #666666">=</span> <span style="color: #408080; font-style: italic">// inicia reader</span>
    <span style="color: #408080; font-style: italic">// lê dados</span>
} <span style="color: #008000; font-weight: bold">catch</span> (IOException ioe) {
    <span style="color: #408080; font-style: italic">// trata exceção</span>
} <span style="color: #008000; font-weight: bold">finally</span> {
    <span style="color: #008000; font-weight: bold">if</span> (reader <span style="color: #666666">!=</span> <span style="color: #008000; font-weight: bold">null</span>) {
        <span style="color: #008000; font-weight: bold">try</span> {
            reader.<span style="color: #7D9029">close</span>();
        } <span style="color: #008000; font-weight: bold">catch</span> (IOException ioe) {
            <span style="color: #408080; font-style: italic">// trata exceção</span>
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Como esse código tem muito <em>boilerplate</em> (código sem significado único, repetido), o Java 7 trouxe um recurso na sintaxe chamado <em>try-with-resources</em>. Agora todo inicio de um <em>try-catch</em> é possível declarar um ou mais objetos que devem implementar a nova interface chamada <code>AutoCloseable</code>. Como esse é um recurso da linguagem, a interface <code>AutoCloseable</code> não faz parte do pacote <code>java.io</code>, ao contrário da interface <code>Closeable</code>, mas do package <code>java.lang</code>. Assim o bloco finally poderia ser removido sem prejuízo nenhum a lógica do programa.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">try</span> (Reader reader <span style="color: #666666">=</span> <span style="color: #408080; font-style: italic">/* inicia reader */</span>) {
    <span style="color: #408080; font-style: italic">// lê dados</span>
} <span style="color: #008000; font-weight: bold">catch</span> (IOException ioe) {
    <span style="color: #408080; font-style: italic">// trata exceção</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Agora que sabemos que (1) objetos de I/O devem liberar recursos e que as classes de I/O são do tipo <code>Closeable</code>, observe as principais classes do pacote. Vamos explorar um pouco delas.</p>
</div>
<div id="cap-05-io-read" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-05/IO-Read.png" alt="IO Read">
</div>
<div class="title">Figura 5. Java I/O classes de leitura</div>
</div>
<div id="cap-05-io-write" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-05/IO-Write.png" alt="IO Write">
</div>
<div class="title">Figura 6. Java I/O classes de escrita</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_casos-de-uso">Casos de Uso</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Para explorar melhor essas classes, vamos dividir o pacote em 5 casos de usos bem comuns para biblioteca I/O.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Como ler um arquivo?</p>
</li>
<li>
<p>Como escrever um arquivo?</p>
</li>
<li>
<p>Como ler dados do console?</p>
</li>
<li>
<p>Como ler/escrever em Socket?</p>
</li>
<li>
<p>Lidando objetos complexos</p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="_1-como-ler-um-arquivo">1. Como ler um arquivo?</h3>
<div class="paragraph">
<p>Falamos anteriormente que a diferença entre um InputStream e um Reader é que o InputStream trabalha com bytes enquanto o Reader com caracteres. Agora vamos mostrar um exemplo prático? Imagina que você tem um arquivo texto em formato JSON, como fazer pra o ler? Se pensou em ler usando um Reader&#8230;&#8203; vá com calma! A primeira coisa a fazer é decidir qual biblioteca vai ser usada para ler o JSON. A escolha deve começar pelo elemento mais complexo.</p>
</div>
<div class="paragraph">
<p>Para se ler um JSON, temos uma biblioteca praticamente onipresente: <a href="https://github.com/FasterXML/jackson-databind/">Jackson Databind</a>! O coração dessa biblioteca é a classe <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html">ObjectMapper</a> e ela define várias formas de se escrever em arquivo, a forma mais fácil nem chega a usar Stream ou Readers. O código abaixo foi retirado a própria documentação do ObjectMapper, observe que não se usa nem InputStream/OutputStream ou Readers/Writers.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">final</span> ObjectMapper mapper <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ObjectMapper(); <span style="color: #408080; font-style: italic">// can use static singleton, inject: just make sure to reuse!</span>
MyValue value <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> MyValue();
<span style="color: #408080; font-style: italic">// ... and configure</span>
File newState <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> File(<span style="color: #BA2121">&quot;my-stuff.json&quot;</span>);
mapper.<span style="color: #7D9029">writeValue</span>(newState, value); <span style="color: #408080; font-style: italic">// writes JSON serialization of MyValue instance</span>
<span style="color: #408080; font-style: italic">// or, read</span>
MyValue older <span style="color: #666666">=</span> mapper.<span style="color: #7D9029">readValue</span>(<span style="color: #008000; font-weight: bold">new</span> File(<span style="color: #BA2121">&quot;my-older-stuff.json&quot;</span>), MyValue.<span style="color: #7D9029">class</span>);

<span style="color: #408080; font-style: italic">// Or if you prefer JSON Tree representation:</span>
JsonNode root <span style="color: #666666">=</span> mapper.<span style="color: #7D9029">readTree</span>(newState);
<span style="color: #408080; font-style: italic">// and find values by, for example, using a JsonPointer expression:</span>
<span style="color: #B00040">int</span> age <span style="color: #666666">=</span> root.<span style="color: #7D9029">at</span>(<span style="color: #BA2121">&quot;/personal/age&quot;</span>).<span style="color: #7D9029">getValueAsInt</span>();</code></pre>
</div>
</div>
<div class="paragraph">
<p>Mas isso não impede que se use eles para ler dados de um arquivo. A primeira missão que temos é mapear o objeto que devemos ler como um POJO. Em um projeto pessoal eu criei uma interface para inspecionar Cluster Kafka, o <a href="https://blog.vepo.dev/projects/kafka-tool">Kafka Tool</a>. Nesse projeto, todas as configurações são salvas em arquivos JSON no diretório <code>~/.kafka-tool</code> (arquivos começados com <code>.</code> são considerados ocultos no Linux), assim para armazenar as informações de Brokers é preciso primeiro mapear um broker. Depois de mapeador o broker é preciso carregar a lista de brokers do arquivo, para isso basta usar o código abaixo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Path kafkaToolConfigPath <span style="color: #666666">=</span> PAths.<span style="color: #7D9029">get</span>(System.<span style="color: #7D9029">getProperty</span>(<span style="color: #BA2121">&quot;user.home&quot;</span>), <span style="color: #BA2121">&quot;.kafka-tool&quot;</span>);
<span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>kafkaToolConfigPath.<span style="color: #7D9029">toFile</span>().<span style="color: #7D9029">exists</span>()) {

    Path propertiesPath <span style="color: #666666">=</span> kafkaToolConfigPath.<span style="color: #7D9029">resolve</span>(<span style="color: #BA2121">&quot;kafka-properties.json&quot;</span>);
    <span style="color: #008000; font-weight: bold">if</span> (propertiesPath.<span style="color: #7D9029">toFile</span>().<span style="color: #7D9029">exists</span>()) {
        <span style="color: #008000; font-weight: bold">try</span> (BufferedReader reader <span style="color: #666666">=</span> Files.<span style="color: #7D9029">newBufferedReader</span>(propertiesPath)) {
            <span style="color: #008000; font-weight: bold">return</span> Optional.<span style="color: #7D9029">of</span>(reader.<span style="color: #7D9029">lines</span>()
                                     .<span style="color: #7D9029">collect</span>(Collectors.<span style="color: #7D9029">joining</span>()))
                           .<span style="color: #7D9029">filter</span>(Predicate.<span style="color: #7D9029">not</span>(String::isBlank))
                           .<span style="color: #7D9029">flatMap</span>(value <span style="color: #666666">-&gt;</span> handleIoException(() <span style="color: #666666">-&gt;</span> mapper.<span style="color: #7D9029">readValue</span>(value, KafkaBroker<span style="color: #666666">[]</span>.<span style="color: #7D9029">class</span>)));
        } <span style="color: #008000; font-weight: bold">catch</span> (IOException e) {
            logger.<span style="color: #7D9029">error</span>(<span style="color: #BA2121">&quot;Error reading file!&quot;</span>, e);
        }
    }
}
<span style="color: #008000; font-weight: bold">return</span> Optional.<span style="color: #7D9029">empty</span>();</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para ler usamos um <a href="https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html"><code>BufferedReader</code></a> porque ele permite ler todo o arquivo em texto facilmente, para isso usamos a o método <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newBufferedReader-java.nio.file.Path-"><code>Files.newBufferedReader</code></a>, que pode ser lido através do método <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html#readValue-java.lang.String-java.lang.Class-"><code>ObjectMapper.readValue</code></a> que aceita <code>String</code>. Mas também podíamos abrir um <code>InputStream</code> usando <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newInputStream-java.nio.file.Path-java.nio.file.OpenOption&#8230;&#8203;-"><code>Files.newInputStream</code></a> e usar ele diretamente como parâmetro <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html#readValue-java.io.InputStream-java.lang.Class-"><code>ObjectMapper.readValue</code></a></p>
</div>
</div>
<div class="sect2">
<h3 id="_2-como-escrever-um-arquivo">2. Como escrever um arquivo?</h3>
<div class="paragraph">
<p>De forma bem similar podemos escreve em arquivos usando as mesmas APIs.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Path kafkaToolConfigPath <span style="color: #666666">=</span> PAths.<span style="color: #7D9029">get</span>(System.<span style="color: #7D9029">getProperty</span>(<span style="color: #BA2121">&quot;user.home&quot;</span>), <span style="color: #BA2121">&quot;.kafka-tool&quot;</span>);
<span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>kafkaToolConfigPath.<span style="color: #7D9029">toFile</span>().<span style="color: #7D9029">exists</span>()) {
    kafkaToolConfigPath.<span style="color: #7D9029">toFile</span>().<span style="color: #7D9029">mkdir</span>();
}

Path propertiesPath <span style="color: #666666">=</span> kafkaToolConfigPath.<span style="color: #7D9029">resolve</span>(<span style="color: #BA2121">&quot;kafka-properties.json&quot;</span>);
ObjectMapper mapper <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ObjectMapper().<span style="color: #7D9029">enable</span>(SerializationFeature.<span style="color: #7D9029">INDENT_OUTPUT</span>)
<span style="color: #008000; font-weight: bold">try</span> (BufferedWriter writer <span style="color: #666666">=</span> Files.<span style="color: #7D9029">newBufferedWriter</span>(propertiesPath, StandardOpenOption.<span style="color: #7D9029">CREATE</span>, StandardOpenOption.<span style="color: #7D9029">TRUNCATE_EXISTING</span>)) {
    writer.<span style="color: #7D9029">write</span>(mapper.<span style="color: #7D9029">writeValueAsString</span>(brokers));
} <span style="color: #008000; font-weight: bold">catch</span> (IOException e) {
    logger.<span style="color: #7D9029">error</span>(<span style="color: #BA2121">&quot;Error saving file!&quot;</span>, e);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para escrever usamos um <a href="https://docs.oracle.com/javase/8/docs/api/java/io/BufferedWriter.html"><code>BufferedWriter</code></a>, através do <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newBufferedWriter-java.nio.file.Path-java.nio.file.OpenOption&#8230;&#8203;-"><code>Files.newBufferedWriter</code></a>, porque é uma opção viável para se usar com <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html#writeValueAsString-java.lang.Object-"><code>ObjectMapper.writeValueAsString</code></a>. Mas da mesma forma podíamos usar <a href="https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html"><code>OutputStream</code></a>, através do <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newOutputStream-java.nio.file.Path-java.nio.file.OpenOption&#8230;&#8203;-"><code>Files.newOutputStream</code></a>, porque também é uma opção viável para se usar com <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html#writeValueAsBytes-java.lang.Object-"><code>ObjectMapper.writeValueAsBytes</code></a></p>
</div>
</div>
<div class="sect2">
<h3 id="_3-como-ler-dados-do-console">3. Como ler dados do console?</h3>
<div class="paragraph">
<p>Toda aplicação pode rodar em modo de linha de comando. Linha de comando é bastante útil porque possibilita que as aplicações sejam integradas a scripts de execução seguindo a Filosofia Unix: <strong><em>Escreva programas para lidar com fluxos de texto, porque essa é uma interface universal</em></strong>.</p>
</div>
<div class="paragraph">
<p>A primeira informação importante é saber que os streams de entrada, saída e erro estão expostos como variáveis globais na classe <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html"><code>System</code></a>. Assim podemos facilmente escrever um programa que lê da linha de comando com algumas linhas.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">try</span>(BufferedReader reader <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> BufferedReader(<span style="color: #008000; font-weight: bold">new</span> InputStreamReader(System.<span style="color: #7D9029">in</span>))) {
    String name <span style="color: #666666">=</span> reader.<span style="color: #7D9029">readLine</span>();
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(name);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Esse código é certo e funciona, mas existe uma outra classe que facilita em muito o tratamento de dados que vem do console, é a classe <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html"><code>Scanner</code></a>. Com ela é possível tratar os dados de entrada de forma mais fácil. Por exemplo se eu quiser fazer um programa para lê números do console, é possível fazer com poucas linhas.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">try</span>(Scanner in <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Scanner(System.<span style="color: #7D9029">in</span>)) {
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">print</span>(<span style="color: #BA2121">&quot;Qual o seu nome? &quot;</span>);
    String nome <span style="color: #666666">=</span> in.<span style="color: #7D9029">nextLine</span>();
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">print</span>(<span style="color: #BA2121">&quot;Quantos anos você tem? &quot;</span>);
    <span style="color: #B00040">int</span> idade <span style="color: #666666">=</span> in.<span style="color: #7D9029">nextInt</span>();
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Oi &quot;</span> <span style="color: #666666">+</span> nome <span style="color: #666666">+</span> <span style="color: #BA2121">&quot;! Você tem &quot;</span> <span style="color: #666666">+</span> idade <span style="color: #666666">+</span> <span style="color: #BA2121">&quot; anos!&quot;</span>);
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_4-como-lerescrever-em-socket">4. Como ler/escrever em Socket?</h3>
<div class="paragraph">
<p>Sockets devem ser usados com parcimônia! Sockets permitem que dois processos se comuniquem entre si através de uma conexão TCP direta. O problema em usar Sockets é que em muitos casos você pode estar reimplementando um protocolo já conhecido. Mas as vantagens de se usar socket é que seu programa vai ter liberdade de se comunicar. Quando temos dois programas se comunicando por socket um deles será o cliente e o outro será o servidor, é o que chamamos de Socket Server.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Caso de Uso</div>
Eu já implementei um caso de uso bastante complexo usando Socket, mas era porque tínhamos um servidor de geração de voz. Os clientes enviavam texto e outros parâmetros e recebiam de volta Stream de dados de acordo com o formato requerido (MP3, WAV, etc&#8230;&#8203;).
</div>
</div>
<div class="paragraph">
<p>Não vamos entrar aqui em detalhes sobre como a classe Socket funciona, mas ao abrir um socket, ela vai dispor de dois Stream para leitura e escrita de dados. Assim podemos ter o servidor abaixo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>AtomicBoolean running <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> AtomicBoolean(<span style="color: #008000; font-weight: bold">true</span>);
ExecutorService threadPool <span style="color: #666666">=</span> Executors.<span style="color: #7D9029">newFixedThreadPool</span>(<span style="color: #666666">10</span>); <span style="color: #408080; font-style: italic">// thread para processar socket</span>
<span style="color: #008000; font-weight: bold">try</span>(ServerSocket server <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ServerSocket(<span style="color: #666666">5555</span>)) {            <span style="color: #408080; font-style: italic">// abre socket na porta 5555</span>
    <span style="color: #008000; font-weight: bold">while</span> (running.<span style="color: #7D9029">get</span>()) {
        Socket socket <span style="color: #666666">=</span> server.<span style="color: #7D9029">accept</span>();                       <span style="color: #408080; font-style: italic">// conexão aberta com cliente</span>
        threadPool.<span style="color: #7D9029">submit</span>(() <span style="color: #666666">-&gt;</span> {                              <span style="color: #408080; font-style: italic">// Se não tratar dentro de uma thread não é possível abrir outras conexões</span>
            <span style="color: #008000; font-weight: bold">try</span> {
                process(socket.<span style="color: #7D9029">getInputStream</span>(),               <span style="color: #408080; font-style: italic">// encapsula toda comunicação</span>
                        socket.<span style="color: #7D9029">getOutputStream</span>());
            } <span style="color: #008000; font-weight: bold">finally</span> {
                socket.<span style="color: #7D9029">close</span>();                               <span style="color: #408080; font-style: italic">// Só fecha o socket depois de finalizada a comunicação</span>
            }
        });
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Já o cliente é um pouco mais simples porque não se espera que ele se conecte com mais de um servidor.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">try</span> (Socket socket <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Socket(<span style="color: #BA2121">&quot;localhost&quot;</span>, <span style="color: #666666">5555</span>)) {
    process(socket.<span style="color: #7D9029">getInputStream</span>(), socket.<span style="color: #7D9029">getOutputStream</span>());
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Eu não recomendo a você escrever um servidor socket em nenhuma hipótese. Caso você tenha um protocolo complexo que deve ser feito através de um servidor socket, eu recomendo usar o projeto <a href="https://netty.io/">Netty</a> para que você consiga focar nas regras de negócios deixando funcionalidades como serialização, controle de threads e segurança como responsabilidade da biblioteca.</p>
</div>
</div>
<div class="sect2">
<h3 id="_5-lidando-objetos-complexos">5. Lidando objetos complexos</h3>
<div class="paragraph">
<p>Se você foi atento deve ter reparado que no diagrama de classe tem duas classes que parecem bastante úteis: <a href="https://docs.oracle.com/javase/8/docs/api/java/io/ObjectInputStream.html"><code>ObjectInputStream</code></a> e <a href="https://docs.oracle.com/javase/8/docs/api/java/io/ObjectOutputStream.html"><code>ObjectOutputStream</code></a>. Essas duas classes permitem serializar qualquer objeto da JVM e enviar para outra JVM, é por causa dessas classes que existe a interface <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html"><code>Serializable</code></a> a qual eu citei na minha primeira pergunta e até agora não respondi. Pois vamos entender o motivo de deixar essa resposta por último?</p>
</div>
<div class="paragraph">
<p>Para serializar um objeto eu devo usar a interface <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html"><code>Serializable</code></a>? Não! Você pode usar qualquer biblioteca com formatos de serialização que são compreendidos por várias linguagens. A interface <code>Serializable</code> é usada para serializar objetos que só podem ser carregados na JVM através das classes <code>ObjectInputStream</code> e <code>ObjectOutputStream</code>. MAS essas classes não deve ser usadas porque elas tem várias falhas de segurança que podem ser exploradas. Então resposta curta: <strong>Não use essas classes!</strong></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-05-proximos-passos">Próximos passos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Eu espero que você tenha compreendido que como ler dados de várias fontes como arquivos ou sockets. Agora é hora de você aprender a usar bibliotecas de leituras de arquivos. Recomendo que você explore a biblioteca Jackson, assim como outras bibliotecas para se escrever JSON. Um bom exercício é comparar a performance de escrita entre várias bibliotecas e escolher a que você vai usar sempre.</p>
</div>
<div class="paragraph">
<p>Outros exercícios são tentar conhecer a biblioteca de leitura e XML, <a href="https://yaml.org/">YAML</a>, <a href="https://toml.io/en/">TOML</a> ou qualquer outro formato que lhe interessar.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Tutorial" /><category term="I/O" /><summary type="html"><![CDATA[Quais são as bibliotecas para leitura de arquivos em Java? O que significa ler e escrever em um programa? A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">OO: Eu vejo objetos por todos os cantos!</title><link href="https://blog.vepo.dev/posts/java-101-objetos" rel="alternate" type="text/html" title="OO: Eu vejo objetos por todos os cantos!" /><published>2022-05-30T00:00:00+00:00</published><updated>2022-05-30T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/11-15-00-java101-objetos</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-objetos"><![CDATA[<div class="paragraph">
<p>Java tem um fã clube enorme! São pessoas que usam a linguagem no dia a dia e resolvem problemas importantes para a nossa sociedade. Quando Java completou 25 anos houve até a hashtag <a href="https://twitter.com/search?q=lang%3Apt%20%23MovedByJava&amp;src=typed_query&amp;f=top">#MovedByJava</a> para mostrar que o mundo é movido por software desenvolvido em Java, são bilhões de transações em Java em serviços altamente escaláveis.</p>
</div>
<div class="paragraph">
<p>MAS&#8230;&#8203; existe um pequeno grupo raivoso e ruidoso que <a href="https://twitter.com/search?q=java%20lento&amp;src=typed_query&amp;f=live">odeia Java</a>. Eu não desejaria nem citar esse grupo, mas creio que isso tem que estar em qualquer tutorial de Java, não para dar voz a esse povo, mas para desmentir. Java não é lento, talvez você que não está sabendo usar e vamos mais a frente falar sobre <em>tuning</em>. Essas pessoas usam argumentos bem simples como "tudo tem que estar em objetos", "eu tenho que escrever um main dentro de um objeto", "nada disso faz sentido"&#8230;&#8203; Resolvi citar eles aqui, porque eles não odeiam Java, eles odeiam Orientação a Objetos e com esse post eu vou te convencer que além de ser uma ótima forma de pensar, Orientação a Objetos ajudou a pavimentar os outros paradigmas que estão por aqui no ano de 2022.</p>
</div>
<div class="sect1">
<h2 id="cap-04-um-pouco-de-historia">Um pouco de história</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Orientação a Objetos surgiu nos anos 60 e era usado para fazer simulações no Simula 67. Esta linguagem, por sua vez, acabou por influenciar o C (1979), que na verdade é uma tentativa de adicionar objetos a linguagem C. Por muitos anos o C foi uma das linguagens mais influentes do mercado, ela não era, puramente, uma linguagem orientada a objetos, era até possível intercalar código C com código C++. A primeira linguagem que surge como puramente orientada a objetos e ainda por cima compilada em <em>bytecode</em> para ser executado em uma Máquina Virtual foi&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>PAUSA DRAMÁTICA&#8230;&#8203; 🥶</p>
</div>
<div class="paragraph">
<p>O Smalltalk! O que foi? 🧐 Achou que era o Java? O Java só surge em 1991, e em seu lançamento em 1995, e acaba herdando muitas características do Smalltalk, tanto que muitas pessoas da comunidade Java vieram do mundo Smalltalk. E uma das coisas que Java herda é ser primariamente orientada a objetos.</p>
</div>
<div class="paragraph">
<p><em>— Mas porque essa preocupação em ser Orientada a Objetos?!</em></p>
</div>
<div class="paragraph">
<p>Porque na verdade a computação não começou com essas linguagens e nem com esses paradigmas, mas como Programação Funcional (ver <em><a href="https://dl.acm.org/doi/abs/10.1145/72551.72554">Conception, evolution, and application of functional programming languages</a></em>). Linguagens funcionais são excelentes para modelarem problemas matemáticos e alguns problemas computacionais, pois elas são declarativas. Podemos transpor a definição de um problema para a linguagem de programação facilmente, podendo até mesmo aplicar uma lógica equacional, pois, se as funções são puras, o valor de <code>f(x)</code> só precisa ser calculado uma vez. Logica equacional é o mesmo que tratar uma função como uma equação matemática, isso implica que símbolos iguais terão valores iguais.</p>
</div>
<div class="paragraph">
<p>MAS linguagens funcionais apresentam uma certa dificuldade de modelar alguns tipos de sistemas e, com a popularização da computação, foi necessário outros paradigmas para os novos sistemas que foram sendo desenvolvidos. O primeiro desses paradigmas foi a Programação Procedural, popularizado pela linguagens como C. Nesse tipo de linguagem a lógica de programação pode ser estruturada dentro de procedimentos que podem ser tanto funções quanto procedimentos, a diferença entre os dois é que uma função não altera o valor dos parâmetros e sempre retorna um valor, já os procedimentos alteram o valor dos parâmetros e não retornam nenhum valor. Em C, podemos escrever tanto funções quanto procedimentos.</p>
</div>
<div class="paragraph">
<p>Linguagens procedurais apresentam bastante dificuldade para encapsular complexidade porque é difícil criar abstrações com ela. Em C, os dados são sempre modelados usando tipos primitivos ou estruturas, que nada mais são que agrupamentos de tipos primitivos. Mesmo quem desenvolve C hoje em dia, não consegue compreender o que era desenvolver nos anos 70, pois a linguagem continuou avançando. Eu tenho uma leve ideia porque, na universidade, desenvolvi programas para um microcontrolador com o compilador bem limitado. O exemplo abaixo eu retirei de um <a href="https://github.com/vepo/csvi">visualizador de CSV</a> que eu desenvolvi por necessidade.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="c"><span></span>matrix_config_t <span style="color: #666666">*</span><span style="color: #0000FF">matrix_config_initialize</span>(<span style="color: #B00040">size_t</span> width, <span style="color: #B00040">size_t</span> height)
{
    matrix_config_t <span style="color: #666666">*</span>config <span style="color: #666666">=</span> (matrix_config_t <span style="color: #666666">*</span>)malloc(<span style="color: #008000; font-weight: bold">sizeof</span>(matrix_config_t));
    config<span style="color: #666666">-&gt;</span>columns <span style="color: #666666">=</span> width;
    config<span style="color: #666666">-&gt;</span>heights <span style="color: #666666">=</span> height;
    config<span style="color: #666666">-&gt;</span>column_width <span style="color: #666666">=</span> (<span style="color: #B00040">size_t</span> <span style="color: #666666">*</span>)calloc(width, <span style="color: #008000; font-weight: bold">sizeof</span>(<span style="color: #B00040">size_t</span>));
    config<span style="color: #666666">-&gt;</span>line_height <span style="color: #666666">=</span> (<span style="color: #B00040">size_t</span> <span style="color: #666666">*</span>)calloc(height, <span style="color: #008000; font-weight: bold">sizeof</span>(<span style="color: #B00040">size_t</span>));
    <span style="color: #008000; font-weight: bold">return</span> config;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Observe que no código há a preocupação de se alocar a posição de memória necessária para uma determinada estrutura chamada <code>matriz_config_t</code> e que essa alocação é feita através de duas funções diferentes <code>calloc</code> e <code>malloc</code>. Esse código pode parecer simples, mas tem diversidades camadas de complexidades, como simplesmente diferenciar essas duas funções.</p>
</div>
<div class="paragraph">
<p><em>— Aonde você quer chegar?!?!</em></p>
</div>
<div class="paragraph">
<p>Ora! Qual é o objetivo de um desenvolvedor?</p>
</div>
<div class="paragraph">
<p><em>— Escrever código!</em></p>
</div>
<div class="paragraph">
<p>Errado! O objetivo de um desenvolvedor é resolver problemas através da escrita de código. Por isso, desenvolvedores não podem e não devem ficar preocupado com complexidades desnecessária. É para remover essa complexidade que surgem linguagens Orientadas a Objetos. As linguagens procedurais são simples e com poucas funcionalidades, por isso toda a informação é armazenada de forma simplória em estruturas. Isso gera complexidade e o objetivo principal de uma linguagem de programação é encapsular complexidade.</p>
</div>
<div class="paragraph">
<p>Vamos tentar explicar de outra forma&#8230;&#8203;</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-04-o-que-e-poo">O que é Programação Orientada a Objetos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vamos estabelecer algumas hipóteses&#8230;&#8203;.</p>
</div>
<div class="sect2">
<h3 id="_e-se-eu-puder-lidar-com-tipos-complexos">E se eu puder lidar com tipos complexos</h3>
<div class="paragraph">
<p>Uma linguagem OO irá sempre lidar com tipos de dados cada vez mais complexos pois não estamos apenas falando de programação, mas de encapsulamento de complexidades.</p>
</div>
<div class="paragraph">
<p>Vamos supor que eu desejo desenvolver uma API para navegação robótica e eu sei que meu robô tem 4 rodas e que posso definir a velocidade de cada roda. Será que eu preciso saber qual é a velocidade de cada roda? Ou eu posso apenas mandar comandos para o meu robô? Um exemplo de comandos são: "Vá para frente", "Faça uma curva de 30º", "Pare".</p>
</div>
<div class="paragraph">
<p>Quando falamos de Orientação a Objetos, devemos pensar em design de código. Não estamos falando de programação pura, mas de uma modelagem de dados e conceitos. Os detalhes internos devem ser escondidos para quem só sejam visíveis para os próprios times de manutenção.</p>
</div>
</div>
<div class="sect2">
<h3 id="_e-se-eu-puder-associar-comportamento-aos-meus-tipos-complexos">E se eu puder associar comportamento aos meus tipos complexos</h3>
<div class="paragraph">
<p>Todo código tem um contexto para ser executado. Quando eu tenho um robô e eu desejo que ele vá para uma posição, se essa ordem é diferente para cada robô e produz diferentes resultados, mas ela sempre está associada a um robô, ou seja, não faz sentido um outro objeto que não seja um robô se mover (<em>ainda falarei de herança</em>).</p>
</div>
<div class="paragraph">
<p>Mas podem existir outros objetos que se movem, certo? E como fica se a função mover é somente associada a robôs?</p>
</div>
<div class="paragraph">
<p>Em uma linguagem orientada a objetos, não temos funções e nem procedimentos, mas métodos. A diferença é que uma função transforma dados, procedimentos executa uma série de alterações nos parâmetros, mas um método envia uma mensagem (<em>essas definições não tem caráter acadêmico, se alguém tiver alguma referência me manda no Twitter</em>). Logo um método vai pertencer a um objeto, assim se formos modelar um Avião, podemos criar um outro método mover que existirá somente para um Avião e que será diferente do método mover de um robô.</p>
</div>
</div>
<div class="sect2">
<h3 id="_e-se-puder-compartilhar-o-comportamento-entre-tipos-diferentes">E se puder compartilhar o comportamento entre tipos diferentes</h3>
<div class="paragraph">
<p>Objetos tem um tipo especifico, por exemplo nós estamos falando de um robô. Mas eu posso assumir que um robô é um tipo de objeto móvel? Posso eu criar métodos nesse objeto móvel? O que essa implementação desse método faz para um robô é a mesma coisa que se faz para um avião?</p>
</div>
<div class="paragraph">
<p>Para cada pergunta acima, existe uma resposta no mundo da Programação Orientada a Objetos e é o que vamos ver na próxima sessão.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-04-orientacao-a-objetos">Orientação a Objetos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nós falamos um pouco sobre Programação Funcional e Programação Procedural, então vamos definir o que é Programação Orientada a Objetos (POO) antes de ver como Java faz POO.</p>
</div>
<div class="paragraph">
<p>Programação Orientada a Objetos é um modelo de design, analise e desenvolvimento de software que organiza todo o software ao redor dos dados e suas abstrações. Para que isso seja possível, é criado o conceito de Objeto. Um objeto é um componente de software composto de atributos e comportamento.</p>
</div>
<div class="paragraph">
<p>Quando falamos de orientação a objeto, focamos na definição do que é um objeto e das operações que esse objeto pode realizar, ao contrário da lógica necessária para realizar a operação. Os principais benefícios da POO é a reutilização de código, escalabilidade e eficiência no desenvolvimento. Então podemos definir que POO vai ter alguns elementos.</p>
</div>
<div class="sect2">
<h3 id="_elementos">Elementos</h3>
<div class="paragraph">
<p>Abaixo vemos as descrições de cada elemento da POO, elas não se referem a linguagem Java, mas ao paradigma em si.</p>
</div>
<div class="sect3">
<h4 id="_classes">Classes</h4>
<div class="paragraph">
<p><strong>Classes</strong> são tipos de dados definidos pelo usuário que atuam como modelo para objetos, atributos e métodos.</p>
</div>
</div>
<div class="sect3">
<h4 id="_objetos">Objetos</h4>
<div class="paragraph">
<p><strong>Objetos</strong> são instâncias de uma classe criada com dados específicos.</p>
</div>
</div>
<div class="sect3">
<h4 id="cap-04-elementos-metodos">Métodos</h4>
<div class="paragraph">
<p><strong>Métodos</strong> são funções definidas dentro de uma classe que descrevem o comportamento de um objeto. Cada método contido nas definições de classe começa com uma referência a um objeto de instância. Além disso, as sub-rotinas contidas em um objeto são chamadas de métodos de instância. Os programadores usam métodos para reutilização ou para manter a funcionalidade encapsulada dentro de um objeto por vez.</p>
</div>
</div>
<div class="sect3">
<h4 id="_atributos">Atributos</h4>
<div class="paragraph">
<p><strong>Atributos</strong> são definidos no modelo de classe e representam o estado de um objeto. Os objetos terão dados armazenados no campo de atributos. Os atributos de classe pertencem à própria classe.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-04-principios">Princípios</h3>
<div class="paragraph">
<p>Quando falamos em Orientação a Objetos, temos em mente alguns princípios.</p>
</div>
<div class="sect3">
<h4 id="_encapsulamento">Encapsulamento</h4>
<div class="paragraph">
<p>Encapsulamento significa que um objeto não é obrigado a expor a sua implementação e nem os seus atributos. Cabe ao design do objeto escolher como será feita essa exposição. Essa característica de ocultação de dados fornece maior segurança ao programa e evita corrupção de dados não intencional.</p>
</div>
</div>
<div class="sect3">
<h4 id="_abstração">Abstração</h4>
<div class="paragraph">
<p>Objetos criam abstrações que tornam possível controlar a complexidade. Ao se criar uma classe, o restante do sistema deverá interagir através da interface que ela propõe não tendo acesso a sua lógica interna.</p>
</div>
</div>
<div class="sect3">
<h4 id="cap-04-principios-heranca">Herança</h4>
<div class="paragraph">
<p>As classes podem reutilizar o código de outras classes. Relacionamentos e subclasses entre objetos podem ser atribuídos, permitindo que os desenvolvedores reutilizem a lógica comum enquanto ainda mantêm uma hierarquia única. Essa propriedade da OOP força uma análise de dados mais completa, reduz o tempo de desenvolvimento e garante um maior nível de precisão.</p>
</div>
</div>
<div class="sect3">
<h4 id="_polimorfismo">Polimorfismo</h4>
<div class="paragraph">
<p>Os objetos são projetados para compartilhar comportamentos e podem assumir mais de uma forma. O sistema poderá definir como vê um objeto e como interage por ele baseado na sua própria classe ou em alguma classe pai, reduzindo a complexidade ou a necessidade de duplicar código. Quando uma classe filha é criada, que estende a funcionalidade da classe pai, ambas podem ser tratada pelo mesmo código usando a classe pai como interface. O polimorfismo permite que diferentes tipos de objetos usem a mesma interface.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_como-java-faz-programação-orientada-a-objetos">Como Java faz Programação Orientada a Objetos</h3>
<div class="paragraph">
<p>Java é uma linguagem primariamente orientada a objetos, logo você deve primeiro entender o que é uma classe. Classe é o arquétipo de um objeto. Arquétipo, resumidamente, é o tipo comum de algo. Por exemplo, se eu falar que existe o tipo Gato, você vai imaginar o formato desse animal e algumas outras características, mas se eu falar que existe o Garfield você vai imaginar que ele é um Gato laranja, gordo e preguiçoso. O Garfield é um indivíduo do arquétipo Gato.</p>
</div>
<div id="significado-arquetipo" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-04/arquetipo.png" alt="arquetipo">
</div>
<div class="title">Figura 1. Significado de Arquétipo da Wikipedia</div>
</div>
<div class="paragraph">
<p>Vamos transpor isso pra Java? Podemos ter uma classe Gato, mas o objeto será um Garfield. Assim, podemos ter&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">package</span> <span style="color: #0000FF; font-weight: bold">org.animais.mamiferos</span>;

<span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">org.fisica.luz.Cor</span>;
<span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">org.animais.psique.Temperamento</span>;

<span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gato</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #B00040">float</span> pesoEmKg;
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Cor cor;
    <span style="color: #008000; font-weight: bold">private</span> Temperamento temperamento;
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #0000FF">Gato</span>(<span style="color: #B00040">float</span> pesoEmKg, Cor cor, Temperamento temperamento) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">pesoEmKg</span> <span style="color: #666666">=</span> pesoEmKg;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">cor</span> <span style="color: #666666">=</span> cor;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">temperamento</span> <span style="color: #666666">=</span> temperamento;
    }

    <span style="color: #408080; font-style: italic">// MÉTODOS</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Isso significa que podemos modelar qualquer Gato por esse modelo, assim se quisermos ter um Garfield&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Gato garfield <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Gato(<span style="color: #666666">15.0</span>, Cor.<span style="color: #7D9029">LARANJA</span>, Temperamento.<span style="color: #7D9029">PREGUICOSO</span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>No primeiro trecho de código tempo a declaração da classe <code>Gato</code> no pacote <code>org.animais.mamiferos</code>. Isso significa que só pode existir um tipo de <code>Gato</code> nesse pacote, mas isso não implica que eu possa criar o tipo <code>Gato</code> para descrever, por exemplo, <em>instalações elétricas não-oficiais</em>, que obviamente não fazem parte do pacote <code>org.animais.mamiferos</code>, mas <code>org.humanos.civilizacoes.brasil.infraestrutura</code>. Classe é usada para definir o tipo do objeto, mas o pacote é o contexto na qual ele existe. Classe e Pacote tem uma relação umbilical, uma Classe sempre deve estar ligada a um Pacote.</p>
</div>
<div class="paragraph">
<p>A segunda coisa que vamos detalhar nesse trecho de código são os modificadores de acesso. Como disse uma linguagem orientada a objetos é usada para se encapsular detalhes, logo os modificadores de acesso servem para definir quem pode acessar o quê. Eles podem ser aplicados para Classes, Métodos e Campos e existem os seguintes modificadores de acesso.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Tipo</th>
<th class="tableblock halign-center valign-top">Token</th>
<th class="tableblock halign-left valign-top">Descrição</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Package Private</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Define que o elemento será acessível dentro do pacote. Esse é o modificador padrão, isso significa que nesse caso pode ser omitido.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Privado</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>private</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Define que o elemento só pode ser acessado dentro da própria classe.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Protegido</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>protected</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Define que o elemento é acessível dentro do mesmo pacote ou através de herança.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Público</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>public</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Define que o elemento é acessível em qualquer contexto.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Final</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>final</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Se aplicada a classe, ela não poderá ser estendida. Se aplicada a um campo ele não poderá ter seu valor alterado. Se aplicado a um método, ele não poderá ser reimplementado em uma classe que herda ele.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Estático</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>static</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Pode ser usado tanto em campos como em classes internas. Se usado no campo, ele vai ter apenas um valor e está associado a classe. Campos não estáticos são associados a objetos. Se aplicado a classes internas, ela não dependerá de um objeto.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Ainda existem dois mais dois modificadores (<code>volatile</code> e <code>transiente</code>), mas eles não são importantes quando falamos de OO. <code>transiente</code> será importante quando falarmos de serialização e <code>volatile</code> quando falarmos de threads. Dos outros, podemos agrupar o <code>private</code>, <code>protected</code>, <code>public</code> e a ausência de um desses, pois eles são mutualmente excludentes.</p>
</div>
<div class="paragraph">
<p>O próximo ponto que podemos falar é sobre métodos. Em Java não é comum termos funções puras, nem linguagem está preparada para isso. Temos basicamente dois tipos de métodos. Os métodos de instância são aqueles que são associados a um objeto. E os métodos estáticos são aqueles associados a uma classe, sem depender de uma instância. Conseguimos criar métodos estáticos usando o modificador de acesso <code>static</code>. Quando um método não é estático, podemos usar <code>this</code> para se referir a instância com a qual o método é associado.</p>
</div>
<div class="paragraph">
<p>Métodos sempre tem parâmetros e valor de retorno (pode ser <code>void</code> que significa um vazio existencial, diferente do vazio de posição que é a palavra <em>empty</em>). Métodos de instância sempre vão te acesso a um objeto específico (usando o <code>this</code>), enquanto métodos estáticos não o são.</p>
</div>
<div class="paragraph">
<p>Vamos ver melhor como os métodos funcionam? E se nós criássemos 3 métodos na nossa classe gato. O primeiro seria um método para mesclar características de 2 gatos, o segundo seria o método <code>meow</code> e o terceiro o método de reprodução (<code>cruza</code>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gato</span> {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Gato <span style="color: #0000FF">mistura</span>(Gato gatoA, Gato gatoB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> gatoC;
    }

    <span style="color: #408080; font-style: italic">// Campos, construtores, getters e setters</span>

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">meow</span>() {
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Miau!&quot;</span>);
    }

    <span style="color: #008000; font-weight: bold">public</span> Gato <span style="color: #0000FF">cruza</span>(Felino outro) {
        <span style="color: #008000; font-weight: bold">if</span> ((<span style="color: #666666">!</span>(outro <span style="color: #008000; font-weight: bold">instanceof</span> Gato)) <span style="color: #666666">||</span> sexo <span style="color: #666666">==</span> outro.<span style="color: #7D9029">sexo</span>) {
            <span style="color: #008000; font-weight: bold">throw</span> <span style="color: #008000; font-weight: bold">new</span> CruzamentoException(<span style="color: #BA2121">&quot;Não é possível gerar filhote!&quot;</span>);
        }
        <span style="color: #008000; font-weight: bold">return</span> mistura(<span style="color: #008000; font-weight: bold">this</span>, outro);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>O método <code>meow</code> é o exemplo clássico que veremos em herança, ele não retorna nada, só executa uma ação. Aqui vamos focar nos métodos <code>cruza</code> e <code>mistura</code> (ok, focar na parte reprodutiva foi péssimo&#8230;&#8203; mas estou falando de gatos!). <code>mistura</code> é um método que aleatoriamente vai gerar um novo gato baseado nas características de dois gatos. Nele podemos ver que o método recebe dois parâmetros e retorna um valor. No caso desse método, estamos retornando um novo objeto, mas nada impede de o retorno ser um dos parâmetros. Outra característica é que os parâmetros são uma passagem por referência e não por valor como vamos ver um pouco mais a frente. Sobre o método <code>cruza</code>, nele podemos acessar os campos do objeto local e campos da referência. Quero ressaltar o uso do <code>this</code> que é a forma de acessar a referência ao objeto pela qual o método é referenciado, o <code>this</code> não pode ser usado para métodos estáticos.</p>
</div>
<div class="sect3">
<h4 id="cap-04-principios-heranca-implemenacao">Como Java implementa Herança</h4>
<div class="paragraph">
<p>Falamos sobre classes e alguns detalhes, mas agora precisamos falar de herança.</p>
</div>
<div class="paragraph">
<p>Temos 3 tipos de classe: a Classe, a Interface e a Classe Abstrata.</p>
</div>
<div class="paragraph">
<p><em>— Peraê! Mas como uma classe pode ser também Interface e Classe Abstrata?!?!? Tem algum erro lógico nessa afirmação!</em></p>
</div>
<div class="paragraph">
<p>Não! Segura essa informação que quando formos falar sobre Reflexão trataremos do conceito interno de Classe. Por enquanto aceite que existem três tipos de classe e um deles é classe. 🤷‍♂️</p>
</div>
<div class="paragraph">
<p>A Interface é quando tempos um contrato de como uma classe deve ser implementada. Ela vai definir a assinatura de alguns métodos. Por assinatura entenda que é a forma como a JVM usa para identificar um método, ela é composta pelo nome do método e a lista de parâmetros. O tipo de retorno não faz parte de uma assinatura e isso vai ser importante mais a frente. Uma interface também pode definir métodos <code>default</code> e métodos <code>static</code>. Uma interface normalmente é usada para definir um tipo, ou comportamento, comum dentro de um sistema.</p>
</div>
<div class="paragraph">
<p>Uma classe abstrata é uma classe que não pode ser instanciada. Normalmente usamos quase abstrata quando desejamos compartilhar comportamento entre vários tipos. Em uma classe abstrata podemos definir variáveis e métodos, mas também podemos definir métodos abstratos (usando o modificador <code>abstract</code>). Ao se declara um método abstrato, estamos declarando apenas a assinatura, a implementação ficará a cargo de alguma classe que estende nossa classe abstrata.</p>
</div>
<div class="paragraph">
<p>E por fim uma classe é uma implementação pela qual podemos instanciar objetos. Classes podem ser estendidas também quando queremos modificar um comportamento específico. Por exemplo, e se quisermos modificar a forma como o Garfield mia?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Gato garfield <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Gato(<span style="color: #666666">15.0</span>, Cor.<span style="color: #7D9029">LARANJA</span>, Temperamento.<span style="color: #7D9029">PREGUICOSO</span>) {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">meow</span>() {
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Miaaaaaaau!&quot;</span>);
    }
};</code></pre>
</div>
</div>
<div class="paragraph">
<p>Quando adicionamos um bloco de código lodo após a instanciação da classe, estamos criando uma classe anônima. Esse comportamento será especifico dessa instância. Nós poderíamos evitar isso usando o modificador <code>final</code> no método ou na classe. Se usarmos no método, nenhuma subclasse poderá estender esse método, mas se usarmos na classe, ela não poderá ser estendida.</p>
</div>
<div class="paragraph">
<p>Quando falamos de herança normalmente usamos as palavras estende e implementa. Estende é quando temos uma classe abstrata sendo estendida, e isso é feito usando a palavra reservada <code>extends</code>. Já implementa é quando temos uma interface sendo implementada pela classe, a palavra reservada <code>implements</code>.</p>
</div>
<div class="paragraph">
<p>O Java tem algumas limitações em heranças. Uma classe SÓ pode estender uma classe, mas pode implementar quantas interfaces forem necessárias. MAS interfaces com mesma assinatura e tipo de retorno diferentes não são possíveis de serem implementas por uma mesma classe. No caso abaixo, temos que um <code>Gato</code> estende um <code>Felino</code> e implementa as interfaces <code>Miador</code> e <code>Ronronador</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gato</span> <span style="color: #008000; font-weight: bold">extends</span> Felino <span style="color: #008000; font-weight: bold">implements</span> Miador, Ronronador {
    <span style="color: #408080; font-style: italic">// Implementação</span>
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-04-conceitos-oo">Conceitos da Orientação a Objetos</h3>
<div class="paragraph">
<p>Agora vamos discutir alguns conceitos comuns da orientação a objetos que podem nos auxiliar no dia a dia.</p>
</div>
<div class="sect3">
<h4 id="_herança">Herança</h4>
<div class="paragraph">
<p>Para entender herança, podemos pensar em herança genética. Todo objeto ele tem um arquétipo e ele vai possuir uma hierarquia de tipos. Um <code>Gato</code> é um <code>Felino</code> que é um <code>Animal</code>. Cada uma dessas classes podem ter comportamentos associados ou apenas assinaturas de métodos. Se voltarmos no post anterior, sobre a biblioteca <code>Collections</code>, vamos ver o mais comum tipo de herança.</p>
</div>
<div id="jdk-lib-collections" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-03/Collections.png" alt="Collections">
</div>
<div class="title">Figura 2. Pacote Java Collections</div>
</div>
<div class="paragraph">
<p>Vamos ver o caso da <code>LinkedList</code> que estende uma <code>AbstractSequentialList</code> e implementa as interface <code>List</code>, <code>Deque</code>, <code>Cloneable</code> e <code>Serializable</code>.</p>
</div>
<div class="paragraph">
<p><code>LinkedList</code> é uma classe, <code>AbstractSequentialList</code> é uma classe abstrata e <code>List</code> uma interface. <code>AbstractSequentialList</code> contém uma implementação de lista que por sua vêz estende uma <code>AbstractList</code>. Podemos dizer que <code>LinkedList</code> herda implementações de <code>AbstractSequentialList</code> e <code>AbstractList</code>. Assim como podemos dizer que <code>LinkedList</code> e <code>ArrayList</code> herdam implementações de <code>AbstractList</code> mesmo tendo comportamentos completamente diferentes.</p>
</div>
<div class="paragraph">
<p>Da mesma forma <code>LinkedList</code> e <code>ArrayList</code> são tipos de <code>List</code>, enquanto apenas <code>LinkedList</code> é um tipo de <code>Deque</code>.</p>
</div>
<div class="paragraph">
<p>Quando temos uma classe que herda tipos de outras classe, podemos definir nossos objetos com o tipo que desejarmos. Eu recomendo sempre usar a interface que você deseja usar e não a implementação final. Quer um exemplo? Vamos imaginar que eu quero definir um método que fará uma busca especifica pelo Gato mais gordo. Ao invés de declarar que desejo receber uma <code>LinkedList</code>, posso declarar que desejo receber apenas uma <code>List</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gatos</span> {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Gato <span style="color: #0000FF">maisGordo</span>(List<span style="color: #666666">&lt;</span>Gato<span style="color: #666666">&gt;</span> gatos) {
        <span style="color: #408080; font-style: italic">// encontra o Garfield aqui que não tem erro.</span>
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Uma dúvida clássica é se perguntar porque não devo usar o tipo mais específico. Nunca devemos usar as classes porque isso limita o uso do nosso código. Ao usar um <code>List</code>, eu posso aceitar qualquer implementação de <code>List</code>, mesmo implementações que eu não conheço. Essa preocupação será muito mais real quando estivermos falando de frameworks em que a geração de código ou classes do tipo proxy são comuns.</p>
</div>
</div>
<div class="sect3">
<h4 id="_override">Override</h4>
<div class="paragraph">
<p>Chamamos de <em>Override</em> a prática de sobrescrever implementações de métodos em classes filhos. Vamos voltar ao nosso exemplo de Gatos, e se existe uma raça especifica de gatos que não mia, são gatos mudos. Como esse característica é muito especifica mas ele definitivamente são gatos, podemos criar essa nova classe de gatos e sobrescrever o método.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">GatoMudo</span> <span style="color: #008000; font-weight: bold">extends</span> Gato {

    <span style="color: #AA22FF">@Override</span>
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">meow</span>() {
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;.&quot;</span>); <span style="color: #408080; font-style: italic">// . significa silêncio</span>
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Se tivermos um objeto da classe <code>GatoMudo</code>, mesmo que ele esteja definido como <code>Gato</code>, será chamado o método da classe <code>GatoMudo</code>.</p>
</div>
<div class="paragraph">
<p>O uso da anotação <code>@Override</code> não é obrigatório, mas é altamente recomendável.</p>
</div>
</div>
<div class="sect3">
<h4 id="_overload">Overload</h4>
<div class="paragraph">
<p>Chamamos de <em>Overload</em> quando criamos um novo método para um tipo diferente de parâmetros. Essa técnica é excelente quando queremos criar métodos semelhantes para tipos diferentes. Vamos supor que nosso método de <code>mistura</code> vai ser migrado para a classe abstrata de animais e que queremos criar esse método para alguns tipos de animais, não para todos, mas ele será diferente para alguns grupos (tem animal que se divide e não reproduz). Assim podemos criar um método mistura para os tipos <code>Mamifero</code>, <code>Ave</code>, <code>Reptil</code> e <code>Peixe</code>, cada método terá uma implementação completamente diferente.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gato</span> {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Mamifero <span style="color: #0000FF">mistura</span>(Mamifero mamiferoA, Mamifero mamiferoB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> mamiferoC;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Ave <span style="color: #0000FF">mistura</span>(Ave aveA, Ave aveB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> aveC;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Reptil <span style="color: #0000FF">mistura</span>(Reptil reptilA, Reptil reptilB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> reptilC;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Peixe <span style="color: #0000FF">mistura</span>(Peixe peixeA, Peixe peixeB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> peixeC;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Nós fizemos <em>overload</em> de um método estático, mas poderíamos ter feito de um método de instância.</p>
</div>
</div>
<div class="sect3">
<h4 id="_hashcode-equals-e-tostring">HashCode, Equals e ToString</h4>
<div class="paragraph">
<p>Uma outra reclamação constante de quem não gosta de Java é a necessidade de se implementar esses três métodos que as vezes parecem inúteis.</p>
</div>
<div class="paragraph">
<p>Primeiro devemos esclarecer que <code>hashCode</code>, <code>equals</code> e <code>toString</code> são métodos extremamente úteis e usados constantemente pela JVM. É sempre recomendável a leitura da documentação da classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Object.html">Object</a> sobre esses três métodos.</p>
</div>
<div class="paragraph">
<p><code>hashCode</code> é um método usado para o calculo do <em>Hash</em> do objeto. O hash é um valor inteiro que será usado para identificar cada objeto. Dois objetos iguais devem ter o mesmo hash, mas dois objetos com o mesmo hash não são iguais. Toda e qualquer classe usando o nome Hash usar esse método, assim se você tem um <code>HashMap</code> ou um <code>HashSet</code>, você tem o uso do método.</p>
</div>
<div class="paragraph">
<p><code>equals</code> é um método usado para se verificar um objeto é igual a outro. Ele é usado por várias algoritmos da JVM, as vezes associado com o hash ou sem associação. Quando temos um <code>HashMap</code> os dois métodos são usados. O <code>equals</code> é usando quando temos o que chamamos de <strong>Colisão de Hash</strong>, dois objetos diferentes que tem o mesmo hash.</p>
</div>
<div class="paragraph">
<p><code>toString</code> é usado para se criar um valor String para a classe. Sempre implemente o toString para melhorar o rastreamento de erros em logs de execução.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-04-passagem-por-valor-e-referencia">Passagem por valor e Passagem por referência</h3>
<div class="paragraph">
<p>Quando estudamos linguagem como C, estudar o tipo de passagem como argumento de uma função é muito importante, porque é possível controlar o que queremos fazer ao se escolher o tipo de parâmetro. Já em Java não nos preocupamos muito, mas em ambas a linguagem temos a possibilidade de se passar um argumento como valor ou como referência. Vamos primeiro definir para depois mostrar como pode ser feito?</p>
</div>
<div class="paragraph">
<p>Falamos de <strong>Passagem por valor</strong> de um argumento para uma função quando ao se alterar o valor desse argumento dentro de um função, essa alteração não é refletida fora da função. Já quando falamos de <strong>Passagem por referência</strong> de um argumento, ao se alterar o valor desse argumento dentro da função ele é refletido fora da função. Fácil de entender? Não?!?!</p>
</div>
<div class="paragraph">
<p>Em C, isso é meio óbvio porque podemos passar o valor ou a referência. Vou tentar mostrar aqui:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="c"><span></span><span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdio.h&gt;</span><span style="color: #BC7A00"></span>

<span style="color: #B00040">int</span> <span style="color: #0000FF">incrementaValor</span>(<span style="color: #B00040">int</span> valor) {
    <span style="color: #008000; font-weight: bold">return</span> valor <span style="color: #666666">+</span> <span style="color: #666666">1</span>;
}

<span style="color: #B00040">int</span> <span style="color: #0000FF">incrementaReferencia</span>(<span style="color: #B00040">int</span> <span style="color: #666666">*</span> valor) {
    (<span style="color: #666666">*</span>valor)<span style="color: #666666">++</span>
    <span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">*</span>valor;
}

<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>() {
    <span style="color: #B00040">int</span> contador <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
    printf(<span style="color: #BA2121">&quot;Valor: %d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, incrementaValor(contador));  <span style="color: #408080; font-style: italic">// Imprime &quot;Valor: 1&quot;</span>
    printf(<span style="color: #BA2121">&quot;Valor: %d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, incrementaValor(contador));  <span style="color: #408080; font-style: italic">// Imprime &quot;Valor: 1&quot;</span>

    printf(<span style="color: #BA2121">&quot;Valor: %d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, incrementaReferencia(<span style="color: #666666">&amp;</span>contador));  <span style="color: #408080; font-style: italic">// Imprime &quot;Valor: 1&quot;</span>
    printf(<span style="color: #BA2121">&quot;Valor: %d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, incrementaReferencia(<span style="color: #666666">&amp;</span>contador));  <span style="color: #408080; font-style: italic">// Imprime &quot;Valor: 2&quot;</span>
    <span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">0</span>;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>O que acontece quando eu chamo a função <code>incrementaValor</code> é que uma cópia do contador é enviado para a função, mas quando chamo <code>incrementaReferencia</code> o próprio contador é enviado para a função.</p>
</div>
<div class="paragraph">
<p>Em Java só temos passagem por valor quando usamos tipos primitivos (<code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code> ou <code>char</code>). Quando definimos um objeto, sempre estamos passando a referência do mesmo para funções. Por isso é muito importante entender o que é e como garantir imutabilidade. Quando formos falar de memória, vou explicar o que é o conceito de memória e como isso funciona na prática, mas, resumidamente, tipos primitivos são armazenados na stack do programa enquanto todas as classes são armazenados na memoria heap do programa. Ao se criar um objeto, um ponteiro na stack é criado para um novo espaço de memoria alocado na Heap. <em>Calma, você não tem obrigação de entender isso facilmente</em>!!!</p>
</div>
</div>
<div class="sect2">
<h3 id="_imutabilidade-e-mutabilidade">Imutabilidade e Mutabilidade</h3>
<div class="paragraph">
<p>Chamamos de mutabilidade a capacidade de um objeto ter seu estado interno alterado. Em orientação a objetos mutabilidade é um requisito desejado para quase todas as classes, por isso que só recentemente o Java incorporou o conceito de imutabilidade a linguagem através dos Records. Antes dos Records era comum se usar POJOs em que existia para cada campo um respectivo <code>get</code> e um <code>set</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">POJO</div>
POJO é um acrônimo para <em>Plain Old Java Object</em>, que significa velho e simples objeto Java. É um termo usado para referenciar um padrão de classes Java que não dependem da herança de interfaces ou classes de frameworks externos.
</div>
</div>
<div class="paragraph">
<p>Records é o tipo que adiciona o conceito de imutabilidade ao código Java. Abaixo vou definir a classe <strong>Usuario</strong> três vezes. Na primeira vez ela é mutável, na segunda imutável usando POJO e na terceira usando record.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Usuario</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #B00040">int</span> id;
    <span style="color: #008000; font-weight: bold">private</span> String username;
    <span style="color: #008000; font-weight: bold">private</span> String email;

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #0000FF">Usuario</span>(<span style="color: #B00040">int</span> id, String username, String email) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">id</span> <span style="color: #666666">=</span> id;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">username</span> <span style="color: #666666">=</span> username;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">email</span> <span style="color: #666666">=</span> email;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span> <span style="color: #0000FF">getId</span>() {
        <span style="color: #008000; font-weight: bold">return</span> id;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">setId</span>(<span style="color: #B00040">int</span> id) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">id</span> <span style="color: #666666">=</span> id;
    }

    <span style="color: #008000; font-weight: bold">public</span> String <span style="color: #0000FF">getUsername</span>() {
        <span style="color: #008000; font-weight: bold">return</span> username;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">setUsername</span>(String username) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">username</span> <span style="color: #666666">=</span> username;
    }

    <span style="color: #008000; font-weight: bold">public</span> String <span style="color: #0000FF">getEmail</span>() {
        <span style="color: #008000; font-weight: bold">return</span> email;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">setEmail</span>(String email) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">email</span> <span style="color: #666666">=</span> email;
    }

    <span style="color: #408080; font-style: italic">// Implementa hashCode, equals e toString</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para implementar um campo imutável, devemos usar o modificador de acesso <code>final</code>. Um campo final terá seu valor definido no construtor e não poderá ser alterado em todo ciclo de vida do objeto.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Usuario</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> <span style="color: #B00040">int</span> id;
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> String username;
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> String email;

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #0000FF">Usuario</span>(<span style="color: #B00040">int</span> id, String username, String email) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">id</span> <span style="color: #666666">=</span> id;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">username</span> <span style="color: #666666">=</span> username;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">email</span> <span style="color: #666666">=</span> email;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span> <span style="color: #0000FF">getId</span>() {
        <span style="color: #008000; font-weight: bold">return</span> id;
    }

    <span style="color: #008000; font-weight: bold">public</span> String <span style="color: #0000FF">getUsername</span>() {
        <span style="color: #008000; font-weight: bold">return</span> username;
    }

    <span style="color: #008000; font-weight: bold">public</span> String <span style="color: #0000FF">getEmail</span>() {
        <span style="color: #008000; font-weight: bold">return</span> email;
    }

    <span style="color: #408080; font-style: italic">// Implementa hashCode, equals e toString</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ao usar records, é como se todos os campos já fossem definidos como final, mas a grande vantagem se dá que não precisamos implementar os métodos <code>hashCode</code>, <code>equals</code> e <code>toString</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> record <span style="color: #0000FF">Usuario</span>(<span style="color: #B00040">int</span> id, String username, String email) {}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-04-conclusao">Conclusão</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Orientação a Objeto é uma ótima técnica para fazer design de código. Ela é melhor utilizada quando tempos que modelar problemas do mundo real, mas haverá dificuldade se o modelo for mais próximo de um modelo matemático.</p>
</div>
<div class="paragraph">
<p>O principal ganho com a modelagem a Orientação a Objetos é a capacidade de se encapsular complexidades.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Orientação a Objeto" /><category term="Tutorial" /><category term="Java" /><summary type="html"><![CDATA[Você sabe o que é Orientação a Objetos? E você sabe porque OO é o principal foco da linguagem Java? A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">Collections!?!? Listas, conjuntos e mapas… as classes mais usadas do Java!</title><link href="https://blog.vepo.dev/posts/java-101-collections" rel="alternate" type="text/html" title="Collections!?!? Listas, conjuntos e mapas… as classes mais usadas do Java!" /><published>2022-05-06T00:00:00+00:00</published><updated>2022-05-06T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/17-38-00-java-101-collections</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-collections"><![CDATA[<div class="paragraph">
<p>No post anterior nós falamos sobre o que é a JVM e sobre como criar seu primeiro projeto Java. Se você não leu e não sabe escrever um código Java, volta aí no post anterior e veja.</p>
</div>
<div class="paragraph">
<p>Agora vamos dar um segundo passo, pois para quem está começando a entender Java uma das dificuldades é conhecer a extensa biblioteca que a JVM provê. Essa biblioteca trás para nos dá a capacidade de não reescrever códigos básicos para qualquer software, por isso não conhecer é um risco, pois podemos precisar reescrever código que já estão a nossa disposição. Precisamos também compreender alguns conceitos para usar bem os recursos a nossa disposição, vou dar um exemplo fora do contexto desse post, ninguém precisa implementa uma conexão socket, basta usar a classe <a href="https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html"><code>java.net.Socket</code></a>.</p>
</div>
<div class="paragraph">
<p>Na figura abaixo, temos a lista de todos os módulos da versão 17 do Java (uma versão é chamada de JDK, <em>Java Development Kit</em>). É essencial conhecermos o módulo <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/module-summary.html"><code>java.base</code></a>, já os demais módulos podem ser necessários para funcionalidades específica.</p>
</div>
<div id="jdk-libs" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://docs.oracle.com/en/java/javase/18/docs/api/index.html"><img src="/assets/images/java-101/cap-03/jdk-libs.PNG" alt="jdk libs"></a>
</div>
<div class="title">Figura 1. Módulos do JDK 17</div>
</div>
<div class="paragraph">
<p><em>— Tem muita biblioteca aí! Pode onde devo começar?</em></p>
</div>
<div class="paragraph">
<p>Eu recomendaria pelo que conhecemos como <em>Collections</em>. Ela não é especificamente um pacote, mas uma interface, a <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/Collection.html"><code>Collection</code></a>, e uma série de classes que a usam. A Collections é praticamente onipresente em todo código Java.</p>
</div>
<div class="paragraph">
<p>Quando ouvimos falar das Java Collections, podemos assumir que estamos falando de classes da biblioteca padrão do Java que estendem a interface Collection, essa interface por sua vez irá implementar uma serie de métodos que são comuns em todas as classes que implementam ela. Mas ter métodos em comum não implica em comportamento similar. Para entender o comportamento, precisamo olhar para interfaces que estendem a interface Collection, as principais são <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/List.html"><code>List</code></a> e <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/Set.html"><code>Set</code></a>.</p>
</div>
<div class="paragraph">
<p>Mas a biblioteca Collections não está restrita a interface Collection, outras interfaces podem ser incluídas como a <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/Map.html"><code>Map</code></a> e a <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/stream/Stream.html"><code>Stream</code></a>.</p>
</div>
<div class="paragraph">
<p>Vamos olhar como usar cada uma dessas interfaces e classes? No diagrama abaixo estão listadas as classes mais importantes, exceto a <code>Stream</code> da qual discutiremos no final.</p>
</div>
<div id="jdk-lib-collections" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-03/Collections.png" alt="Collections">
</div>
<div class="title">Figura 2. Pacote Java Collections</div>
</div>
<div class="sect1">
<h2 id="_listas-conjuntos-e-mapas">Listas, Conjuntos e Mapas</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Listas, Conjuntos e Mapas são os conceitos básicos da biblioteca Collections. Esses conceitos podem ser abstratos a primeira vista, mas a diferença é percebida quando perguntamos o que indexa cada um deles.</p>
</div>
<div class="paragraph">
<p>Se você não entendeu o significado de indexar (indexação), podemos assumir que estou falando da forma como os elementos são agrupados. Vamos pensar uma lista (<code>List</code>), nela os elementos são agrupados de forma sequencial, ou seja, indexados pela posição. Mas quando temos um conjuntos (<code>Set</code>), eles estão agrupados pela identidade própria deles, ou seja, elementos iguais não devem ser repetidos, sendo contado apenas uma vez. Já nos Mapas (<code>Map</code>), os elementos são indexados por uma chave externa a própria natureza do elemento, nesse caso podemos afirmar que temos um par de chave/valor. É por isso que <code>List</code> e <code>Set</code> estendem a interface <code>Collection</code> enquanto <code>Map</code> não estende, porque essa classe não é apenas uma coleção, mas uma indexação composta por dois valores.</p>
</div>
<div id="indexacao-significado" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-03/indexação.PNG" alt="indexação">
</div>
<div class="title">Figura 3. Significado de indexação</div>
</div>
<div class="paragraph">
<p><em>— Cara, você falou um monte aí, mas eu não entendi nada!</em></p>
</div>
<div class="paragraph">
<p>OK! Então vamos demonstrar isso por código? No pequeno trecho abaixo estou inicializando uma lista, um conjunto e um mapa e usando eles para adicionar alguns valores. Você pode ser por exemplo Strings, tente executar o código abaixo usando a ferramenta <em>jshell</em> (ferramenta REPL excelente adicionada na JDK 9), preste bem atenção no trecho de código a esquerda e no resultado a direta (<code>$x</code> representa o resultado retornado pela operação).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">java.util.ArrayList</span>;
<span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">java.util.HashSet</span>;
<span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">java.util.HashMap</span>;

<span style="color: #008000; font-weight: bold">var</span> lista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span>();       <span style="color: #408080; font-style: italic">// lista ==&gt; []</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 1&quot;</span>);                      <span style="color: #408080; font-style: italic">// $5 ==&gt; true</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 2&quot;</span>);                      <span style="color: #408080; font-style: italic">// $6 ==&gt; true</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 1&quot;</span>);                      <span style="color: #408080; font-style: italic">// $7 ==&gt; true</span>
lista.<span style="color: #7D9029">size</span>() <span style="color: #666666">==</span> <span style="color: #666666">3</span>                          <span style="color: #408080; font-style: italic">// $8 ==&gt; true</span>
lista;                                     <span style="color: #408080; font-style: italic">// lista ==&gt; [Valor 1, Valor 2, Valor 1]</span>

<span style="color: #008000; font-weight: bold">var</span> conjunto <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> HashSet<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span>();      <span style="color: #408080; font-style: italic">// conjunto ==&gt; []</span>
conjunto.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 1&quot;</span>);                   <span style="color: #408080; font-style: italic">// $11 ==&gt; true</span>
conjunto.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 2&quot;</span>);                   <span style="color: #408080; font-style: italic">// $12 ==&gt; true</span>
conjunto.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 1&quot;</span>);                   <span style="color: #408080; font-style: italic">// $13 ==&gt; false</span>
conjunto;                                  <span style="color: #408080; font-style: italic">// conjunto ==&gt; [Valor 1, Valor 2]</span>

<span style="color: #008000; font-weight: bold">var</span> mapa <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> HashMap<span style="color: #666666">&lt;</span>Integer, String<span style="color: #666666">&gt;</span>(); <span style="color: #408080; font-style: italic">// mapa ==&gt; {}</span>
mapa.<span style="color: #7D9029">put</span>(<span style="color: #666666">1</span>, <span style="color: #BA2121">&quot;Valor 1&quot;</span>);                    <span style="color: #408080; font-style: italic">// $16 ==&gt; null</span>
mapa.<span style="color: #7D9029">put</span>(<span style="color: #666666">2</span>, <span style="color: #BA2121">&quot;Valor 2&quot;</span>);                    <span style="color: #408080; font-style: italic">// $17 ==&gt; null</span>
mapa.<span style="color: #7D9029">put</span>(<span style="color: #666666">3</span>, <span style="color: #BA2121">&quot;Valor 1&quot;</span>);                    <span style="color: #408080; font-style: italic">// $18 ==&gt; null</span>
mapa.<span style="color: #7D9029">put</span>(<span style="color: #666666">1</span>, <span style="color: #BA2121">&quot;Valor 3&quot;</span>);                    <span style="color: #408080; font-style: italic">// $19 ==&gt; &quot;Valor 1&quot;</span>
mapa;                                      <span style="color: #408080; font-style: italic">// mapa ==&gt; {1=Valor 3, 2=Valor 2, 3=Valor 1}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Dá pra ver claramente que em uma <code>List</code> podemos adicionar (<code>add</code>) elementos repetidos, mas ao adicionar um elemento repetido em um <code>Set</code> ele não é alterado. Apesar de nosso exemplo manter a ordem, um <code>Set</code> não garante a ordem dos elementos. Observe também que quando adicionamos um elemento em um <code>Set</code> o método <code>add</code> irá retornar se o valor já existia ou não no conjunto.</p>
</div>
<div class="paragraph">
<p>Para um <code>Map</code> temos o comportamento um pouco diferente. Temos que usar a operação <code>put</code> com uma chave e um valor como parâmetros. Valores repetidos podem ser adicionados desde que com chaves diferentes, mas quando reutilizamos uma chave, o antigo valor associado a ele é o retorno da operação.</p>
</div>
<div class="paragraph">
<p>Essas três classes são muito usadas e por isso é bom conhecer cada método dela. Recomendo ler o <em>Javadoc</em> mesmo que você não saiba ler em inglês, tente usar o Google Translator. Você deve ficar atento é a versão da documentação que você está lendo. Cada método e classe terá uma referência sobre a versão do Java na qual ela foi introduzida. Por exemplo, abaixo tempos o método <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/Map.html#copyOf(java.util.Map">Map#copyOf</a>) que foi introduzida na JDK 9.</p>
</div>
<div id="javadoc-map-copyof" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-03/javadoc.png" alt="javadoc">
</div>
<div class="title">Figura 4. Documentação da classe Map, método copyOf</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tipos-de-listas">Tipos de Listas</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Como falamos anteriormente, listas servem para armazenar objetos sequencialmente. No nosso exemplo, usamos a class <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/ArrayList.html"><code>ArrayList</code></a>, mas ela não é a única classe de lista existente, temos também a <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/LinkedList.html"><code>LinkedList</code></a>. Vamos ver a diferença das duas?</p>
</div>
<div class="paragraph">
<p>Para compreender bem a diferença das duas classes, precisamos conhecer um pouco de como elas são implementadas.</p>
</div>
<div class="paragraph">
<p>A classe <code>ArrayList</code> é uma abstração de uma lista sobre um vetor. A classe é inicializada, por padrão, alocando um vetor de tamanho 10. Esse tamanho só será alterado quando a capacidade máxima dela for atingida, o que significa que a operação <code>add</code> pode significar que um vetor inteiro foi criado com o tamanho <code>n + 1</code> e depois todos os elementos foram copiados para o novo vetor.</p>
</div>
<div class="paragraph">
<p><em>— Isso não me parece uma boa coisa&#8230;&#8203;</em></p>
</div>
<div class="paragraph">
<p>Exato! Se a classe é utilizada para uma lista que removemos e adicionamos elementos constantemente, ela terá uma péssima performance. Quando adicionamos um elemento, no melhor caso é uma operação de tempo constante, mas no pior caso pode ser que o tempo dessa operação dependa do tamanho da lista (aqui tem o conceito de <a href="https://pt.wikipedia.org/wiki/An%C3%A1lise_assint%C3%B3tica"><strong>Análise assintótica</strong></a> que vamos falar em outro post). Já para se remover um elemento é preciso copiar todos os elementos posteriores a posição do elemento removido, o que significa que essa operação só é ótima quando removemos o último elemento.</p>
</div>
<div class="paragraph">
<p><em>— Então a classe ArrayList é péssima!</em></p>
</div>
<div class="paragraph">
<p>Não! Nós só falamos as desvantagens dessa classe! Ela é a classe do Java Collection mais utilizada, pois ela é ótima quando você tem uma lista de acesso aleatório.</p>
</div>
<div class="paragraph">
<p><em>— Que raios é acesso aleatório?!?!</em></p>
</div>
<div class="paragraph">
<p>Acesso aleatório é quando você precisa acessar um elemento qualquer da lista sem nenhuma ordenação. Digamos que você deseja acessar a posição <em>541</em> de uma lista com <em>9172</em> elementos, o tempo de acesso é constante. O mesmo acontece se você precisa substituir um elemento dentro da lista.</p>
</div>
<div class="paragraph">
<p>Logo, essa classe é ótima para listas de tamanhos fixos (ou com pouca variação) e que precise de acesso aleatório. Se você já sabe o tamanho da lista que irá preencher, você pode já iniciar a classe com o tamanho deseja, isso vai poupar muito processamento do seu software!</p>
</div>
<div class="paragraph">
<p>A outra classe é a <code>LinkedList</code>, ela é bem mais complexa que a <code>ArrayList</code>. Se você abrir o código dela, vai ver que a classe só armazena o primeiro elemento, o último elemento e o tamanho da lista. Cada elemento é um nó da lista, que contém uma referência ao elemento posterior e anterior. Isso significa que para acessar um elemento, é preciso navegar na lista pelos nós.</p>
</div>
<div class="paragraph">
<p><em>— OI?!?!</em></p>
</div>
<div class="paragraph">
<p>Vamos demonstrar&#8230;&#8203; Se tivermos uma lista com 10 elementos, e eu preciso acessar o elemento na 5ͣ  a operação vai acessar os elementos 1, 2, 3, 4 e depois retornar o 5. Isso significa que qualquer operação que não seja na cabeça ou na calda da lista vai depender da posição do elemento.</p>
</div>
<div class="paragraph">
<p><em>— Então ela não serve para acesso aleatórios como a <code>ArrayList</code>?!?</em></p>
</div>
<div class="paragraph">
<p>Servir ela serve&#8230;&#8203; Devemos usar a palavra <strong>ótimo</strong>! Ótimo é um conceito que sempre associamos a algo bom, mas na verdade ótimo é quando atingimos uma situação satisfatória de acordo com certos parâmetros. Servir não é um termo correto porque independente do uso as duas classes vão responder corretamente, mas se considerarmos o parâmetro velocidade, podemos escolher uma implementação de lista ótima.</p>
</div>
<div class="paragraph">
<p>Mas voltando a resposta&#8230;&#8203; A <code>LinkedList</code> é ótima para usos em que elementos são adicionados/removidos no inicio e no final constantemente. É por esse motivo que a classe implementa duas interfaces que adicionam métodos importantes para o acesso direto desses elementos, a <code>Queue</code> e <code>Deque</code>.</p>
</div>
<div class="paragraph">
<p>Por fim podemos falar da <code>PriorityQueue</code>&#8230;&#8203; Essa classe é especial porque ela pode funcionar como uma lista comum, mas podemos associar ela a um <code>Comparator</code> que irá definir a prioridade que os elementos devem ser acessados. Internamente os elementos são armazenados pela ordem de inserção, mas eles são retornados pelos métodos <code>poll()</code> de acordo com a ordem estabelecida pelo comparador usado no construtor, isso significa que você sempre inicializar com um comparador.</p>
</div>
<div class="paragraph">
<p>Vamos ver ela em execução? No exemplo abaixo vamos adicionar algumas Strings e ver como elas são retornadas pelo método <code>poll()</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">var</span> lista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> PriorityQueue<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span>();  <span style="color: #408080; font-style: italic">// lista ==&gt; []</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;a&quot;</span>);                           <span style="color: #408080; font-style: italic">// $2 ==&gt; true</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;d&quot;</span>);                           <span style="color: #408080; font-style: italic">// $3 ==&gt; true</span>
lista;                                    <span style="color: #408080; font-style: italic">// lista ==&gt; [a, d]</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;b&quot;</span>);                           <span style="color: #408080; font-style: italic">// $5 ==&gt; true</span>
lista;                                    <span style="color: #408080; font-style: italic">// lista ==&gt; [a, d, b]</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;d&quot;</span>);                           <span style="color: #408080; font-style: italic">// $7 ==&gt; true</span>
lista;                                    <span style="color: #408080; font-style: italic">// lista ==&gt; [a, d, b, d]</span>
lista.<span style="color: #7D9029">poll</span>();                             <span style="color: #408080; font-style: italic">// $9 ==&gt; &quot;a&quot;</span>
lista.<span style="color: #7D9029">poll</span>();                             <span style="color: #408080; font-style: italic">// $10 ==&gt; &quot;b&quot;</span>
lista.<span style="color: #7D9029">poll</span>();                             <span style="color: #408080; font-style: italic">// $11 ==&gt; &quot;d&quot;</span>
lista.<span style="color: #7D9029">poll</span>();                             <span style="color: #408080; font-style: italic">// $12 ==&gt; &quot;b&quot;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Observe que existe uma ordenação no retorno, tanto que a falta de ordem na adição foi resolvida. Essa classe é muito útil quando precisamos implementar uma lista de prioridades.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tipos-de-conjuntos">Tipos de Conjuntos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Os conjuntos são mais simples que as Listas, vamos ter duas classes importantes: <code>HashSet</code> e <code>TreeSet</code>.</p>
</div>
<div class="paragraph">
<p><code>HashSet</code> deve ser usada quando a ordem dos elementos não é importante, tanto que a interface não dispõe de métodos para acesso sequencial aos elementos. Os elementos são tratados como um conjunto. Se você for abrir a implementação do <code>HashSet</code>, ela usa um <code>HashMap</code> internamente, a seguir veremos como o <code>HashMap</code> funciona. A adição/remoção em um <code>HashSet</code> são mais rápidas que em uma <code>TreeSet</code>.</p>
</div>
<div class="paragraph">
<p>Já a <code>TreeSet</code> é um conjunto ordenado, por isso existe a necessidade de um <code>Comparator</code>, isso significa que os elementos podem ser acessados em ordem, mas ao se adicionar há uma penalidade pois haverá uma operação de balanceamento da árvore interna.</p>
</div>
<div class="paragraph">
<p>Em resumo, use <code>HashSet</code> se a ordem não importa e <code>TreeSet</code> se a ordem importa!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tipos-de-mapas">Tipos de Mapas</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Os mapas são a base de implementação dos conjuntos, <code>HashMap</code> terá o mesmo comportamento do <code>HashSet</code> exceto pelo fato de que ao invés de indexar pelo próprio elemento, ele será indexado pela chave. Já o <code>TreeMap</code> vai armazenar os elementos seguindo a ordenação das chaves.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_streams">Streams</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code>Stream</code> é uma interface pela qual teremos um post especifico futuramente pois essa foi uma das maiores contribuições do Java 8. Quando usamos o método <code>stream()</code> presente em cada Collection, nós não criamos uma nova coleção, nós apenas iniciamos o processo de criação de uma pipeline. O principal conceito de um Stream é que a construção da nova collection será postergada até que o final dela seja conhecido. Essa propriedade é o que chamamos de <a href="https://pt.wikipedia.org/wiki/Avalia%C3%A7%C3%A3o_pregui%C3%A7osa"><em>Lazy Evaluation</em></a>, isso significa que existirá um algoritmo para criação dessa lista, mas ele só será executado ao final.</p>
</div>
<div class="paragraph">
<p><em>— Entendi bulhufas!</em></p>
</div>
<div class="paragraph">
<p>OK! Vamos demonstrar usando o JShell&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">var</span> lista <span style="color: #666666">=</span> Arrays.<span style="color: #7D9029">asList</span>(<span style="color: #BA2121">&quot;a&quot;</span>, <span style="color: #BA2121">&quot;aaa&quot;</span>, <span style="color: #BA2121">&quot;b&quot;</span>, <span style="color: #BA2121">&quot;c&quot;</span>, <span style="color: #BA2121">&quot;aaaaa&quot;</span>, <span style="color: #BA2121">&quot;asdada&quot;</span>);       <span style="color: #408080; font-style: italic">// lista ==&gt; [a, aaa, b, c, aaaaa, asdada]</span>
lista.<span style="color: #7D9029">stream</span>().<span style="color: #7D9029">filter</span>(x <span style="color: #666666">-&gt;</span> x.<span style="color: #7D9029">contains</span>(<span style="color: #BA2121">&quot;a&quot;</span>)).<span style="color: #7D9029">collect</span>(Collectors.<span style="color: #7D9029">toList</span>()); <span style="color: #408080; font-style: italic">// $2 ==&gt; [a, aaa, aaaaa, asdada]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>No código acima nós criamos uma lista e depois criamos um <code>Stream</code> baseado nela. Até chamar o método <code>collect</code>, o <code>Stream</code> não passava de uma sequência de operações sob a lista, depois se cria uma nova lista (poderia ser qualquer coisa) usando as operações. A lista original não é alterada!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-03-conclusao">Conclusão</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Collections é uma biblioteca onipresente! Em qualquer código você verá vestígio dela. Experimente e conheça.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Tutorial" /><category term="Collections" /><category term="Bibliotecas" /><summary type="html"><![CDATA[Continuando a série sobre Java, vamos apresentar o que é o Java Collections. Vou apresentar um panorama sobre a biblioteca contendo as principais classes. A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry></feed>