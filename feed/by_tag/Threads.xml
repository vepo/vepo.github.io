<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/Threads.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/Threads.xml</id><title type="html">vepo</title><subtitle>Um repositório para todos os posts, palestras e tutoriais que já fiz. Java, Desenvolvimento de Software e reflexões sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">Concorrência e Paralelismo</title><link href="https://blog.vepo.dev/posts/java-101-threads" rel="alternate" type="text/html" title="Concorrência e Paralelismo" /><published>2022-09-03T00:00:00+00:00</published><updated>2022-09-03T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/18-00-00-java-101-threads</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-threads"><![CDATA[<div class="paragraph">
<p>Esse post faz parte de uma série introdutória sobre Java, se você não conhece a linguagem e não leu os posts anteriores, recomendo os ler para ter uma visão melhor da plataforma. Nessa série, já falamos sobre o que é o ecossistema Java, o que é a biblioteca Collections, como Java faz Orientação a Objetos e o que é a biblioteca I/O, esses tópicos são necessários para o que vamos falar agora: <strong>Concorrência e Paralelismo</strong>.</p>
</div>
<div class="sect1">
<h2 id="cap-06-o-que-e-concorrencia-e-paralelismo">O que é Concorrência e Paralelismo?!?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nos frameworks modernos é muito raro lidarmos com paralelismo, apesar que podemos lidar com concorrência o tempo inteiro. Para entender isso precisamos primeiro compreender a diferença entre esses dois conceitos. Para isso vamos imaginar que estamos em uma biblioteca, nessa biblioteca tem dois tipos de livros: os comuns e os raros. Os livros comuns estão acessíveis na estantes para que todos possam ler e pegar emprestado, mas os livros raros estão disponíveis em uma sala especifica em que você precisa pedir para um bibliotecário pegar ele e deve ler somente na sala.</p>
</div>
<div class="paragraph">
<p>Vamos imaginar que surgiu um estranho interesse por se ler livros raros na cidade e isso gerou uma procura inesperada que surpreendeu até mesmo a direção da biblioteca.</p>
</div>
<div class="paragraph">
<p><em>— Todos estão disponíveis na internet! Só acessar o <a href="https://www.gutenberg.org/browse/languages/pt">Projeto Gutenberg</a>!!!</em></p>
</div>
<div class="paragraph">
<p>Isso gerou uma fila enorme na sessão de livros raros pois só tinha um bibliotecário para encontrar o livro, registrar a saída e ele ainda precisava observar se o livro estava sendo manipulado corretamente. Logo surgiram várias opções de como melhorar o atendimento da biblioteca, mas só poderiam ser consideradas as opções que mantivessem o cuidado para com as obras.</p>
</div>
<div id="cap-06-biblioteca-antiga" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-06/biblioteca-antiga.jpg" alt="biblioteca antiga">
</div>
<div class="title">Figura 1. Biblioteca da Escola Sá de Miranda</div>
</div>
<div class="paragraph">
<p>A primeira opção foi contratar mais um bibliotecário. Feita a contratação ele começou a dividir as tarefas com o mais antigo. Enquanto o primeiro cuidava de encontrar as obras e registrar as saídas, o segundo fiscalizava se todos os usuários da biblioteca estavam manuseando corretamente o livro.</p>
</div>
<div class="paragraph">
<p>A direção da biblioteca achou a opção boa, mas eles perceberam que o aumento da eficiência foi de apenas 30% enquanto se esperava 100% de eficiência com a contratação de um novo funcionário. Isso aconteceu porque as atividades foram distribuídas, mas nenhuma atividade era feita em paralelo. A atividade que mais demandava tempo era encontrar a obra e registrar a sua saída com cerca de 90% do tempo, logo essa atividade deveria ser feita em paralelo. <strong>Paralelismo</strong> acontece quando a mesma tarefa é realizada simultaneamente por mais de um bibliotecário. Assim os dois bibliotecários decidiram que iriam trabalhar em todo o conjunto de atividades aumentando a eficiência de 30% para 50%.</p>
</div>
<div class="paragraph">
<p>Mas eles encontraram um pequeno problema, só havia um computador na bancada e por isso eles precisavam se revesar para usar o computador. No começo eles replicavam a atividade que faziam quando havia apenas 1 bibliotecário: atendiam o cliente, encontravam o livro e registravam a saída. Mas perceberam que o tempo de registrar o livro também era demorado, ele demorava cerca de 3 vezes o tempo de pegar o livro, pois o software era bem lento e implementado em Javascript. Logo eles foram procurar solução para o problema deles e descobriram que estavam enfrentando um problema de concorrência. <strong>Concorrência</strong> acontece quando dois ou mais bibliotecários desejam acessar recursos limitados.</p>
</div>
<div class="paragraph">
<p>Eles perceberam que o mais demorado era entrar no sistema, logo resolveram atender 3 clientes por vez. Assim cada bibliotecário pegava o pedido de 3 clientes e depois registravam no sistema. Essa abordagem fez com que o atendimento se tornasse 70% mais eficiente do que era quando se tinha apenas um funcionário.</p>
</div>
<div class="paragraph">
<p>Por fim a biblioteca decidiu contratar uma bibliotecária para fiscalizar o manuseio dos livros porque percebeu que só tinha homens nessa história. E o aumento de eficiência passou para 150% pois ela conseguia fiscalizar e atender na bancada quando possível.</p>
</div>
<div class="paragraph">
<p>Eu espero que com essa história você tenha compreendido que esse processo acontece com qualquer servidor web. É EXATAMENTE ASSIM! Pense que a biblioteca é o servidor, os bibliotecários são <em>threads</em>, os livros são os recursos que o servidor usa e os clientes são os clientes que estão acessando a API do servidor. Eu não sei se os conceitos de concorrência e paralelismo são usado na bibliotecas, eles são conceitos da computação que foram usado nesse texto para descrever e diferenciar eles. Logo podemos redefinir <strong>Paralelismo</strong> quando a mesma tarefa é realizada simultaneamente por mais de uma <em>thread</em> ou processo e <strong>Concorrência</strong> quando acontece duas ou mais <em>threads</em>, ou processos desejam acessar recursos limitados.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-06-thread-e-processo">O que é Thread e Processo?!?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Falar de Paralelismo e Concorrência não é uma tarefa fácil porque envolve vários conceitos de vários níveis. Até agora nós falamos de conceitos abstratos, mas agora vamos falar de algo bem mais concreto. Eu citei Thread e Processo e esses são conceitos sobre o sistema operacional.</p>
</div>
<div class="paragraph">
<p>Um processo é um programa rodando na memória. Ele é instanciado pelo sistema operacional e terá seu ciclo de vida até ser encerrado por si mesmo ou pelo próprio sistema operacional. Cada processo tem um identificador único e compartilha os recursos da máquina com outros processo. No trecho abaixo vemos a listagem dos 9 primeiros processos iniciados pelo Linux que ainda estão em execução, observe que o <code>PID</code> é o identificado único de cada processo, se eu quiser finalizar um processo preciso enviar um comando <code>kill -15 &lt;PID&gt;</code> onde <strong>-15</strong> é o sinal que o programa deve ser encerrado, se eu usar <strong>-9</strong> ele será encerrado imediatamente.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>$ ps -aux | head
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root           <span style="color: #666666">1</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0 <span style="color: #666666">202552</span>  <span style="color: #666666">5172</span> ?        Ss   Jul01  <span style="color: #666666">70</span>:40 /usr/lib/systemd/systemd --switched-root --system --deserialize <span style="color: #666666">22</span>
root           <span style="color: #666666">2</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:05 <span style="color: #666666">[</span>kthreadd<span style="color: #666666">]</span>
root           <span style="color: #666666">4</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S&lt;   Jul01   <span style="color: #666666">0</span>:00 <span style="color: #666666">[</span>kworker/0:0H<span style="color: #666666">]</span>
root           <span style="color: #666666">6</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:35 <span style="color: #666666">[</span>ksoftirqd/0<span style="color: #666666">]</span>
root           <span style="color: #666666">7</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:07 <span style="color: #666666">[</span>migration/0<span style="color: #666666">]</span>
root           <span style="color: #666666">8</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:00 <span style="color: #666666">[</span>rcu_bh<span style="color: #666666">]</span>
root           <span style="color: #666666">9</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01  <span style="color: #666666">37</span>:47 <span style="color: #666666">[</span>rcu_sched<span style="color: #666666">]</span>
root          <span style="color: #666666">10</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S&lt;   Jul01   <span style="color: #666666">0</span>:00 <span style="color: #666666">[</span>lru-add-drain<span style="color: #666666">]</span>
root          <span style="color: #666666">11</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:22 <span style="color: #666666">[</span>watchdog/0<span style="color: #666666">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Se fossemos falar em processos no nosso exemplo da biblioteca, teríamos que criar uma biblioteca nova. Como eu disse, dois processo compartilham recursos mas isso não significa que eles podem acessar o mesmo recurso ao mesmo tempo. Por exemplo, se eu tenho um servidor rodando na porta 80, não posso iniciar outro processo na porta 80. Um processo não tem acesso a memória de outro processo, isso significa que para um mesmo objeto não pode existir em dois processos diferentes. (<em>Até pode, mas não vamos falar de RMI porque é complicado e já foi removido da biblioteca padrão do Java</em>.)</p>
</div>
<div class="paragraph">
<p><em>—  E se eu quiser que as requisições que cheguem na porta 80 sejam processadas em paralelo, como faço?!?!</em></p>
</div>
<div class="paragraph">
<p>Lembra da nossa biblioteca? Pois é, cada biblioteca é um processo, mas cada bibliotecário é uma <em>Thread</em>. <em>Thread</em> são dois fluxos que compartilham o mesmo espaço de memória, ou seja, é quando um processo tem dois fluxos de execução em paralelo compartilhando recursos. Threads podem acessar a mesma porta, assim como podem acessar os mesmo objetos. Mas ele não podem ser feitas ao mesmo momento. Lembra do computador do balcão da biblioteca? A metáfora da biblioteca foi construída para similar exatamente o que acontece em um computador.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-06-thread-e-processo-em-java">Thread e Processo em Java</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vamos agora mostrar algumas classes que podemos usar para manipular processos e threads usando Java. Uma das preocupações da plataforma Java foi criar uma abstração para que o mesmo código possa ser usado em qualquer sistema operacional, logo todo o código demonstrado pode ser executando tando em Linux quando Windows e sistemas derivados do Unix como o MacOS.</p>
</div>
<div class="sect2">
<h3 id="_processos">Processos</h3>
<div class="paragraph">
<p>Para que possamos acessar as informações de todos os processos em execução podemos usar a classe <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/ProcessHandle.html">ProcessHandle</a> (<em>adicionada no Java 9</em>). Navegue pela documentação dela para perceber que processos podem ter uma relação de parentescos como podemos perceber através dos métodos <code>children()</code>, <code>descendants​()</code> e <code>parent​()</code>. Na execução abaixo vemos as informações do processo atual e a listagem de todos os processos em execução.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>$ jshell
<span style="color: #666666">|</span>  Welcome to JShell <span style="color: #666666">--</span> Version <span style="color: #666666">18</span>
<span style="color: #666666">|</span>  For an introduction type: <span style="color: #666666">/</span>help intro

jshell<span style="color: #666666">&gt;</span> System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>().<span style="color: #7D9029">pid</span>());
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>  .<span style="color: #7D9029">pid</span>()  );
<span style="color: #666666">20092</span>

jshell<span style="color: #666666">&gt;</span> System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>().<span style="color: #7D9029">info</span>());
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>  .<span style="color: #7D9029">info</span>  );
<span style="color: #666666">[</span>user: Optional<span style="color: #666666">[</span>VEPO<span style="color: #666666">]</span>, cmd: C:<span style="border: 1px solid #FF0000">\</span>Users<span style="border: 1px solid #FF0000">\</span>vepo<span style="border: 1px solid #FF0000">\</span>.<span style="color: #7D9029">sdkman</span><span style="border: 1px solid #FF0000">\</span>candidates<span style="border: 1px solid #FF0000">\</span>java<span style="border: 1px solid #FF0000">\</span><span style="color: #666666">18-</span>open<span style="border: 1px solid #FF0000">\</span>bin<span style="border: 1px solid #FF0000">\</span>java.<span style="color: #7D9029">exe</span>, startTime: Optional<span style="color: #666666">[2022-09-02</span>T18:<span style="color: #666666">49</span>:<span style="color: #666666">28.093</span>Z<span style="color: #666666">]</span>, totalTime: Optional<span style="color: #666666">[</span>PT0<span style="color: #666666">.328125</span>S<span style="color: #666666">]]</span>

jshell<span style="color: #666666">&gt;</span> ProcessHandle.<span style="color: #7D9029">allProcesses</span>().<span style="color: #7D9029">forEach</span>(System.<span style="color: #7D9029">out</span>::println);
ProcessHandle.<span style="color: #7D9029">allProcesses</span>  .<span style="color: #7D9029">forEach</span>(System.<span style="color: #7D9029">out</span>::println);
<span style="color: #666666">0</span>
<span style="color: #666666">4</span>
<span style="color: #666666">72</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Caso você deseje criar um novo processo, é preciso fazer uma chamada de sistema usando a classe <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Runtime.html">Runtime</a>. No trecho de código abaixo usamos o método <code>exec</code> para criar um novo processo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>jshell<span style="color: #666666">&gt;</span> Runtime.<span style="color: #7D9029">getRuntime</span>().<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>)
Runtime.<span style="color: #7D9029">getRuntime</span>  .<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>)
$4 <span style="color: #666666">==&gt;</span> Process<span style="color: #666666">[</span>pid<span style="color: #666666">=19628</span>, exitValue<span style="color: #666666">=</span><span style="color: #BA2121">&quot;not exited&quot;</span><span style="color: #666666">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Na resposta da execução podemos ver que o método <code>exec</code> retorna o novo processo, mas não espera por ele terminar, retornando apenas um objeto <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html">Process</a> para poder ser manipulado. Em posse desse objeto, podemos esperar por ele terminar e ver se a execução foi um sucesso.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>jshell<span style="color: #666666">&gt;</span> Runtime.<span style="color: #7D9029">getRuntime</span>().<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>).<span style="color: #7D9029">waitFor</span>()
Runtime.<span style="color: #7D9029">getRuntime</span>  .<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>).<span style="color: #7D9029">waitFor</span>
$5 <span style="color: #666666">==&gt;</span> <span style="color: #666666">0</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Percebeu que o método <code>waitFor</code> retornou <strong>0</strong>? Todo processo precisa finalizar com um número e zero significa sucesso. Qualquer número diferente de zero significa que o programa foi finalizado com erro. O programa que eu executei acima é o <code>pwd</code> que retorna o diretório corrente em Linux, apesar de usar Windows uso o Git Bash que é um porte do MinGW que simula um bash Linux.</p>
</div>
</div>
<div class="sect2">
<h3 id="_threads">Threads</h3>
<div class="paragraph">
<p><em>Threads</em> também são criadas pelo sistemas operacional, mas o Java dá suporte a duas bibliotecas bem interessantes que precisamos demonstrar. A primeira é a classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Thread.html">Threads</a> que deve ser usada com muita parcimônia essa classe, o livro <a href="https://www.amazon.com.br/Java-Efetivo-Melhores-Pr%C3%A1ticas-Plataforma/dp/8550804622?crid=6C287ENLSDOW&amp;keywords=java+efetivo&amp;qid=1662253615&amp;sprefix=java+ef%2Caps%2C363&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=092f42dffa52d29c336aacab87c58558&amp;language=pt_BR&amp;ref_=as_li_ss_tl">Java Efetivo</a> nos diz no <strong>Item 80: Dê preferência aos executores, às tarefas e às streams em vez de threads</strong>. Os <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Executors.html">Executors</a> são a proxima classe que vamos ver que podem entregar as mesmas funcionalidades.</p>
</div>
<div class="paragraph">
<p><em>— Então porque entender Threads?!?!</em></p>
</div>
<div class="paragraph">
<p><em>Threads</em> são importantes porque são um conceito do sistema operacional. Um executor não elimina uma thread, ele apenas facilita a implementação delas e otimiza o seu uso. Threads são gerenciadas pelo Sistema Operacional. O tempo de CPU será dividido entre os processos e as threads. Isso significa que se seu computador tem 4 CPUs e seu programa tem ao menos 2 threads, é provável que em algum momento seu programa esteja rodando em 2 CPUs ao mesmo tempo, mas quem define isso é o sistema operacional.</p>
</div>
<div class="paragraph">
<p>Threads são um recurso do sistema operacional limitado e caro. No Windows isso não é transparente, mas no Linux é possível acessar essas informações facilmente através do arquivo <code>/proc/sys/kernel/threads-max</code>. Na execução abaixo vemos que essa instância do Linux só pode rodar 32.768 processos concorrentes e 100.435 threads concorrentes, o que dá em média 3 threads por processo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>$ cat /proc/sys/kernel/threads-max
<span style="color: #666666">100435</span>

$ cat /proc/sys/kernel/pid_max
<span style="color: #666666">32768</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><em>— Mas 3 threads por processo não é muito pouco?!?!</em></p>
</div>
<div class="paragraph">
<p>Não! Porque é praticamente impossível rodar 32.768 processos concorrentes e a grande maioria dos processos tem apenas uma thread rodando.</p>
</div>
<div class="paragraph">
<p><em>— Mas o que acontece quando o Java pede uma thread nova?</em></p>
</div>
<div class="paragraph">
<p>Para entender isso, precisamos compreender outro conceito importante de Sistemas Operacionais o espaço do usuário e o espaço do kernel (<a href="https://pt.wikipedia.org/wiki/Espa%C3%A7o_de_usu%C3%A1rio"><em>user space</em> e <em>kernel space</em></a>). Espaço do usuário é todo o código dos nossos programas, já o espaço do kernel é o código do sistema operacional que nossos programas usam para realizar algumas operações. Toda operação que sai do espaço do usuário e vai para o espaço do kernel é custosa porque pode envolver recursos compartilhados como sockets, arquivos ou threads. Logo, criar uma nova thread é custoso porque tem que criar uma nova thread no sistema operacional que não é apenas alocar um espaço na memória.</p>
</div>
<div class="paragraph">
<p>No código abaixo uma thread é criada que sua única função é pegar o instante em que é iniciada, dormir por 500ms e armazenar o instante em que ela é finalizada. Os tempos deve ser armazenados no array tempos porque nenhuma variável pode ser alterada diretamente entre duas threads que não seja uma variável <code>final</code>, pois estamos falando de duas pilhas de execução diferentes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">long</span><span style="color: #666666">[]</span> tempos <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">long</span><span style="color: #666666">[4]</span>;
tempos<span style="color: #666666">[0]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
Thread t <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Thread() {
    <span style="color: #AA22FF">@Override</span>
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">run</span>() {
        tempos<span style="color: #666666">[1]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            Thread.<span style="color: #7D9029">sleep</span>(<span style="color: #666666">500</span>);
        } <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
            Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
        }
        tempos<span style="color: #666666">[2]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
    }
};
t.<span style="color: #7D9029">start</span>();
<span style="color: #008000; font-weight: bold">try</span> {
    t.<span style="color: #7D9029">join</span>();
} <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
    Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
}
tempos<span style="color: #666666">[3]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de inicialização: %dµs&quot;</span>, (tempos<span style="color: #666666">[1]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de execução     : %dµs&quot;</span>, (tempos<span style="color: #666666">[2]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[1]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo total           : %dµs&quot;</span>, (tempos<span style="color: #666666">[3]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>O resultado da execução é o visto abaixo, observe que demora quase meio milissegundo para que a thread seja iniciada. Esse tempo pode parecer pouco, mas se houver um uso abusivo dessa classe pode impactar a performance, pois esse tempo é latência adicionada ao processamento.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>Tempo de inicialização: 436µs
Tempo de execução     : 510061µs
Tempo total           : 510643µs</code></pre>
</div>
</div>
<div class="paragraph">
<p>Observe também que usamos os métodos <code>start</code> e <code>join</code>, eles servem para controlar a thread. Uma thread não inicia sua execução imediatamente, é preciso que o código que a instanciou dispare a execução. Mas quando a execução se inicia os dois códigos começam a ser executados em paralelo, para que se aguarde a finalização da thread é preciso usar o método <code>join</code> que fará com que a thread corrente seja bloqueada até que a outra seja finalizada.</p>
</div>
<div class="paragraph">
<p>Outro ponto importante é o uso da exceção <code>InterruptedException</code>, ela é lançada pela JVM toda vez que a thread é interrompida pelo sistema operacional.</p>
</div>
<div class="paragraph">
<p><em>— Mas o que significa a thread ser interrompida pelo sistema operacional?</em></p>
</div>
<div class="paragraph">
<p>Ora, já teve vezes em que uma janelinha do Windows ficou não responsiva e você foi lá forçou ela a ser fechada? Ou você executou um comando no bash e não quis esperar a resposta e pressionou <strong>CRTL + C</strong>. Nessa hora o sistema operacional envia um sinal ao programa que ele deve finalizar, o <a href="https://pt.wikipedia.org/wiki/SIGTERM">SIGTERM</a>. Quando esse sinal é recebido pela thread, ela deve liberar todos os recursos e se finalizar, por isso quanto tempos uma <code>InterruptedException</code> é hora de limpar a casa e fechar tudo.</p>
</div>
<div class="paragraph">
<p>Se você ignorar essa exception, o seu processo pode virar um <a href="https://pt.wikipedia.org/wiki/Processo_zombie">processo zumbi</a>, pois outras threads podem ter obedecido o sinal e já ter finalizada criando instabilidade para a execução. Então, recebeu um <code>InterruptedException</code>, fecha tudo e chama <code>Thread.currentThread().interrupt()</code>.</p>
</div>
<div class="paragraph">
<p>Há um outro sinal que não fornece essa informação, o <a href="https://pt.wikipedia.org/wiki/SIGKILL">SIGKILL</a>, o sistema operacional simplesmente mata a execução sem nenhuma educação e protocolo.</p>
</div>
<div class="paragraph">
<p>Por fim, você deve ter reparado que implementamos o método <code>run</code> na thread. Esse método é definido na classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Runnable.html">Runnable</a>, essa classe é muito importante porque nem sempre precisamos definir uma thread nova, podemos estender essa classe e criar quantas threads forem necessária com o mesmo código.</p>
</div>
<div class="paragraph">
<p>Existe a possibilidade de se criar grupos de threads com a classe <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadGroup.html">ThreadGroup</a>, mas não vamos abordar ela porque todas as funcionalidades delas podem ser endereçadas com Executors.</p>
</div>
</div>
<div class="sect2">
<h3 id="_executors">Executors</h3>
<div class="paragraph">
<p>Executors são a nova, <em>em relação a Thread</em>, biblioteca adicionada no Java 5 que permite um controle melhor sobre Threads e grupos de threads. A vantagem do uso da classe Executors é que temos uma interface bem mais interessante, como veremos a diante. Primeiro vamos focar em performance.</p>
</div>
<div class="paragraph">
<p>Como falamos, criar thread pode ser uma operação cara, com executors podemos criar pool de threads ou reutilizar threads já existentes sem a necessidade de se criar novas threads. Se compararmos a execução vemos que o uso de pools de thread diminuem o tempo gasto com a inicialização dessas threads. Nos teste que executamos, vemos que o tempo de inicialização e o tempo médio total são menores, somente o tempo médio de execução é maior, mas isso é devido a fatores externos ao código já que executamos o mesmo código em ambos o caso.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>Usando Threads
Tempo de inicialização: 402µs
Tempo de execução     : 511415µs
Tempo total           : 511939µs

Tempo médio de inicialização: 77370µs
Tempo médio de execução     : 50792817µs
Tempo médio total           : 50880048µs

Usando Executors
Tempo de inicialização: 2829µs    (+2.427µs)
Tempo de execução     : 509877µs  (-1.538µs)
Tempo total           : 513237µs  (+1.298µs)

Tempo médio de inicialização: 19708µs    (-57.662µs)
Tempo médio de execução     : 50806122µs (+13.305µs)
Tempo médio total           : 50839674µs (-40.374µs)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para se criar um <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/ExecutorService.html"><code>ExecutorService</code></a> deve se usar a classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Executors.html"><code>Executors</code></a>. Nessa classe tempos vários tipos de ExecutorServices, mas os mais importantes são os <strong>FixedThreadPool</strong>, <strong>CachedThreadPool</strong> e <strong>ScheduledThreadPool</strong>. Cada um desses tem suas peculiaridades que não vamos abordar aqui, apenas vamos ressaltar que <strong>ScheduledThreadPool</strong> deve ser usado quando precisamos criar threads que executam em intervalos pré definidos.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">long</span><span style="color: #666666">[]</span> tempos <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">long</span><span style="color: #666666">[4]</span>;
tempos<span style="color: #666666">[0]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
ExecutorService executor <span style="color: #666666">=</span> Executors.<span style="color: #7D9029">newSingleThreadExecutor</span>();
Future<span style="color: #666666">&lt;?&gt;</span> ft <span style="color: #666666">=</span> executor.<span style="color: #7D9029">submit</span>(() <span style="color: #666666">-&gt;</span> {
        tempos<span style="color: #666666">[1]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            Thread.<span style="color: #7D9029">sleep</span>(<span style="color: #666666">500</span>);
        } <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
            Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
        }
        tempos<span style="color: #666666">[2]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
    });
<span style="color: #008000; font-weight: bold">try</span> {
    ft.<span style="color: #7D9029">get</span>();
} <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
    Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
}
tempos<span style="color: #666666">[3]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de inicialização: %dµs&quot;</span>, (tempos<span style="color: #666666">[1]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de execução     : %dµs&quot;</span>, (tempos<span style="color: #666666">[2]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[1]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo total           : %dµs&quot;</span>, (tempos<span style="color: #666666">[3]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
executor.<span style="color: #7D9029">shutdown</span>();</code></pre>
</div>
</div>
<div class="paragraph">
<p>A grande diferença é que quando criamos uma nova execução o ExecutorService retorna um <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Future.html"><code>Future</code></a> que irá prover informações sobre a execução e o retorno da execução. Um executor não aceita apenas um <code>Runnable</code>, mas também <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Callable.html"><code>Callable</code></a> que retorna valores. A opção por usar <code>Callable</code> irá tornar seu código mais legível.</p>
</div>
<div class="paragraph">
<p>Outro ponto importante do uso de <code>ExecutorService</code> é que assim que uma nova atividade é submetida, ela entrará na fila de execução. É preciso ressaltar que ela só será executada quando houver thread disponível. Isso significa que um <code>ExecutorService</code> deve ser usado para atividades rápidas e não com longa duração. Se você precisar executar algo que dure toda execução crie um ExecutorService de tamanho pré-definido, usando <code>newFixedThreadPool</code> ou cria a thread manualmente.</p>
</div>
<div class="paragraph">
<p>Por fim um ExecutorService não finaliza automaticamente, ele deve ser finalizado através do método <code>shutdown</code>. Caso você não chame esse método o seu programa vai virar um processo zumbi.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-06-controle-concorrencia">Controle de Concorrência</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Como vimos concorrência é um problema diferente de paralelismo, ela é a solução para garantir que apenas uma thread está executando um trecho de código. As soluções de concorrência da JVM são propostas para que seja usadas dentro de uma mesma instância da JVM, ou seja, não é possível pela biblioteca padrão garantir concorrência entre dois processos distintos.</p>
</div>
<div class="paragraph">
<p>Vamos começar a ver pelos modos mais antigos, mesmo que eles já não sejam os mais utilizados. O primeiro dele é o mais simples de todos, usar o modificado <code>synchronized</code>. No trecho de código abaixo, o <code>synchronized</code> permite que o de counter seja impresso na linha de comando sequencialmente, caso seja removido valores repetidos e fora de ordem aparecerão. O <code>synchronized</code> vai garantir que quando uma thread está executando o método <code>printAndIncrement</code> as outras serão bloqueadas até que a execução seja finalizada. Quando usamos o <code>synchronized</code> em um método de instância, o efeito do bloqueio só acontece quando método de um mesmo objeto são executados concorrentemente, caso o controle de concorrência deva ser feito globalmente o <code>synchronized</code> pode ser usado em métodos estáticos.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Sync</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #B00040">int</span> counter;

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #0000FF">Sync</span>() {
        counter <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">synchronized</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">printAndIncrement</span>() {
        counter<span style="color: #666666">++</span>;
        System.<span style="color: #7D9029">err</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Thread [%s] valor:%d&quot;</span>, Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">getName</span>(), counter));
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Usar o modificador <code>synchronized</code> ainda é uma prática bem comum apesar que existem soluções melhores. Ele deve ser usado quando é realmente necessário bloquear todo o bloco de execução. Se você precisa usar em uma das classes da biblioteca Collection (vista na sessão 3) a melhor solução é usar uma das classes da biblioteca padrão do Java. A classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Collections.html"><code>Collections</code></a> tem alguns métodos que criam um envolucro para objetos, por exemplo, se eu tenho uma lista e desejo usar ela em várias threads, eu posso usar <code>Collections.synchronizedList(minhaLista)</code>.</p>
</div>
<div class="paragraph">
<p>Observe no trecho de código abaixo que temos duas listas mas apenas a segunda pode ser usada em várias threads. Qualquer operação na segunda lista reflete na primeira. Usar uma lista não sincronizada pode ser que não faça o programa apresentar uma exceção, mas com certeza vai criar estados inconsistentes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>$ jshell
<span style="color: #666666">|</span>  Welcome to JShell <span style="color: #666666">--</span> Version <span style="color: #666666">18</span>
<span style="color: #666666">|</span>  For an introduction type: <span style="color: #666666">/</span>help intro

jshell<span style="color: #666666">&gt;</span> List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaLista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;&gt;</span>();
List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaLista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;&gt;</span>  ;
minhaLista <span style="color: #666666">==&gt;</span> <span style="color: #666666">[]</span>

jshell<span style="color: #666666">&gt;</span> List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaListaSync <span style="color: #666666">=</span> Collections.<span style="color: #7D9029">synchronizedList</span>(minhaLista);
List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaListaSync <span style="color: #666666">=</span> Collections.<span style="color: #7D9029">synchronizedList</span>(minhaLista);
minhaListaSync <span style="color: #666666">==&gt;</span> <span style="color: #666666">[]</span>

jshell<span style="color: #666666">&gt;</span> minhaLista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 1&quot;</span>)
minhaLista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 1&quot;</span>)
$3 <span style="color: #666666">==&gt;</span> <span style="color: #008000; font-weight: bold">true</span>

jshell<span style="color: #666666">&gt;</span> minhaListaSync.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 2&quot;</span>)
minhaListaSync.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 2&quot;</span>)
$4 <span style="color: #666666">==&gt;</span> <span style="color: #008000; font-weight: bold">true</span>

jshell<span style="color: #666666">&gt;</span> minhaLista
minhaLista
minhaLista <span style="color: #666666">==&gt;</span> <span style="color: #666666">[</span>String <span style="color: #666666">1</span>, String <span style="color: #666666">2]</span>

jshell<span style="color: #666666">&gt;</span> minhaListaSync
minhaListaSync
minhaListaSync <span style="color: #666666">==&gt;</span> <span style="color: #666666">[</span>String <span style="color: #666666">1</span>, String <span style="color: #666666">2]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>O <code>synchronized</code> também pode ser usado como bloco de código, mas essa é uma forma um pouco arcaica como veremos. Vamos imagina que temos duas threads, uma produzindo valores e a outra consumindo. A thread que consome valores deve sempre retornar um valor, não importa se não existe valores no momento. Normalmente isso é o que acontece quando temos um buffer em quem uma thread está produzindo e outra consumindo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Buffer</span> {
    <span style="color: #008000; font-weight: bold">private</span> Object lock <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Object();
    <span style="color: #008000; font-weight: bold">private</span> List<span style="color: #666666">&lt;</span><span style="color: #B00040">int</span><span style="color: #666666">[]&gt;</span> _buffer <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> LinkedList<span style="color: #666666">&lt;&gt;</span>();
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">add</span>(<span style="color: #B00040">int</span><span style="color: #666666">[]</span> valores) {
        <span style="color: #008000; font-weight: bold">synchronized</span>(lock) {
            _buffer.<span style="color: #7D9029">add</span>(valores);
            lock.<span style="color: #7D9029">notifyAll</span>();
        }
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span><span style="color: #666666">[]</span> <span style="color: #0000FF">consume</span>() {
        <span style="color: #B00040">int</span><span style="color: #666666">[]</span> nextValue <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">null</span>;
        <span style="color: #008000; font-weight: bold">synchronized</span>(lock) {
            <span style="color: #008000; font-weight: bold">while</span>(_buffer.<span style="color: #7D9029">isEmpty</span>()) {
                lock.<span style="color: #7D9029">wait</span>();
            }
            nextValue <span style="color: #666666">=</span> _buffer.<span style="color: #7D9029">remove</span>(<span style="color: #666666">0</span>);
        }
        <span style="color: #008000; font-weight: bold">return</span> nextValue;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>A classe acima está implementada usando técnicas que não devem mais ser usadas. O primeiro problema é que toda chamada ao bloco sincronizado será feita por apenas uma thread por vez, existe técnicas mais recentes que permitem que mais de uma thread acessem um bloco sincronizado que veremos a seguir. O bloco sincronizado deve ser feito usando um objeto em comum, no caso esse objeto pode ser compartilhado em mais de um objeto, caso a thread deseje esperar por alguma condição, deve se usar o método <code>wait</code> que será despertado por uma chamada ao método <code>notify</code> ou <code>notifyAll</code>. No exemplo acima, se não há valores a serem consumidos, eles devem esperar por um valor.</p>
</div>
<div class="paragraph">
<p>Uma alternativa ao bloco sincronizado é o uso da classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html">ReadWriteLock</a>. A necessidade dessa classe surgem quando se percebe que apenas as threads que escrevem devem ter acesso exclusivo, as threads de leitura podem acessar os métodos livremente. No exemplo acima não é possível usar ela porque ambos os métodos escrevem ao adicionar e remover valores na lista por isso serão necessárias algumas alterações.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Buffer</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> ReadWriteLock readWriteLock <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ReentrantReadWriteLock();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Lock readLock <span style="color: #666666">=</span> readWriteLock.<span style="color: #7D9029">readLock</span>();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Lock writeLock <span style="color: #666666">=</span> readWriteLock.<span style="color: #7D9029">writeLock</span>();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Condition newItem <span style="color: #666666">=</span> writeLock.<span style="color: #7D9029">newCondition</span>();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> List<span style="color: #666666">&lt;</span><span style="color: #B00040">int</span><span style="color: #666666">[]&gt;</span> _buffer <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> LinkedList<span style="color: #666666">&lt;&gt;</span>();

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">add</span>(<span style="color: #B00040">int</span><span style="color: #666666">[]</span> valores) {
        writeLock.<span style="color: #7D9029">lock</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            _buffer.<span style="color: #7D9029">add</span>(valores);
            newItem.<span style="color: #7D9029">signalAll</span>();
        } <span style="color: #008000; font-weight: bold">finally</span> {
            writeLock.<span style="color: #7D9029">unlock</span>();
        }
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span> <span style="color: #0000FF">available</span>() {
        readLock.<span style="color: #7D9029">lock</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            <span style="color: #008000; font-weight: bold">return</span> _buffer.<span style="color: #7D9029">size</span>();
        } <span style="color: #008000; font-weight: bold">finally</span> {
            readLock.<span style="color: #7D9029">unlock</span>();
        }
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span><span style="color: #666666">[]</span> <span style="color: #0000FF">consume</span>(<span style="color: #B00040">int</span> position) {
        readLock.<span style="color: #7D9029">lock</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            <span style="color: #008000; font-weight: bold">while</span> (_buffer.<span style="color: #7D9029">size</span>() <span style="color: #666666">&lt;=</span> position) {
                newItem.<span style="color: #7D9029">await</span>();
            }
            <span style="color: #008000; font-weight: bold">return</span> _buffer.<span style="color: #7D9029">get</span>(position);
        } <span style="color: #008000; font-weight: bold">finally</span> {
            readLock.<span style="color: #7D9029">unlock</span>();
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Na nossa nova classe <code>Buffer</code>, quem é responsável por saber a posição no buffer é a thread que consome que pode ser mais de uma. Cada chamada ao método <code>consome</code> e <code>available</code> poderão ser feitas sem nenhum bloqueio. Mas se uma chamada ao método <code>add</code> for feita, ela deverá esperar pela finalização de todas as chamadas aos locks de leitura e todos os locks de leitura deverão esperar pela finalização do lock de escrita. Os locks de leitura podem ser executados concorrentemente, mas o lock de escrita só pode acontecer quando nenhum outro lock estiver ativo.</p>
</div>
<div class="paragraph">
<p>No código acima podemos ver também o uso da classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/locks/Condition.html"><code>Condition</code></a>. Essa classe deve ser usada quando esperamos alguma condição especifica, no nosso caso é a lista ter o item desejado ou não. O uso dessa classe é bem similar ao dos métodos <code>wait</code>, <code>notify</code> e <code>notifyAll</code>, mas é adicionada uma melhor semântica pode podemos criar mais que uma condição e usar elas para dar uma boa legibilidade ao código.</p>
</div>
<div class="paragraph">
<p>Por fim a biblioteca padrão do Java tem uma série de classes atômicas que são extremamente úteis. Elas estão no pacote <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/atomic/package-summary.html"><code>java.util.concurrent.atomic</code></a> e todas elas tem comportamento similar, vão permitir você realizar operações atômicas sem se preocupar com a concorrência. Para demonstrar o uso delas vou mostrar o caso mais comum que é criar um contador sincronizado.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>ExecutorService executor <span style="color: #666666">=</span> Executors.<span style="color: #7D9029">newFixedThreadPool</span>(<span style="color: #666666">15</span>);
AtomicInteger counter <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> AtomicInteger(<span style="color: #666666">0</span>);
List<span style="color: #666666">&lt;</span>Future<span style="color: #666666">&lt;?&gt;&gt;</span> allFuture <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;&gt;</span>();
<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> <span style="color: #666666">1_000</span>; <span style="color: #666666">++</span>i) {
    allFuture.<span style="color: #7D9029">add</span>(executor.<span style="color: #7D9029">submit</span>(() <span style="color: #666666">-&gt;</span> System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Contador: &quot;</span> <span style="color: #666666">+</span> counter.<span style="color: #7D9029">incrementAndGet</span>())));
}
executor.<span style="color: #7D9029">shutdown</span>();
<span style="color: #008000; font-weight: bold">try</span> {
    executor.<span style="color: #7D9029">awaitTermination</span>(<span style="color: #666666">1</span>, TimeUnit.<span style="color: #7D9029">SECONDS</span>);
} <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
    Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>No código acima não podemos garantir que os valores impressos estarão em ordem, mas podemos garantir que todos os valores de 1 a 1000 serão impressos. A classe <code>AtomicInteger</code> garante que a operação <code>incrementAndGet</code> seja feita atomicamente, isso significa que ela não será interrompida por outra chamada a outro método desse mesmo objeto. Todas as classes desse pacote merecem nossa atenção pois elas são bem importantes, principalmente se você está desenvolvendo um aplicativo Desktop que irá lidar com várias threads.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Tutorial" /><category term="Threads" /><category term="Concorrência" /><category term="Paralelismo" /><summary type="html"><![CDATA[O que eu preciso saber de concorrência e paralelismo para desenvolver usando Java? A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry></feed>