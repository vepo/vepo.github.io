<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/Carreira.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/Carreira.xml</id><title type="html">vepo</title><subtitle>Um repositÃ³rio para todos os posts, palestras e tutoriais que jÃ¡ fiz. Java, Desenvolvimento de Software e reflexÃµes sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">Construindo softwares resilientes</title><link href="https://blog.vepo.dev/posts/construindo-software-resilientes" rel="alternate" type="text/html" title="Construindo softwares resilientes" /><published>2020-05-08T00:00:00+00:00</published><updated>2020-05-08T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/20-05-31-construindo-softwares-resilientes</id><content type="html" xml:base="https://blog.vepo.dev/posts/construindo-software-resilientes"><![CDATA[<p><em>â€”  JÃ¡ ouviu falar de <strong>eXtreme Go Horse (XGH)</strong>?</em> <br />
<em>â€”  NÃ£o?!</em> ğŸ™„ <br />
<em>â€”  Mas vocÃª pratica <strong>XGH</strong>?</em> ğŸ¤¨<br />
<em>â€”  NÃ£o?</em> <br />
<em>â€”  Ainda bem!</em> ğŸ˜€</p>

<p><strong>XGH</strong> Ã© uma piada que gosto muito. Espero que vocÃª nÃ£o o pratique. Mas coloquei ele na roda por seu exato oposto. Um SÃªnior deve construir softwares estÃ¡veis. E para se construir software estÃ¡veis vocÃª tem que ir pro extremo oposto do <strong>XGH</strong>. Devemos construir software resilientes.</p>

<p>Sim, eu usei a palavra resiliente. Vamos ao significado?</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/ou8mdzzu5v5ii8n4fbay.png" alt="Alt Text" /></p>

<p>ResiliÃªncia Ã© a propriedade de um sistema suportar adversidade.</p>

<h1 id="construindo-resiliÃªncia">Construindo ResiliÃªncia</h1>

<p>NÃ³s como desenvolvedores resolvemos problemas automatizando coisas. Quando vemos um problema jÃ¡ pensamos no modo como ele deve ser resolvido.</p>

<p>Mas e se houver outra forma? 
E se seu usuÃ¡rio nÃ£o entender a forma como deve ser feito o processo? 
E se houver um erro durante processo? 
E se necessitar uma configuraÃ§Ã£o na mÃ¡quina?</p>

<p>Ã‰ nessas horas que seu software tem que ser Resiliente.</p>

<p>Verdadeiros SÃªniors constroem sistemas resilientes. Mas nÃ£o seja gnÃ³stico, nÃ£o Ã© um post que vai te fazer construir sistemas resilientes, Ã© resolvendo bugs! Tudo que posso fazer por vocÃª Ã© te ensinar o caminho, vocÃª terÃ¡ que trilhar ele sozinho.</p>

<p>EntÃ£o vamos com algumas dicas:</p>

<h2 id="1-um-sÃªnior-pensa-em-todos-os-problemas-que-podem-acontecer-em-um-fluxo">1. Um SÃªnior pensa em todos os problemas que podem acontecer em um fluxo</h2>

<p>Quando vocÃª vai escrever um cÃ³digo, vocÃª sempre tem premissas:</p>

<ol>
  <li>Existe um arquivo de configuraÃ§Ã£o.</li>
  <li>HÃ¡ uma classe que implementa essa interface.</li>
  <li>O servidor estÃ¡ de pÃ©.</li>
  <li>Etcâ€¦</li>
</ol>

<p>E se uma premissas dessas nÃ£o for verdadeira? Seu cÃ³digo irÃ¡ funcionar? Ou pelo menos irÃ¡ mostrar o erro correto?</p>

<p>Vamos para exemplos reais?</p>

<p>Eu tenho um projeto que estou desenvolvendo para ser um tipo de tester. DÃ¡ uma olhada lÃ¡:</p>

<div class="github-repo">
    <h2>
        <img class="logo" src="/assets/images/plugins/github-logo.png" alt="GitHub logo" loading="lazy" />
        <img class="user" src="https://avatars.githubusercontent.com/u/353569?v=4" loading="lazy" />
        <span class="url">
            <a href="https://github.com/vepo">
                vepo
            </a> 
            /
            <a href="https://github.com/vepo/plain-test">
                plain-test
            </a>
        </span>
    </h2>
</div>

<p>Nele eu executo o testes em passos (<em>Step</em>), cada passo tem um plugin que implementa. EntÃ£o para execuÃ§Ã£o de um passo eu preciso:</p>

<ol>
  <li>Achar o Plugin de ExecuÃ§Ã£o</li>
  <li>Executar o Passo</li>
  <li>Verificar os Assertions do Passo</li>
</ol>

<p>Simples? Poderia ser implementado em 1 linha?</p>

<div data-gist="https://gist.github.com/vepo/871ebd3e0fa62aebfbc135e61ad74235"></div>

<p>Mas temos dois problemas aqui que devem ser validados.</p>

<ol>
  <li>HÃ¡ um Plugin para implementar o Passo?</li>
  <li>Na definiÃ§Ã£o do Passo, todos os parÃ¢metros estÃ£o definidos?</li>
</ol>

<p>VÃª que temos mais dois problemas a verificar? E detalhe, esses problemas sÃ£o um erro de definiÃ§Ã£o do teste e nÃ£o de execuÃ§Ã£o do teste. Logo o motivo da falha deve ser diferente.</p>

<div data-gist="https://gist.github.com/vepo/416b699bb7c9fca3b49e202b19d99d7d"></div>

<p>Ao se identificar um erro, exiba a mensagem de erro correta, que ajuda quem irÃ¡ resolver esse erro.</p>

<h2 id="2-um-sÃªnior-desenvolve-software-que-Ã©-resistente-a-desenvolvedores">2. Um SÃªnior desenvolve software que Ã© resistente a desenvolvedores</h2>

<p>Ok! VocÃª desenvolveu o negÃ³cio lindamente. EstÃ¡ tudo funcionando perfeitamente, fez o <em>deploy</em> em produÃ§Ã£o. Resultado: usuÃ¡rios felizes! ğŸ˜€</p>

<p>Fim? Pode ser que nÃ£o, em algum momento esse software poderÃ¡ ser atualizado. Pode ser necessÃ¡rios corrigir os bugs que ainda nÃ£o foram encontrados, ou poderÃ¡ ser adicionada alguma feature. Qualquer alteraÃ§Ã£o, em qualquer lugar, tem o potencial de alterar a lÃ³gica do seu software. Como podemos validar que tudo estÃ¡ funcionando corretamente?</p>

<p><em>NÃ£o vou vender TDD como uma bala de prata, esse nÃ£o Ã© o problema que TDD resolve. Depois falo de TDD. Eu gosto de TDD por isso repito TDDâ€¦ Continuamenteâ€¦ TDD</em></p>

<p>Um SÃªnior de verdade constrÃ³i software resiliente a desenvolvedores. Mas como fazer isso?</p>

<p>VocÃª deveria se preocupar com algumas coisas:</p>

<ol>
  <li>Qual a cobertura de testes do sistema?</li>
  <li>Os testes foram feitos sÃ³ pra passar pela cobertura de testes e agradar o arquiteto? Ou os testes estÃ£o realmente validando o output?</li>
  <li>Os testes sÃ£o executados no processo de build?</li>
</ol>

<p>Caso vocÃª tenha respondido nÃ£o para qualquer uma das perguntas abaixo, seu software nÃ£o Ã© resiliente a desenvolvedores. E vocÃª nÃ£o pode confiar em si mesmo a ponto de pensar que vocÃª conseguirÃ¡ resolver todos os problemas no futuro.</p>

<p>Quando resolvemos um bug, ou adicionamos uma feature nova, temos um pensamento viciado. Apenas pensamos em um fluxo, e nos esquecemos de outros. Ã‰ normal e esperado isso. VocÃª Ã© um engenheiro e nÃ£o Deus.</p>

<p>Como eu resolvo isso? Eu crio testes unitÃ¡rios com todos os pressupostos.</p>

<div data-gist="https://gist.github.com/vepo/88d10d4c6e4ae0523ffe19268f5871f0"></div>

<p>Ã‰ um habito meu comeÃ§ar meu desenvolvimento com alguns pressupostos desses, mas eles nÃ£o fazem parte do <em><strong>TDD</strong></em>, pois nÃ£o sÃ£o <em>Baby Step</em>. Mas eles dÃ£o uma clara visÃ£o do que vai falhar. Pode ser que em uma prÃ³xima feature um passo desses falhe, e o desenvolvedor irÃ¡ decidir:</p>

<ol>
  <li>Se corrige o problema</li>
  <li>Se corrige o teste</li>
  <li>Se remove o teste, caso ele nÃ£o faÃ§a mais sentido.</li>
</ol>

<h2 id="3-um-sÃªnior-investiga-possÃ­veis-erros">3. Um SÃªnior investiga possÃ­veis erros</h2>

<p><em>â€”  EntÃ£o, esse teste falha em 50% dos casos. Mas caso falhe, roda de novo que dÃ¡ certo.</em></p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/lefte06h7r9ngi7d4l8b.jpg" alt="Alt Text" /></p>

<p>Se vocÃª ouvir essa frase. Recrimine! Isso nÃ£o pode acontecer.</p>

<p>Um possÃ­vel erro intermitente em um teste pode ser um erro intermitente em produÃ§Ã£o. Pode ser custoso investigar antes do <em>deploy</em>? Pode! Mas serÃ¡ mais barato do que investigar depois do <em>deploy</em>, nÃ£o?</p>

<p>Um SÃªnior de verdade sabe que pequenos problemas nÃ£o podem passar sem investigaÃ§Ã£o. NÃ£o pode buscar a soluÃ§Ã£o fÃ¡cil de ignorar ou remover o teste. Isso Ã© fÃ¡cil, mas para um sÃªnior Ã© porco <em>(com todo respeito aos porcos)</em>.</p>

<h1 id="conclusÃ£o">ConclusÃ£o</h1>

<p>Quase todo software necessita de resiliÃªncia. E um SÃªnior de Verdade sabe ver isso.</p>

<p>Ele consegue se precaver de vÃ¡rias situaÃ§Ãµes:</p>

<ol>
  <li>Erros esperados</li>
  <li>Erros inesperados</li>
  <li>Pessoas esperadas</li>
  <li>Pessoas inesperadas</li>
  <li>Aleatoriedadesâ€¦.</li>
</ol>

<p>NÃ£o que ele deva ser um Deus em se tratando de desenvolvimento, mas tem que praticar a disciplina de promover a resiliÃªncia.</p>

<p>Esse Ã© um caminho a ser trilhadoâ€¦.</p>

<h1 id="livros-recomendados">Livros Recomendados</h1>

<ol>
  <li><a href="https://www.amazon.com.br/projeto-f%C3%AAnix-Gene-Kim/dp/8550801895?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=2AYVJTDQGN55J&amp;keywords=projeto+phoenix&amp;qid=1588968692&amp;sprefix=projeto+ph%2Caps%2C272&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=45c6f18224bfe9cf0d82b737331a5761&amp;language=pt_BR&amp;ref_=as_li_ss_tl">O Projeto FÃªnix: um Romance Sobre TI, DevOps e Sobre Ajudar o seu NegÃ³cio a Vence</a></li>
  <li><a href="https://www.amazon.com.br/Test-Driven-Development-Kent-Beck/dp/0321146530?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=BXKYM1LP3IQH&amp;keywords=test+driven+development&amp;qid=1588968574&amp;sprefix=test+dr%2Caps%2C275&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=b9ad00a6e5089e02d277bed813cb0283&amp;language=pt_BR&amp;ref_=as_li_ss_tl">Test Driven Development: By Example</a></li>
  <li><a href="https://www.amazon.com.br/C%C3%B3digo-limpo-Robert-C-Martin/dp/8576082675?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;keywords=clean+code&amp;qid=1588968796&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=7ff5c1abee4d3b6a1860924b6f392698&amp;language=pt_BR&amp;ref_=as_li_ss_tl">CÃ³digo Limpo: Habilidades PrÃ¡ticas do Agile Software</a></li>
</ol>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Desenvolvimento de Software" /><category term="ProgramaÃ§Ã£o" /><category term="TDD" /><category term="Carreira" /><summary type="html"><![CDATA[Um SÃªnior de Verdade sabe construir software resilientes! Mas o que significa um Software Resiliente?]]></summary></entry></feed>