<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/Tutorial.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/Tutorial.xml</id><title type="html">vepo</title><subtitle>Um repositório para todos os posts, palestras e tutoriais que já fiz. Java, Desenvolvimento de Software e reflexões sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">Concorrência e Paralelismo</title><link href="https://blog.vepo.dev/posts/java-101-threads" rel="alternate" type="text/html" title="Concorrência e Paralelismo" /><published>2022-09-03T00:00:00+00:00</published><updated>2022-09-03T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/18-00-00-java-101-threads</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-threads"><![CDATA[<div class="paragraph">
<p>Esse post faz parte de uma série introdutória sobre Java, se você não conhece a linguagem e não leu os posts anteriores, recomendo os ler para ter uma visão melhor da plataforma. Nessa série, já falamos sobre o que é o ecossistema Java, o que é a biblioteca Collections, como Java faz Orientação a Objetos e o que é a biblioteca I/O, esses tópicos são necessários para o que vamos falar agora: <strong>Concorrência e Paralelismo</strong>.</p>
</div>
<div class="sect1">
<h2 id="cap-06-o-que-e-concorrencia-e-paralelismo">O que é Concorrência e Paralelismo?!?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nos frameworks modernos é muito raro lidarmos com paralelismo, apesar que podemos lidar com concorrência o tempo inteiro. Para entender isso precisamos primeiro compreender a diferença entre esses dois conceitos. Para isso vamos imaginar que estamos em uma biblioteca, nessa biblioteca tem dois tipos de livros: os comuns e os raros. Os livros comuns estão acessíveis na estantes para que todos possam ler e pegar emprestado, mas os livros raros estão disponíveis em uma sala especifica em que você precisa pedir para um bibliotecário pegar ele e deve ler somente na sala.</p>
</div>
<div class="paragraph">
<p>Vamos imaginar que surgiu um estranho interesse por se ler livros raros na cidade e isso gerou uma procura inesperada que surpreendeu até mesmo a direção da biblioteca.</p>
</div>
<div class="paragraph">
<p><em>— Todos estão disponíveis na internet! Só acessar o <a href="https://www.gutenberg.org/browse/languages/pt">Projeto Gutenberg</a>!!!</em></p>
</div>
<div class="paragraph">
<p>Isso gerou uma fila enorme na sessão de livros raros pois só tinha um bibliotecário para encontrar o livro, registrar a saída e ele ainda precisava observar se o livro estava sendo manipulado corretamente. Logo surgiram várias opções de como melhorar o atendimento da biblioteca, mas só poderiam ser consideradas as opções que mantivessem o cuidado para com as obras.</p>
</div>
<div id="cap-06-biblioteca-antiga" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-06/biblioteca-antiga.jpg" alt="biblioteca antiga">
</div>
<div class="title">Figura 1. Biblioteca da Escola Sá de Miranda</div>
</div>
<div class="paragraph">
<p>A primeira opção foi contratar mais um bibliotecário. Feita a contratação ele começou a dividir as tarefas com o mais antigo. Enquanto o primeiro cuidava de encontrar as obras e registrar as saídas, o segundo fiscalizava se todos os usuários da biblioteca estavam manuseando corretamente o livro.</p>
</div>
<div class="paragraph">
<p>A direção da biblioteca achou a opção boa, mas eles perceberam que o aumento da eficiência foi de apenas 30% enquanto se esperava 100% de eficiência com a contratação de um novo funcionário. Isso aconteceu porque as atividades foram distribuídas, mas nenhuma atividade era feita em paralelo. A atividade que mais demandava tempo era encontrar a obra e registrar a sua saída com cerca de 90% do tempo, logo essa atividade deveria ser feita em paralelo. <strong>Paralelismo</strong> acontece quando a mesma tarefa é realizada simultaneamente por mais de um bibliotecário. Assim os dois bibliotecários decidiram que iriam trabalhar em todo o conjunto de atividades aumentando a eficiência de 30% para 50%.</p>
</div>
<div class="paragraph">
<p>Mas eles encontraram um pequeno problema, só havia um computador na bancada e por isso eles precisavam se revesar para usar o computador. No começo eles replicavam a atividade que faziam quando havia apenas 1 bibliotecário: atendiam o cliente, encontravam o livro e registravam a saída. Mas perceberam que o tempo de registrar o livro também era demorado, ele demorava cerca de 3 vezes o tempo de pegar o livro, pois o software era bem lento e implementado em Javascript. Logo eles foram procurar solução para o problema deles e descobriram que estavam enfrentando um problema de concorrência. <strong>Concorrência</strong> acontece quando dois ou mais bibliotecários desejam acessar recursos limitados.</p>
</div>
<div class="paragraph">
<p>Eles perceberam que o mais demorado era entrar no sistema, logo resolveram atender 3 clientes por vez. Assim cada bibliotecário pegava o pedido de 3 clientes e depois registravam no sistema. Essa abordagem fez com que o atendimento se tornasse 70% mais eficiente do que era quando se tinha apenas um funcionário.</p>
</div>
<div class="paragraph">
<p>Por fim a biblioteca decidiu contratar uma bibliotecária para fiscalizar o manuseio dos livros porque percebeu que só tinha homens nessa história. E o aumento de eficiência passou para 150% pois ela conseguia fiscalizar e atender na bancada quando possível.</p>
</div>
<div class="paragraph">
<p>Eu espero que com essa história você tenha compreendido que esse processo acontece com qualquer servidor web. É EXATAMENTE ASSIM! Pense que a biblioteca é o servidor, os bibliotecários são <em>threads</em>, os livros são os recursos que o servidor usa e os clientes são os clientes que estão acessando a API do servidor. Eu não sei se os conceitos de concorrência e paralelismo são usado na bibliotecas, eles são conceitos da computação que foram usado nesse texto para descrever e diferenciar eles. Logo podemos redefinir <strong>Paralelismo</strong> quando a mesma tarefa é realizada simultaneamente por mais de uma <em>thread</em> ou processo e <strong>Concorrência</strong> quando acontece duas ou mais <em>threads</em>, ou processos desejam acessar recursos limitados.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-06-thread-e-processo">O que é Thread e Processo?!?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Falar de Paralelismo e Concorrência não é uma tarefa fácil porque envolve vários conceitos de vários níveis. Até agora nós falamos de conceitos abstratos, mas agora vamos falar de algo bem mais concreto. Eu citei Thread e Processo e esses são conceitos sobre o sistema operacional.</p>
</div>
<div class="paragraph">
<p>Um processo é um programa rodando na memória. Ele é instanciado pelo sistema operacional e terá seu ciclo de vida até ser encerrado por si mesmo ou pelo próprio sistema operacional. Cada processo tem um identificador único e compartilha os recursos da máquina com outros processo. No trecho abaixo vemos a listagem dos 9 primeiros processos iniciados pelo Linux que ainda estão em execução, observe que o <code>PID</code> é o identificado único de cada processo, se eu quiser finalizar um processo preciso enviar um comando <code>kill -15 &lt;PID&gt;</code> onde <strong>-15</strong> é o sinal que o programa deve ser encerrado, se eu usar <strong>-9</strong> ele será encerrado imediatamente.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>$ ps -aux | head
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root           <span style="color: #666666">1</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0 <span style="color: #666666">202552</span>  <span style="color: #666666">5172</span> ?        Ss   Jul01  <span style="color: #666666">70</span>:40 /usr/lib/systemd/systemd --switched-root --system --deserialize <span style="color: #666666">22</span>
root           <span style="color: #666666">2</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:05 <span style="color: #666666">[</span>kthreadd<span style="color: #666666">]</span>
root           <span style="color: #666666">4</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S&lt;   Jul01   <span style="color: #666666">0</span>:00 <span style="color: #666666">[</span>kworker/0:0H<span style="color: #666666">]</span>
root           <span style="color: #666666">6</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:35 <span style="color: #666666">[</span>ksoftirqd/0<span style="color: #666666">]</span>
root           <span style="color: #666666">7</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:07 <span style="color: #666666">[</span>migration/0<span style="color: #666666">]</span>
root           <span style="color: #666666">8</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:00 <span style="color: #666666">[</span>rcu_bh<span style="color: #666666">]</span>
root           <span style="color: #666666">9</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01  <span style="color: #666666">37</span>:47 <span style="color: #666666">[</span>rcu_sched<span style="color: #666666">]</span>
root          <span style="color: #666666">10</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S&lt;   Jul01   <span style="color: #666666">0</span>:00 <span style="color: #666666">[</span>lru-add-drain<span style="color: #666666">]</span>
root          <span style="color: #666666">11</span>  <span style="color: #666666">0</span>.0  <span style="color: #666666">0</span>.0      <span style="color: #666666">0</span>     <span style="color: #666666">0</span> ?        S    Jul01   <span style="color: #666666">0</span>:22 <span style="color: #666666">[</span>watchdog/0<span style="color: #666666">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Se fossemos falar em processos no nosso exemplo da biblioteca, teríamos que criar uma biblioteca nova. Como eu disse, dois processo compartilham recursos mas isso não significa que eles podem acessar o mesmo recurso ao mesmo tempo. Por exemplo, se eu tenho um servidor rodando na porta 80, não posso iniciar outro processo na porta 80. Um processo não tem acesso a memória de outro processo, isso significa que para um mesmo objeto não pode existir em dois processos diferentes. (<em>Até pode, mas não vamos falar de RMI porque é complicado e já foi removido da biblioteca padrão do Java</em>.)</p>
</div>
<div class="paragraph">
<p><em>—  E se eu quiser que as requisições que cheguem na porta 80 sejam processadas em paralelo, como faço?!?!</em></p>
</div>
<div class="paragraph">
<p>Lembra da nossa biblioteca? Pois é, cada biblioteca é um processo, mas cada bibliotecário é uma <em>Thread</em>. <em>Thread</em> são dois fluxos que compartilham o mesmo espaço de memória, ou seja, é quando um processo tem dois fluxos de execução em paralelo compartilhando recursos. Threads podem acessar a mesma porta, assim como podem acessar os mesmo objetos. Mas ele não podem ser feitas ao mesmo momento. Lembra do computador do balcão da biblioteca? A metáfora da biblioteca foi construída para similar exatamente o que acontece em um computador.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-06-thread-e-processo-em-java">Thread e Processo em Java</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vamos agora mostrar algumas classes que podemos usar para manipular processos e threads usando Java. Uma das preocupações da plataforma Java foi criar uma abstração para que o mesmo código possa ser usado em qualquer sistema operacional, logo todo o código demonstrado pode ser executando tando em Linux quando Windows e sistemas derivados do Unix como o MacOS.</p>
</div>
<div class="sect2">
<h3 id="_processos">Processos</h3>
<div class="paragraph">
<p>Para que possamos acessar as informações de todos os processos em execução podemos usar a classe <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/ProcessHandle.html">ProcessHandle</a> (<em>adicionada no Java 9</em>). Navegue pela documentação dela para perceber que processos podem ter uma relação de parentescos como podemos perceber através dos métodos <code>children()</code>, <code>descendants​()</code> e <code>parent​()</code>. Na execução abaixo vemos as informações do processo atual e a listagem de todos os processos em execução.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>$ jshell
<span style="color: #666666">|</span>  Welcome to JShell <span style="color: #666666">--</span> Version <span style="color: #666666">18</span>
<span style="color: #666666">|</span>  For an introduction type: <span style="color: #666666">/</span>help intro

jshell<span style="color: #666666">&gt;</span> System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>().<span style="color: #7D9029">pid</span>());
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>  .<span style="color: #7D9029">pid</span>()  );
<span style="color: #666666">20092</span>

jshell<span style="color: #666666">&gt;</span> System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>().<span style="color: #7D9029">info</span>());
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(ProcessHandle.<span style="color: #7D9029">current</span>  .<span style="color: #7D9029">info</span>  );
<span style="color: #666666">[</span>user: Optional<span style="color: #666666">[</span>VEPO<span style="color: #666666">]</span>, cmd: C:<span style="border: 1px solid #FF0000">\</span>Users<span style="border: 1px solid #FF0000">\</span>vepo<span style="border: 1px solid #FF0000">\</span>.<span style="color: #7D9029">sdkman</span><span style="border: 1px solid #FF0000">\</span>candidates<span style="border: 1px solid #FF0000">\</span>java<span style="border: 1px solid #FF0000">\</span><span style="color: #666666">18-</span>open<span style="border: 1px solid #FF0000">\</span>bin<span style="border: 1px solid #FF0000">\</span>java.<span style="color: #7D9029">exe</span>, startTime: Optional<span style="color: #666666">[2022-09-02</span>T18:<span style="color: #666666">49</span>:<span style="color: #666666">28.093</span>Z<span style="color: #666666">]</span>, totalTime: Optional<span style="color: #666666">[</span>PT0<span style="color: #666666">.328125</span>S<span style="color: #666666">]]</span>

jshell<span style="color: #666666">&gt;</span> ProcessHandle.<span style="color: #7D9029">allProcesses</span>().<span style="color: #7D9029">forEach</span>(System.<span style="color: #7D9029">out</span>::println);
ProcessHandle.<span style="color: #7D9029">allProcesses</span>  .<span style="color: #7D9029">forEach</span>(System.<span style="color: #7D9029">out</span>::println);
<span style="color: #666666">0</span>
<span style="color: #666666">4</span>
<span style="color: #666666">72</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Caso você deseje criar um novo processo, é preciso fazer uma chamada de sistema usando a classe <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Runtime.html">Runtime</a>. No trecho de código abaixo usamos o método <code>exec</code> para criar um novo processo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>jshell<span style="color: #666666">&gt;</span> Runtime.<span style="color: #7D9029">getRuntime</span>().<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>)
Runtime.<span style="color: #7D9029">getRuntime</span>  .<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>)
$4 <span style="color: #666666">==&gt;</span> Process<span style="color: #666666">[</span>pid<span style="color: #666666">=19628</span>, exitValue<span style="color: #666666">=</span><span style="color: #BA2121">&quot;not exited&quot;</span><span style="color: #666666">]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Na resposta da execução podemos ver que o método <code>exec</code> retorna o novo processo, mas não espera por ele terminar, retornando apenas um objeto <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html">Process</a> para poder ser manipulado. Em posse desse objeto, podemos esperar por ele terminar e ver se a execução foi um sucesso.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>jshell<span style="color: #666666">&gt;</span> Runtime.<span style="color: #7D9029">getRuntime</span>().<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>).<span style="color: #7D9029">waitFor</span>()
Runtime.<span style="color: #7D9029">getRuntime</span>  .<span style="color: #7D9029">exec</span>(<span style="color: #BA2121">&quot;pwd&quot;</span>).<span style="color: #7D9029">waitFor</span>
$5 <span style="color: #666666">==&gt;</span> <span style="color: #666666">0</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Percebeu que o método <code>waitFor</code> retornou <strong>0</strong>? Todo processo precisa finalizar com um número e zero significa sucesso. Qualquer número diferente de zero significa que o programa foi finalizado com erro. O programa que eu executei acima é o <code>pwd</code> que retorna o diretório corrente em Linux, apesar de usar Windows uso o Git Bash que é um porte do MinGW que simula um bash Linux.</p>
</div>
</div>
<div class="sect2">
<h3 id="_threads">Threads</h3>
<div class="paragraph">
<p><em>Threads</em> também são criadas pelo sistemas operacional, mas o Java dá suporte a duas bibliotecas bem interessantes que precisamos demonstrar. A primeira é a classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Thread.html">Threads</a> que deve ser usada com muita parcimônia essa classe, o livro <a href="https://www.amazon.com.br/Java-Efetivo-Melhores-Pr%C3%A1ticas-Plataforma/dp/8550804622?crid=6C287ENLSDOW&amp;keywords=java+efetivo&amp;qid=1662253615&amp;sprefix=java+ef%2Caps%2C363&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=092f42dffa52d29c336aacab87c58558&amp;language=pt_BR&amp;ref_=as_li_ss_tl">Java Efetivo</a> nos diz no <strong>Item 80: Dê preferência aos executores, às tarefas e às streams em vez de threads</strong>. Os <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Executors.html">Executors</a> são a proxima classe que vamos ver que podem entregar as mesmas funcionalidades.</p>
</div>
<div class="paragraph">
<p><em>— Então porque entender Threads?!?!</em></p>
</div>
<div class="paragraph">
<p><em>Threads</em> são importantes porque são um conceito do sistema operacional. Um executor não elimina uma thread, ele apenas facilita a implementação delas e otimiza o seu uso. Threads são gerenciadas pelo Sistema Operacional. O tempo de CPU será dividido entre os processos e as threads. Isso significa que se seu computador tem 4 CPUs e seu programa tem ao menos 2 threads, é provável que em algum momento seu programa esteja rodando em 2 CPUs ao mesmo tempo, mas quem define isso é o sistema operacional.</p>
</div>
<div class="paragraph">
<p>Threads são um recurso do sistema operacional limitado e caro. No Windows isso não é transparente, mas no Linux é possível acessar essas informações facilmente através do arquivo <code>/proc/sys/kernel/threads-max</code>. Na execução abaixo vemos que essa instância do Linux só pode rodar 32.768 processos concorrentes e 100.435 threads concorrentes, o que dá em média 3 threads por processo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>$ cat /proc/sys/kernel/threads-max
<span style="color: #666666">100435</span>

$ cat /proc/sys/kernel/pid_max
<span style="color: #666666">32768</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><em>— Mas 3 threads por processo não é muito pouco?!?!</em></p>
</div>
<div class="paragraph">
<p>Não! Porque é praticamente impossível rodar 32.768 processos concorrentes e a grande maioria dos processos tem apenas uma thread rodando.</p>
</div>
<div class="paragraph">
<p><em>— Mas o que acontece quando o Java pede uma thread nova?</em></p>
</div>
<div class="paragraph">
<p>Para entender isso, precisamos compreender outro conceito importante de Sistemas Operacionais o espaço do usuário e o espaço do kernel (<a href="https://pt.wikipedia.org/wiki/Espa%C3%A7o_de_usu%C3%A1rio"><em>user space</em> e <em>kernel space</em></a>). Espaço do usuário é todo o código dos nossos programas, já o espaço do kernel é o código do sistema operacional que nossos programas usam para realizar algumas operações. Toda operação que sai do espaço do usuário e vai para o espaço do kernel é custosa porque pode envolver recursos compartilhados como sockets, arquivos ou threads. Logo, criar uma nova thread é custoso porque tem que criar uma nova thread no sistema operacional que não é apenas alocar um espaço na memória.</p>
</div>
<div class="paragraph">
<p>No código abaixo uma thread é criada que sua única função é pegar o instante em que é iniciada, dormir por 500ms e armazenar o instante em que ela é finalizada. Os tempos deve ser armazenados no array tempos porque nenhuma variável pode ser alterada diretamente entre duas threads que não seja uma variável <code>final</code>, pois estamos falando de duas pilhas de execução diferentes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">long</span><span style="color: #666666">[]</span> tempos <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">long</span><span style="color: #666666">[4]</span>;
tempos<span style="color: #666666">[0]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
Thread t <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Thread() {
    <span style="color: #AA22FF">@Override</span>
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">run</span>() {
        tempos<span style="color: #666666">[1]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            Thread.<span style="color: #7D9029">sleep</span>(<span style="color: #666666">500</span>);
        } <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
            Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
        }
        tempos<span style="color: #666666">[2]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
    }
};
t.<span style="color: #7D9029">start</span>();
<span style="color: #008000; font-weight: bold">try</span> {
    t.<span style="color: #7D9029">join</span>();
} <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
    Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
}
tempos<span style="color: #666666">[3]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de inicialização: %dµs&quot;</span>, (tempos<span style="color: #666666">[1]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de execução     : %dµs&quot;</span>, (tempos<span style="color: #666666">[2]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[1]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo total           : %dµs&quot;</span>, (tempos<span style="color: #666666">[3]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>O resultado da execução é o visto abaixo, observe que demora quase meio milissegundo para que a thread seja iniciada. Esse tempo pode parecer pouco, mas se houver um uso abusivo dessa classe pode impactar a performance, pois esse tempo é latência adicionada ao processamento.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>Tempo de inicialização: 436µs
Tempo de execução     : 510061µs
Tempo total           : 510643µs</code></pre>
</div>
</div>
<div class="paragraph">
<p>Observe também que usamos os métodos <code>start</code> e <code>join</code>, eles servem para controlar a thread. Uma thread não inicia sua execução imediatamente, é preciso que o código que a instanciou dispare a execução. Mas quando a execução se inicia os dois códigos começam a ser executados em paralelo, para que se aguarde a finalização da thread é preciso usar o método <code>join</code> que fará com que a thread corrente seja bloqueada até que a outra seja finalizada.</p>
</div>
<div class="paragraph">
<p>Outro ponto importante é o uso da exceção <code>InterruptedException</code>, ela é lançada pela JVM toda vez que a thread é interrompida pelo sistema operacional.</p>
</div>
<div class="paragraph">
<p><em>— Mas o que significa a thread ser interrompida pelo sistema operacional?</em></p>
</div>
<div class="paragraph">
<p>Ora, já teve vezes em que uma janelinha do Windows ficou não responsiva e você foi lá forçou ela a ser fechada? Ou você executou um comando no bash e não quis esperar a resposta e pressionou <strong>CRTL + C</strong>. Nessa hora o sistema operacional envia um sinal ao programa que ele deve finalizar, o <a href="https://pt.wikipedia.org/wiki/SIGTERM">SIGTERM</a>. Quando esse sinal é recebido pela thread, ela deve liberar todos os recursos e se finalizar, por isso quanto tempos uma <code>InterruptedException</code> é hora de limpar a casa e fechar tudo.</p>
</div>
<div class="paragraph">
<p>Se você ignorar essa exception, o seu processo pode virar um <a href="https://pt.wikipedia.org/wiki/Processo_zombie">processo zumbi</a>, pois outras threads podem ter obedecido o sinal e já ter finalizada criando instabilidade para a execução. Então, recebeu um <code>InterruptedException</code>, fecha tudo e chama <code>Thread.currentThread().interrupt()</code>.</p>
</div>
<div class="paragraph">
<p>Há um outro sinal que não fornece essa informação, o <a href="https://pt.wikipedia.org/wiki/SIGKILL">SIGKILL</a>, o sistema operacional simplesmente mata a execução sem nenhuma educação e protocolo.</p>
</div>
<div class="paragraph">
<p>Por fim, você deve ter reparado que implementamos o método <code>run</code> na thread. Esse método é definido na classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Runnable.html">Runnable</a>, essa classe é muito importante porque nem sempre precisamos definir uma thread nova, podemos estender essa classe e criar quantas threads forem necessária com o mesmo código.</p>
</div>
<div class="paragraph">
<p>Existe a possibilidade de se criar grupos de threads com a classe <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadGroup.html">ThreadGroup</a>, mas não vamos abordar ela porque todas as funcionalidades delas podem ser endereçadas com Executors.</p>
</div>
</div>
<div class="sect2">
<h3 id="_executors">Executors</h3>
<div class="paragraph">
<p>Executors são a nova, <em>em relação a Thread</em>, biblioteca adicionada no Java 5 que permite um controle melhor sobre Threads e grupos de threads. A vantagem do uso da classe Executors é que temos uma interface bem mais interessante, como veremos a diante. Primeiro vamos focar em performance.</p>
</div>
<div class="paragraph">
<p>Como falamos, criar thread pode ser uma operação cara, com executors podemos criar pool de threads ou reutilizar threads já existentes sem a necessidade de se criar novas threads. Se compararmos a execução vemos que o uso de pools de thread diminuem o tempo gasto com a inicialização dessas threads. Nos teste que executamos, vemos que o tempo de inicialização e o tempo médio total são menores, somente o tempo médio de execução é maior, mas isso é devido a fatores externos ao código já que executamos o mesmo código em ambos o caso.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>Usando Threads
Tempo de inicialização: 402µs
Tempo de execução     : 511415µs
Tempo total           : 511939µs

Tempo médio de inicialização: 77370µs
Tempo médio de execução     : 50792817µs
Tempo médio total           : 50880048µs

Usando Executors
Tempo de inicialização: 2829µs    (+2.427µs)
Tempo de execução     : 509877µs  (-1.538µs)
Tempo total           : 513237µs  (+1.298µs)

Tempo médio de inicialização: 19708µs    (-57.662µs)
Tempo médio de execução     : 50806122µs (+13.305µs)
Tempo médio total           : 50839674µs (-40.374µs)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para se criar um <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/ExecutorService.html"><code>ExecutorService</code></a> deve se usar a classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Executors.html"><code>Executors</code></a>. Nessa classe tempos vários tipos de ExecutorServices, mas os mais importantes são os <strong>FixedThreadPool</strong>, <strong>CachedThreadPool</strong> e <strong>ScheduledThreadPool</strong>. Cada um desses tem suas peculiaridades que não vamos abordar aqui, apenas vamos ressaltar que <strong>ScheduledThreadPool</strong> deve ser usado quando precisamos criar threads que executam em intervalos pré definidos.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">long</span><span style="color: #666666">[]</span> tempos <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">long</span><span style="color: #666666">[4]</span>;
tempos<span style="color: #666666">[0]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
ExecutorService executor <span style="color: #666666">=</span> Executors.<span style="color: #7D9029">newSingleThreadExecutor</span>();
Future<span style="color: #666666">&lt;?&gt;</span> ft <span style="color: #666666">=</span> executor.<span style="color: #7D9029">submit</span>(() <span style="color: #666666">-&gt;</span> {
        tempos<span style="color: #666666">[1]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            Thread.<span style="color: #7D9029">sleep</span>(<span style="color: #666666">500</span>);
        } <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
            Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
        }
        tempos<span style="color: #666666">[2]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
    });
<span style="color: #008000; font-weight: bold">try</span> {
    ft.<span style="color: #7D9029">get</span>();
} <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
    Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
}
tempos<span style="color: #666666">[3]</span> <span style="color: #666666">=</span> System.<span style="color: #7D9029">nanoTime</span>();
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de inicialização: %dµs&quot;</span>, (tempos<span style="color: #666666">[1]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo de execução     : %dµs&quot;</span>, (tempos<span style="color: #666666">[2]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[1]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Tempo total           : %dµs&quot;</span>, (tempos<span style="color: #666666">[3]</span> <span style="color: #666666">-</span> tempos<span style="color: #666666">[0]</span>) <span style="color: #666666">/</span> <span style="color: #666666">1000</span>));
executor.<span style="color: #7D9029">shutdown</span>();</code></pre>
</div>
</div>
<div class="paragraph">
<p>A grande diferença é que quando criamos uma nova execução o ExecutorService retorna um <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Future.html"><code>Future</code></a> que irá prover informações sobre a execução e o retorno da execução. Um executor não aceita apenas um <code>Runnable</code>, mas também <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/Callable.html"><code>Callable</code></a> que retorna valores. A opção por usar <code>Callable</code> irá tornar seu código mais legível.</p>
</div>
<div class="paragraph">
<p>Outro ponto importante do uso de <code>ExecutorService</code> é que assim que uma nova atividade é submetida, ela entrará na fila de execução. É preciso ressaltar que ela só será executada quando houver thread disponível. Isso significa que um <code>ExecutorService</code> deve ser usado para atividades rápidas e não com longa duração. Se você precisar executar algo que dure toda execução crie um ExecutorService de tamanho pré-definido, usando <code>newFixedThreadPool</code> ou cria a thread manualmente.</p>
</div>
<div class="paragraph">
<p>Por fim um ExecutorService não finaliza automaticamente, ele deve ser finalizado através do método <code>shutdown</code>. Caso você não chame esse método o seu programa vai virar um processo zumbi.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-06-controle-concorrencia">Controle de Concorrência</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Como vimos concorrência é um problema diferente de paralelismo, ela é a solução para garantir que apenas uma thread está executando um trecho de código. As soluções de concorrência da JVM são propostas para que seja usadas dentro de uma mesma instância da JVM, ou seja, não é possível pela biblioteca padrão garantir concorrência entre dois processos distintos.</p>
</div>
<div class="paragraph">
<p>Vamos começar a ver pelos modos mais antigos, mesmo que eles já não sejam os mais utilizados. O primeiro dele é o mais simples de todos, usar o modificado <code>synchronized</code>. No trecho de código abaixo, o <code>synchronized</code> permite que o de counter seja impresso na linha de comando sequencialmente, caso seja removido valores repetidos e fora de ordem aparecerão. O <code>synchronized</code> vai garantir que quando uma thread está executando o método <code>printAndIncrement</code> as outras serão bloqueadas até que a execução seja finalizada. Quando usamos o <code>synchronized</code> em um método de instância, o efeito do bloqueio só acontece quando método de um mesmo objeto são executados concorrentemente, caso o controle de concorrência deva ser feito globalmente o <code>synchronized</code> pode ser usado em métodos estáticos.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Sync</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #B00040">int</span> counter;

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #0000FF">Sync</span>() {
        counter <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">synchronized</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">printAndIncrement</span>() {
        counter<span style="color: #666666">++</span>;
        System.<span style="color: #7D9029">err</span>.<span style="color: #7D9029">println</span>(String.<span style="color: #7D9029">format</span>(<span style="color: #BA2121">&quot;Thread [%s] valor:%d&quot;</span>, Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">getName</span>(), counter));
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Usar o modificador <code>synchronized</code> ainda é uma prática bem comum apesar que existem soluções melhores. Ele deve ser usado quando é realmente necessário bloquear todo o bloco de execução. Se você precisa usar em uma das classes da biblioteca Collection (vista na sessão 3) a melhor solução é usar uma das classes da biblioteca padrão do Java. A classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Collections.html"><code>Collections</code></a> tem alguns métodos que criam um envolucro para objetos, por exemplo, se eu tenho uma lista e desejo usar ela em várias threads, eu posso usar <code>Collections.synchronizedList(minhaLista)</code>.</p>
</div>
<div class="paragraph">
<p>Observe no trecho de código abaixo que temos duas listas mas apenas a segunda pode ser usada em várias threads. Qualquer operação na segunda lista reflete na primeira. Usar uma lista não sincronizada pode ser que não faça o programa apresentar uma exceção, mas com certeza vai criar estados inconsistentes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>$ jshell
<span style="color: #666666">|</span>  Welcome to JShell <span style="color: #666666">--</span> Version <span style="color: #666666">18</span>
<span style="color: #666666">|</span>  For an introduction type: <span style="color: #666666">/</span>help intro

jshell<span style="color: #666666">&gt;</span> List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaLista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;&gt;</span>();
List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaLista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;&gt;</span>  ;
minhaLista <span style="color: #666666">==&gt;</span> <span style="color: #666666">[]</span>

jshell<span style="color: #666666">&gt;</span> List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaListaSync <span style="color: #666666">=</span> Collections.<span style="color: #7D9029">synchronizedList</span>(minhaLista);
List<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span> minhaListaSync <span style="color: #666666">=</span> Collections.<span style="color: #7D9029">synchronizedList</span>(minhaLista);
minhaListaSync <span style="color: #666666">==&gt;</span> <span style="color: #666666">[]</span>

jshell<span style="color: #666666">&gt;</span> minhaLista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 1&quot;</span>)
minhaLista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 1&quot;</span>)
$3 <span style="color: #666666">==&gt;</span> <span style="color: #008000; font-weight: bold">true</span>

jshell<span style="color: #666666">&gt;</span> minhaListaSync.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 2&quot;</span>)
minhaListaSync.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;String 2&quot;</span>)
$4 <span style="color: #666666">==&gt;</span> <span style="color: #008000; font-weight: bold">true</span>

jshell<span style="color: #666666">&gt;</span> minhaLista
minhaLista
minhaLista <span style="color: #666666">==&gt;</span> <span style="color: #666666">[</span>String <span style="color: #666666">1</span>, String <span style="color: #666666">2]</span>

jshell<span style="color: #666666">&gt;</span> minhaListaSync
minhaListaSync
minhaListaSync <span style="color: #666666">==&gt;</span> <span style="color: #666666">[</span>String <span style="color: #666666">1</span>, String <span style="color: #666666">2]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>O <code>synchronized</code> também pode ser usado como bloco de código, mas essa é uma forma um pouco arcaica como veremos. Vamos imagina que temos duas threads, uma produzindo valores e a outra consumindo. A thread que consome valores deve sempre retornar um valor, não importa se não existe valores no momento. Normalmente isso é o que acontece quando temos um buffer em quem uma thread está produzindo e outra consumindo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Buffer</span> {
    <span style="color: #008000; font-weight: bold">private</span> Object lock <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Object();
    <span style="color: #008000; font-weight: bold">private</span> List<span style="color: #666666">&lt;</span><span style="color: #B00040">int</span><span style="color: #666666">[]&gt;</span> _buffer <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> LinkedList<span style="color: #666666">&lt;&gt;</span>();
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">add</span>(<span style="color: #B00040">int</span><span style="color: #666666">[]</span> valores) {
        <span style="color: #008000; font-weight: bold">synchronized</span>(lock) {
            _buffer.<span style="color: #7D9029">add</span>(valores);
            lock.<span style="color: #7D9029">notifyAll</span>();
        }
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span><span style="color: #666666">[]</span> <span style="color: #0000FF">consume</span>() {
        <span style="color: #B00040">int</span><span style="color: #666666">[]</span> nextValue <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">null</span>;
        <span style="color: #008000; font-weight: bold">synchronized</span>(lock) {
            <span style="color: #008000; font-weight: bold">while</span>(_buffer.<span style="color: #7D9029">isEmpty</span>()) {
                lock.<span style="color: #7D9029">wait</span>();
            }
            nextValue <span style="color: #666666">=</span> _buffer.<span style="color: #7D9029">remove</span>(<span style="color: #666666">0</span>);
        }
        <span style="color: #008000; font-weight: bold">return</span> nextValue;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>A classe acima está implementada usando técnicas que não devem mais ser usadas. O primeiro problema é que toda chamada ao bloco sincronizado será feita por apenas uma thread por vez, existe técnicas mais recentes que permitem que mais de uma thread acessem um bloco sincronizado que veremos a seguir. O bloco sincronizado deve ser feito usando um objeto em comum, no caso esse objeto pode ser compartilhado em mais de um objeto, caso a thread deseje esperar por alguma condição, deve se usar o método <code>wait</code> que será despertado por uma chamada ao método <code>notify</code> ou <code>notifyAll</code>. No exemplo acima, se não há valores a serem consumidos, eles devem esperar por um valor.</p>
</div>
<div class="paragraph">
<p>Uma alternativa ao bloco sincronizado é o uso da classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html">ReadWriteLock</a>. A necessidade dessa classe surgem quando se percebe que apenas as threads que escrevem devem ter acesso exclusivo, as threads de leitura podem acessar os métodos livremente. No exemplo acima não é possível usar ela porque ambos os métodos escrevem ao adicionar e remover valores na lista por isso serão necessárias algumas alterações.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Buffer</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> ReadWriteLock readWriteLock <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ReentrantReadWriteLock();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Lock readLock <span style="color: #666666">=</span> readWriteLock.<span style="color: #7D9029">readLock</span>();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Lock writeLock <span style="color: #666666">=</span> readWriteLock.<span style="color: #7D9029">writeLock</span>();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Condition newItem <span style="color: #666666">=</span> writeLock.<span style="color: #7D9029">newCondition</span>();
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> List<span style="color: #666666">&lt;</span><span style="color: #B00040">int</span><span style="color: #666666">[]&gt;</span> _buffer <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> LinkedList<span style="color: #666666">&lt;&gt;</span>();

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">add</span>(<span style="color: #B00040">int</span><span style="color: #666666">[]</span> valores) {
        writeLock.<span style="color: #7D9029">lock</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            _buffer.<span style="color: #7D9029">add</span>(valores);
            newItem.<span style="color: #7D9029">signalAll</span>();
        } <span style="color: #008000; font-weight: bold">finally</span> {
            writeLock.<span style="color: #7D9029">unlock</span>();
        }
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span> <span style="color: #0000FF">available</span>() {
        readLock.<span style="color: #7D9029">lock</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            <span style="color: #008000; font-weight: bold">return</span> _buffer.<span style="color: #7D9029">size</span>();
        } <span style="color: #008000; font-weight: bold">finally</span> {
            readLock.<span style="color: #7D9029">unlock</span>();
        }
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span><span style="color: #666666">[]</span> <span style="color: #0000FF">consume</span>(<span style="color: #B00040">int</span> position) {
        readLock.<span style="color: #7D9029">lock</span>();
        <span style="color: #008000; font-weight: bold">try</span> {
            <span style="color: #008000; font-weight: bold">while</span> (_buffer.<span style="color: #7D9029">size</span>() <span style="color: #666666">&lt;=</span> position) {
                newItem.<span style="color: #7D9029">await</span>();
            }
            <span style="color: #008000; font-weight: bold">return</span> _buffer.<span style="color: #7D9029">get</span>(position);
        } <span style="color: #008000; font-weight: bold">finally</span> {
            readLock.<span style="color: #7D9029">unlock</span>();
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Na nossa nova classe <code>Buffer</code>, quem é responsável por saber a posição no buffer é a thread que consome que pode ser mais de uma. Cada chamada ao método <code>consome</code> e <code>available</code> poderão ser feitas sem nenhum bloqueio. Mas se uma chamada ao método <code>add</code> for feita, ela deverá esperar pela finalização de todas as chamadas aos locks de leitura e todos os locks de leitura deverão esperar pela finalização do lock de escrita. Os locks de leitura podem ser executados concorrentemente, mas o lock de escrita só pode acontecer quando nenhum outro lock estiver ativo.</p>
</div>
<div class="paragraph">
<p>No código acima podemos ver também o uso da classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/locks/Condition.html"><code>Condition</code></a>. Essa classe deve ser usada quando esperamos alguma condição especifica, no nosso caso é a lista ter o item desejado ou não. O uso dessa classe é bem similar ao dos métodos <code>wait</code>, <code>notify</code> e <code>notifyAll</code>, mas é adicionada uma melhor semântica pode podemos criar mais que uma condição e usar elas para dar uma boa legibilidade ao código.</p>
</div>
<div class="paragraph">
<p>Por fim a biblioteca padrão do Java tem uma série de classes atômicas que são extremamente úteis. Elas estão no pacote <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/concurrent/atomic/package-summary.html"><code>java.util.concurrent.atomic</code></a> e todas elas tem comportamento similar, vão permitir você realizar operações atômicas sem se preocupar com a concorrência. Para demonstrar o uso delas vou mostrar o caso mais comum que é criar um contador sincronizado.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>ExecutorService executor <span style="color: #666666">=</span> Executors.<span style="color: #7D9029">newFixedThreadPool</span>(<span style="color: #666666">15</span>);
AtomicInteger counter <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> AtomicInteger(<span style="color: #666666">0</span>);
List<span style="color: #666666">&lt;</span>Future<span style="color: #666666">&lt;?&gt;&gt;</span> allFuture <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;&gt;</span>();
<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> <span style="color: #666666">1_000</span>; <span style="color: #666666">++</span>i) {
    allFuture.<span style="color: #7D9029">add</span>(executor.<span style="color: #7D9029">submit</span>(() <span style="color: #666666">-&gt;</span> System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Contador: &quot;</span> <span style="color: #666666">+</span> counter.<span style="color: #7D9029">incrementAndGet</span>())));
}
executor.<span style="color: #7D9029">shutdown</span>();
<span style="color: #008000; font-weight: bold">try</span> {
    executor.<span style="color: #7D9029">awaitTermination</span>(<span style="color: #666666">1</span>, TimeUnit.<span style="color: #7D9029">SECONDS</span>);
} <span style="color: #008000; font-weight: bold">catch</span> (InterruptedException e) {
    Thread.<span style="color: #7D9029">currentThread</span>().<span style="color: #7D9029">interrupt</span>();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>No código acima não podemos garantir que os valores impressos estarão em ordem, mas podemos garantir que todos os valores de 1 a 1000 serão impressos. A classe <code>AtomicInteger</code> garante que a operação <code>incrementAndGet</code> seja feita atomicamente, isso significa que ela não será interrompida por outra chamada a outro método desse mesmo objeto. Todas as classes desse pacote merecem nossa atenção pois elas são bem importantes, principalmente se você está desenvolvendo um aplicativo Desktop que irá lidar com várias threads.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Tutorial" /><category term="Threads" /><category term="Concorrência" /><category term="Paralelismo" /><summary type="html"><![CDATA[O que eu preciso saber de concorrência e paralelismo para desenvolver usando Java? A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">Java I/O</title><link href="https://blog.vepo.dev/posts/java-101-io" rel="alternate" type="text/html" title="Java I/O" /><published>2022-07-04T00:00:00+00:00</published><updated>2022-07-04T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/23-53-00-java101-io</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-io"><![CDATA[<div class="paragraph">
<p>Esse post faz parte de uma série introdutória sobre Java, se você não conhece a linguagem e não leu os posts anteriores, recomendo os ler para ter uma visão melhor da plataforma. Nessa série, já falamos sobre o que é o ecossistema Java, o que é a biblioteca Collections e como Java faz Orientação a Objetos, esses tópicos são necessários para o que vamos falar agora: <strong>I/O</strong>.</p>
</div>
<div class="sect1">
<h2 id="cap-05-o-que-e-io">O que é I/O?!?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Quando pensamos em um computador a primeira coisa que pensamos é no que fazemos online: enviar um tweet, responder email, ver um vídeo ou mesmo ler esse post. Mas um computador não entende essas atividades, para ele tudo são bits, ou seja, todas essa são atividades podem ser traduzidas em outras atividades de baixo nível. Quando eu uso o termo "baixo nível" entenda como algo de menor abstração, por exemplo, para você ler esse post, o seu navegador teve que renderizar uma página HTML, que foi requisitada de um servidor HTTP usando uma conexão Socket, que na verdade é apenas uma troca de bits entre vários computadores. Essas atividades sempre envolvem trocas de informações que só são possível através de algo chamado <strong>serialização</strong>.</p>
</div>
<div class="paragraph">
<p><strong>Serialização</strong> seria a transformação de uma informação em um formato intermediário para que ela possa transitar entre dois processos. Ou seja, a informação que você está lendo agora é composta de alguns arquivos HTML, Javascript, CSS, PNG e JPEG que são enviadas através da web usando o protocolo HTTP sobre TLS.</p>
</div>
<div class="paragraph">
<p><em>—  Você não ia falar de I/O? Que papo é esse de <strong>serialização</strong> e internet?!?</em></p>
</div>
<div class="paragraph">
<p>Sim, I/O é outra forma de falar sobre serialização. Toda informação para ser enviada ela passa pelos passos de (1) serialização, (2) escrita, (3) transmissão, (4) leitura e (5) desserialização. O processo de transmissão pode ser o envio dessa informação através de uma API, ou o armazenamento dela em um banco de dados ou mesmo a escrita no disco para que possa ser lida no futuro. Os formatos de serialização de dados são bem interessantes de se analisar, mas não é o foco desse post, aqui focaremos em conhecer as bibliotecas que a JVM nos oferece para que possamos ler e escrever objetos onde bem desejarmos.</p>
</div>
<div class="paragraph">
<p>Na JVM existem dois pacotes que lidam com serialização em Java. O mais conhecido deles é o <a href="https://docs.oracle.com/javase/8/docs/api/java/io/package-summary.html"><code>java.io</code></a> onde estão definidas as classes para leitura síncrona. Já no <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/package-summary.html"><code>java.nio</code></a> estão definidas as classes para leitura assíncrona (Non-blocking I/O).</p>
</div>
<div class="paragraph">
<p>Seria hipocrisia da minha parte dizer que você deve conhecer esses pacotes por completo, eu não os conheço. Só quem trabalha especificamente com I/O deve conhecer bem essas classes. Não se surpreenda se um desenvolvedor com anos de experiência em Java procurar no Google <em>"how to read a text file in Java"</em>. Isso acontece porque esses pacotes são complexos e por isso difíceis de serem internalizados. Mas você deve saber algumas informações importantes e nós vamos trabalhar elas aqui.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Porque a interface <code>Serializable</code>? Devo usar?</p>
</li>
<li>
<p>O que é um <code>InputStream</code> e um <code>OutputStream</code>?</p>
</li>
<li>
<p>Qual Stream devo usar?</p>
</li>
<li>
<p>Qual a diferença entre um Stream e os Readers/Writers?</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Nós não vamos falar de NIO, esse será o assunto de um post mais a frente. Não estranhe se você perceber que um Sênior não sabe como usar as classes desse pacote, em muitos casos elas são usadas apenas pelos frameworks o que implica que muitos desenvolvedores nunca tiveram contato com ela.</p>
</div>
<div class="sect2">
<h3 id="_a-diferença-entre-io-e-nio">A diferença entre IO e NIO</h3>
<div class="paragraph">
<p>Talvez você tenha ficado curioso do motivo de existirem dois pacotes para I/O. Não ficou? Bom, existem dois pacotes diferentes porque NIO é um conceito muito mais novo do que IO. IO existe desde que os computadores existem e sempre foi um problema para qualquer software. Se você não fez faculdade de Ciência da Computação, saiba que existe até uma matéria só pensando em como se criar estrutura de dados para arquivos, isso porque ao se ler um arquivos nos deparamos com alguns problemas que deveriam ser óbvios: (1) o tempo de leitura é muito inferior ao tempo de acesso a memória, (2) os dados são armazenados em blocos que não são facilmente rearranjáveis e (3) a leitura de blocos próximos é mais rápida que a leitura de blocos distantes. Os discos mais novos não possuem o problema (3), mas mesmo assim ler e escrever de arquivo não pode ser feito da mesma forma que ler e escrever na memória.</p>
</div>
<div class="paragraph">
<p><em>—  Escrever na memória?!?! Eu nunca escrevi na memória!!!</em></p>
</div>
<div class="paragraph">
<p>Todo programa, ao ser executado, está armazenado na memória. Essa é uma operação tão comum que é transparente para linguagens alto nível. Se estivéssemos escrevendo em C seria preciso alocar e desalocar memória. Mas em Java a alocação é feita com um <code>new</code> e a memória é desalocada automaticamente. Mas não é possível alocar espaça em disco.</p>
</div>
<div class="paragraph">
<p>Se compararmos a escrita e memória com a escrita em disco, ou interface de redes, vemos que a primeira é tão rápida que pode ser considerada imediata. Já os outros tipos de escrita não podem ser consideradas imediatas, por isso surgiram uma série de interfaces capazes de avisar ao software quando o dado está pronto para ser lido. É nesse ponto que diferenciamos IO de NIO! O pacote <code>java.io</code> são classes usadas para leitura/escrita bloqueante, enquanto o pacote <code>java.nio</code> são classes de leitura/escrita não bloqueante. E como NIO é mais recente que o IO tradicional, seu pacote foi inserido em uma versão do Java bem mais recente (JDK 1.4).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-05-arquivos-sockets-linux">Arquivos, Sockets e Linux 🐧</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Uma das grandes vantagens do Sistema Operacional Linux é que tudo são arquivos. Quase todas as funcionalidades do sistema operacional são expostas através de arquivos mapeados no sistema de arquivos. Assim ao invés de fazer uma chamada de sistema complexa para, por exemplo, obter o tempo que a máquina está em operação, basta ler o arquivo <code>/proc/uptime</code>. Ou ler o arquivo <code>/proc/cpuinfo</code> para obter uma série de informações sobre a CPU.</p>
</div>
<div class="paragraph">
<p>Essa foi uma escolha arquitetural do sistema que se tornou bastante eficaz porque cria uma interface comum entre diversas operações. Por exemplo, se você for procurar no Windows a maneira de se ver todos os processo em execução, verá que tem uma <a href="https://docs.microsoft.com/pt-br/windows/win32/psapi/enumerating-all-processes">API (<em>lembre-se que API não se refere só a API REST</em>) complexa</a>, mas em um Linux basta executar <code>ls /proc</code> e todos os diretórios com números são processos. Para saber mais informações dos processos, basta acessar alguns arquivos dentro dessas pastas.</p>
</div>
<div class="paragraph">
<p>Essa informação pode parecer perdida, mas ela tem uma relação profunda com o que veremos a seguir. Quando o Linux escolhe mapear tudo como arquivo, a escolha feita é por se tratar diversas formas de dados por uma mesma interface. Arquivos são fáceis de serem lidos, então ao expor tudo como arquivo é fácil conseguir acessar essas informações. A JVM também traz a mesma abordagem! Tudo em serialização vai se resumir a poucas classes. A operação de leitura de um arquivo ou leitura de um socket são tão semelhantes que podem ser executadas pelo mesmo código.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-05-apresentacao-pacote">Apresentação do pacote <code>java.io</code></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Para entendermos o pacote <code>java.io</code> primeiro precisamos entender o que é um Stream (ou fluxo em tradução livre). Não confunda Stream de I/O com Stream de Collections, eles tem um conceito parecido, mas são aplicados em locais diferentes. Stream significa fluxo e quando falamos de Stream estamos falando de uma informação que flui em sentido único.</p>
</div>
<div class="paragraph">
<p>Para entender melhor é preciso pensar em como era feito antes&#8230;&#8203; As bibliotecas do C para leitura de arquivo/socket não fazem diferenciação entre as interfaces de leitura e escrita, ao se criar um canal de comunicação temos um inteiro que identifica o canal e esse inteiro pode ser usado tanto para leitura como para escrita. Observe a documentação das funções <a href="https://man7.org/linux/man-pages/man2/read.2.html"><code>read</code></a> e <a href="https://man7.org/linux/man-pages/man2/write.2.html"><code>write</code></a> e veja que elas recebem os mesmo argumentos.</p>
</div>
<div id="cap-05-c-read" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://man7.org/linux/man-pages/man2/read.2.html"><img src="/assets/images/java-101/cap-05/read.PNG" alt="read"></a>
</div>
<div class="title">Figura 1. Documentação da função read</div>
</div>
<div id="cap-05-c-write" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://man7.org/linux/man-pages/man2/write.2.html"><img src="/assets/images/java-101/cap-05/write.PNG" alt="write"></a>
</div>
<div class="title">Figura 2. Documentação da função write</div>
</div>
<div class="paragraph">
<p>Em Java foi decidido que haveria uma diferenciação lógica entre leitura e escrita. Ao se ler um arquivo poderíamos ter o fluxo de leitura (InputStream ou Reader) e o fluxo de escrita (<code>OutputStream</code> ou <code>Writer</code>). Cada um desses fluxos teria uma orientação única, isso significa que um InputStream apenas lê e o <code>OutputStream</code> apenas escreve. É por isso que se usa o nome Stream.</p>
</div>
<div class="paragraph">
<p>Essa é a primeira informação importante do pacote <code>java.io</code>: <strong>As interfaces de leitura são separadas das interfaces de escrita!</strong> Para apresentar o pacote em um diagrama de classes foi até preciso criar essa separação para possibilitar que melhor visualização.</p>
</div>
<div class="paragraph">
<p>Outro ponto da biblioteca C que explica o funcionamento do pacote <code>java.io</code> são as funções <a href="https://man7.org/linux/man-pages/man2/open.2.html"><code>open</code></a> e <a href="https://man7.org/linux/man-pages/man2/close.2.html"><code>close</code></a>. Em qualquer sistema operacional para se realizar a leitura em arquivo, ou em um socket, só é possível com a alocação de recurso. Isso é feito para evitar que processos diferentes criem estados inconsistentes. Quando um processo chama a função <code>open</code> para um determinado arquivo, ele não poderá ser aberto por outro processo enquanto não for liberado através da função <code>close</code>. Se a função <code>close</code> não for chamada, o arquivo só será liberado quando o processo morrer o que pode também gerar um estado inconsistente. Por isso era importante garantir na escrita do código que a função close sempre fosse chamada e que o arquivo sempre estivesse em um estado consistente. Lembre-se que leitura e escrita não são processos imediatos, se o programa finalizar ou o arquivo for fechado antes da escrita terminar, o arquivo fica em um estado inconsistente.</p>
</div>
<div id="cap-05-c-open" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://man7.org/linux/man-pages/man2/open.2.html"><img src="/assets/images/java-101/cap-05/open.PNG" alt="open"></a>
</div>
<div class="title">Figura 3. Documentação da função open</div>
</div>
<div id="cap-05-c-close" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://man7.org/linux/man-pages/man2/close.2.html"><img src="/assets/images/java-101/cap-05/close.PNG" alt="close"></a>
</div>
<div class="title">Figura 4. Documentação da função close</div>
</div>
<div class="paragraph">
<p>Agora volta ao Java&#8230;&#8203; Em C era preciso criar mecanismos de garantir que o arquivo estava fechado antes que o programa finalizasse. Em Java isso foi internalizado na linguagem através de alguns mecanismos. Por isso temos as interfaces <code>Closeable</code> e <code>AutoCloseable</code>. Se um objeto precisa liberar recursos depois de usado, ele deve implementar a interface <code>Closeable</code> e o método <code>close</code> deve ser chamado. Até a versão 6 do Java era comum ver o <code>close</code> sendo chamado dentro do bloco <code>finally</code> de um <code>try {} catch {} finally {}</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Reader reader <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">null</span>;
<span style="color: #008000; font-weight: bold">try</span> {
    reader <span style="color: #666666">=</span> <span style="color: #408080; font-style: italic">// inicia reader</span>
    <span style="color: #408080; font-style: italic">// lê dados</span>
} <span style="color: #008000; font-weight: bold">catch</span> (IOException ioe) {
    <span style="color: #408080; font-style: italic">// trata exceção</span>
} <span style="color: #008000; font-weight: bold">finally</span> {
    <span style="color: #008000; font-weight: bold">if</span> (reader <span style="color: #666666">!=</span> <span style="color: #008000; font-weight: bold">null</span>) {
        <span style="color: #008000; font-weight: bold">try</span> {
            reader.<span style="color: #7D9029">close</span>();
        } <span style="color: #008000; font-weight: bold">catch</span> (IOException ioe) {
            <span style="color: #408080; font-style: italic">// trata exceção</span>
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Como esse código tem muito <em>boilerplate</em> (código sem significado único, repetido), o Java 7 trouxe um recurso na sintaxe chamado <em>try-with-resources</em>. Agora todo inicio de um <em>try-catch</em> é possível declarar um ou mais objetos que devem implementar a nova interface chamada <code>AutoCloseable</code>. Como esse é um recurso da linguagem, a interface <code>AutoCloseable</code> não faz parte do pacote <code>java.io</code>, ao contrário da interface <code>Closeable</code>, mas do package <code>java.lang</code>. Assim o bloco finally poderia ser removido sem prejuízo nenhum a lógica do programa.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">try</span> (Reader reader <span style="color: #666666">=</span> <span style="color: #408080; font-style: italic">/* inicia reader */</span>) {
    <span style="color: #408080; font-style: italic">// lê dados</span>
} <span style="color: #008000; font-weight: bold">catch</span> (IOException ioe) {
    <span style="color: #408080; font-style: italic">// trata exceção</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Agora que sabemos que (1) objetos de I/O devem liberar recursos e que as classes de I/O são do tipo <code>Closeable</code>, observe as principais classes do pacote. Vamos explorar um pouco delas.</p>
</div>
<div id="cap-05-io-read" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-05/IO-Read.png" alt="IO Read">
</div>
<div class="title">Figura 5. Java I/O classes de leitura</div>
</div>
<div id="cap-05-io-write" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-05/IO-Write.png" alt="IO Write">
</div>
<div class="title">Figura 6. Java I/O classes de escrita</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_casos-de-uso">Casos de Uso</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Para explorar melhor essas classes, vamos dividir o pacote em 5 casos de usos bem comuns para biblioteca I/O.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Como ler um arquivo?</p>
</li>
<li>
<p>Como escrever um arquivo?</p>
</li>
<li>
<p>Como ler dados do console?</p>
</li>
<li>
<p>Como ler/escrever em Socket?</p>
</li>
<li>
<p>Lidando objetos complexos</p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="_1-como-ler-um-arquivo">1. Como ler um arquivo?</h3>
<div class="paragraph">
<p>Falamos anteriormente que a diferença entre um InputStream e um Reader é que o InputStream trabalha com bytes enquanto o Reader com caracteres. Agora vamos mostrar um exemplo prático? Imagina que você tem um arquivo texto em formato JSON, como fazer pra o ler? Se pensou em ler usando um Reader&#8230;&#8203; vá com calma! A primeira coisa a fazer é decidir qual biblioteca vai ser usada para ler o JSON. A escolha deve começar pelo elemento mais complexo.</p>
</div>
<div class="paragraph">
<p>Para se ler um JSON, temos uma biblioteca praticamente onipresente: <a href="https://github.com/FasterXML/jackson-databind/">Jackson Databind</a>! O coração dessa biblioteca é a classe <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html">ObjectMapper</a> e ela define várias formas de se escrever em arquivo, a forma mais fácil nem chega a usar Stream ou Readers. O código abaixo foi retirado a própria documentação do ObjectMapper, observe que não se usa nem InputStream/OutputStream ou Readers/Writers.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">final</span> ObjectMapper mapper <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ObjectMapper(); <span style="color: #408080; font-style: italic">// can use static singleton, inject: just make sure to reuse!</span>
MyValue value <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> MyValue();
<span style="color: #408080; font-style: italic">// ... and configure</span>
File newState <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> File(<span style="color: #BA2121">&quot;my-stuff.json&quot;</span>);
mapper.<span style="color: #7D9029">writeValue</span>(newState, value); <span style="color: #408080; font-style: italic">// writes JSON serialization of MyValue instance</span>
<span style="color: #408080; font-style: italic">// or, read</span>
MyValue older <span style="color: #666666">=</span> mapper.<span style="color: #7D9029">readValue</span>(<span style="color: #008000; font-weight: bold">new</span> File(<span style="color: #BA2121">&quot;my-older-stuff.json&quot;</span>), MyValue.<span style="color: #7D9029">class</span>);

<span style="color: #408080; font-style: italic">// Or if you prefer JSON Tree representation:</span>
JsonNode root <span style="color: #666666">=</span> mapper.<span style="color: #7D9029">readTree</span>(newState);
<span style="color: #408080; font-style: italic">// and find values by, for example, using a JsonPointer expression:</span>
<span style="color: #B00040">int</span> age <span style="color: #666666">=</span> root.<span style="color: #7D9029">at</span>(<span style="color: #BA2121">&quot;/personal/age&quot;</span>).<span style="color: #7D9029">getValueAsInt</span>();</code></pre>
</div>
</div>
<div class="paragraph">
<p>Mas isso não impede que se use eles para ler dados de um arquivo. A primeira missão que temos é mapear o objeto que devemos ler como um POJO. Em um projeto pessoal eu criei uma interface para inspecionar Cluster Kafka, o <a href="https://blog.vepo.dev/projects/kafka-tool">Kafka Tool</a>. Nesse projeto, todas as configurações são salvas em arquivos JSON no diretório <code>~/.kafka-tool</code> (arquivos começados com <code>.</code> são considerados ocultos no Linux), assim para armazenar as informações de Brokers é preciso primeiro mapear um broker. Depois de mapeador o broker é preciso carregar a lista de brokers do arquivo, para isso basta usar o código abaixo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Path kafkaToolConfigPath <span style="color: #666666">=</span> PAths.<span style="color: #7D9029">get</span>(System.<span style="color: #7D9029">getProperty</span>(<span style="color: #BA2121">&quot;user.home&quot;</span>), <span style="color: #BA2121">&quot;.kafka-tool&quot;</span>);
<span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>kafkaToolConfigPath.<span style="color: #7D9029">toFile</span>().<span style="color: #7D9029">exists</span>()) {

    Path propertiesPath <span style="color: #666666">=</span> kafkaToolConfigPath.<span style="color: #7D9029">resolve</span>(<span style="color: #BA2121">&quot;kafka-properties.json&quot;</span>);
    <span style="color: #008000; font-weight: bold">if</span> (propertiesPath.<span style="color: #7D9029">toFile</span>().<span style="color: #7D9029">exists</span>()) {
        <span style="color: #008000; font-weight: bold">try</span> (BufferedReader reader <span style="color: #666666">=</span> Files.<span style="color: #7D9029">newBufferedReader</span>(propertiesPath)) {
            <span style="color: #008000; font-weight: bold">return</span> Optional.<span style="color: #7D9029">of</span>(reader.<span style="color: #7D9029">lines</span>()
                                     .<span style="color: #7D9029">collect</span>(Collectors.<span style="color: #7D9029">joining</span>()))
                           .<span style="color: #7D9029">filter</span>(Predicate.<span style="color: #7D9029">not</span>(String::isBlank))
                           .<span style="color: #7D9029">flatMap</span>(value <span style="color: #666666">-&gt;</span> handleIoException(() <span style="color: #666666">-&gt;</span> mapper.<span style="color: #7D9029">readValue</span>(value, KafkaBroker<span style="color: #666666">[]</span>.<span style="color: #7D9029">class</span>)));
        } <span style="color: #008000; font-weight: bold">catch</span> (IOException e) {
            logger.<span style="color: #7D9029">error</span>(<span style="color: #BA2121">&quot;Error reading file!&quot;</span>, e);
        }
    }
}
<span style="color: #008000; font-weight: bold">return</span> Optional.<span style="color: #7D9029">empty</span>();</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para ler usamos um <a href="https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html"><code>BufferedReader</code></a> porque ele permite ler todo o arquivo em texto facilmente, para isso usamos a o método <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newBufferedReader-java.nio.file.Path-"><code>Files.newBufferedReader</code></a>, que pode ser lido através do método <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html#readValue-java.lang.String-java.lang.Class-"><code>ObjectMapper.readValue</code></a> que aceita <code>String</code>. Mas também podíamos abrir um <code>InputStream</code> usando <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newInputStream-java.nio.file.Path-java.nio.file.OpenOption&#8230;&#8203;-"><code>Files.newInputStream</code></a> e usar ele diretamente como parâmetro <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html#readValue-java.io.InputStream-java.lang.Class-"><code>ObjectMapper.readValue</code></a></p>
</div>
</div>
<div class="sect2">
<h3 id="_2-como-escrever-um-arquivo">2. Como escrever um arquivo?</h3>
<div class="paragraph">
<p>De forma bem similar podemos escreve em arquivos usando as mesmas APIs.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Path kafkaToolConfigPath <span style="color: #666666">=</span> PAths.<span style="color: #7D9029">get</span>(System.<span style="color: #7D9029">getProperty</span>(<span style="color: #BA2121">&quot;user.home&quot;</span>), <span style="color: #BA2121">&quot;.kafka-tool&quot;</span>);
<span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>kafkaToolConfigPath.<span style="color: #7D9029">toFile</span>().<span style="color: #7D9029">exists</span>()) {
    kafkaToolConfigPath.<span style="color: #7D9029">toFile</span>().<span style="color: #7D9029">mkdir</span>();
}

Path propertiesPath <span style="color: #666666">=</span> kafkaToolConfigPath.<span style="color: #7D9029">resolve</span>(<span style="color: #BA2121">&quot;kafka-properties.json&quot;</span>);
ObjectMapper mapper <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ObjectMapper().<span style="color: #7D9029">enable</span>(SerializationFeature.<span style="color: #7D9029">INDENT_OUTPUT</span>)
<span style="color: #008000; font-weight: bold">try</span> (BufferedWriter writer <span style="color: #666666">=</span> Files.<span style="color: #7D9029">newBufferedWriter</span>(propertiesPath, StandardOpenOption.<span style="color: #7D9029">CREATE</span>, StandardOpenOption.<span style="color: #7D9029">TRUNCATE_EXISTING</span>)) {
    writer.<span style="color: #7D9029">write</span>(mapper.<span style="color: #7D9029">writeValueAsString</span>(brokers));
} <span style="color: #008000; font-weight: bold">catch</span> (IOException e) {
    logger.<span style="color: #7D9029">error</span>(<span style="color: #BA2121">&quot;Error saving file!&quot;</span>, e);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para escrever usamos um <a href="https://docs.oracle.com/javase/8/docs/api/java/io/BufferedWriter.html"><code>BufferedWriter</code></a>, através do <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newBufferedWriter-java.nio.file.Path-java.nio.file.OpenOption&#8230;&#8203;-"><code>Files.newBufferedWriter</code></a>, porque é uma opção viável para se usar com <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html#writeValueAsString-java.lang.Object-"><code>ObjectMapper.writeValueAsString</code></a>. Mas da mesma forma podíamos usar <a href="https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html"><code>OutputStream</code></a>, através do <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newOutputStream-java.nio.file.Path-java.nio.file.OpenOption&#8230;&#8203;-"><code>Files.newOutputStream</code></a>, porque também é uma opção viável para se usar com <a href="https://fasterxml.github.io/jackson-databind/javadoc/2.13/com/fasterxml/jackson/databind/ObjectMapper.html#writeValueAsBytes-java.lang.Object-"><code>ObjectMapper.writeValueAsBytes</code></a></p>
</div>
</div>
<div class="sect2">
<h3 id="_3-como-ler-dados-do-console">3. Como ler dados do console?</h3>
<div class="paragraph">
<p>Toda aplicação pode rodar em modo de linha de comando. Linha de comando é bastante útil porque possibilita que as aplicações sejam integradas a scripts de execução seguindo a Filosofia Unix: <strong><em>Escreva programas para lidar com fluxos de texto, porque essa é uma interface universal</em></strong>.</p>
</div>
<div class="paragraph">
<p>A primeira informação importante é saber que os streams de entrada, saída e erro estão expostos como variáveis globais na classe <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html"><code>System</code></a>. Assim podemos facilmente escrever um programa que lê da linha de comando com algumas linhas.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">try</span>(BufferedReader reader <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> BufferedReader(<span style="color: #008000; font-weight: bold">new</span> InputStreamReader(System.<span style="color: #7D9029">in</span>))) {
    String name <span style="color: #666666">=</span> reader.<span style="color: #7D9029">readLine</span>();
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(name);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Esse código é certo e funciona, mas existe uma outra classe que facilita em muito o tratamento de dados que vem do console, é a classe <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html"><code>Scanner</code></a>. Com ela é possível tratar os dados de entrada de forma mais fácil. Por exemplo se eu quiser fazer um programa para lê números do console, é possível fazer com poucas linhas.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">try</span>(Scanner in <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Scanner(System.<span style="color: #7D9029">in</span>)) {
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">print</span>(<span style="color: #BA2121">&quot;Qual o seu nome? &quot;</span>);
    String nome <span style="color: #666666">=</span> in.<span style="color: #7D9029">nextLine</span>();
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">print</span>(<span style="color: #BA2121">&quot;Quantos anos você tem? &quot;</span>);
    <span style="color: #B00040">int</span> idade <span style="color: #666666">=</span> in.<span style="color: #7D9029">nextInt</span>();
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Oi &quot;</span> <span style="color: #666666">+</span> nome <span style="color: #666666">+</span> <span style="color: #BA2121">&quot;! Você tem &quot;</span> <span style="color: #666666">+</span> idade <span style="color: #666666">+</span> <span style="color: #BA2121">&quot; anos!&quot;</span>);
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_4-como-lerescrever-em-socket">4. Como ler/escrever em Socket?</h3>
<div class="paragraph">
<p>Sockets devem ser usados com parcimônia! Sockets permitem que dois processos se comuniquem entre si através de uma conexão TCP direta. O problema em usar Sockets é que em muitos casos você pode estar reimplementando um protocolo já conhecido. Mas as vantagens de se usar socket é que seu programa vai ter liberdade de se comunicar. Quando temos dois programas se comunicando por socket um deles será o cliente e o outro será o servidor, é o que chamamos de Socket Server.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Caso de Uso</div>
Eu já implementei um caso de uso bastante complexo usando Socket, mas era porque tínhamos um servidor de geração de voz. Os clientes enviavam texto e outros parâmetros e recebiam de volta Stream de dados de acordo com o formato requerido (MP3, WAV, etc&#8230;&#8203;).
</div>
</div>
<div class="paragraph">
<p>Não vamos entrar aqui em detalhes sobre como a classe Socket funciona, mas ao abrir um socket, ela vai dispor de dois Stream para leitura e escrita de dados. Assim podemos ter o servidor abaixo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>AtomicBoolean running <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> AtomicBoolean(<span style="color: #008000; font-weight: bold">true</span>);
ExecutorService threadPool <span style="color: #666666">=</span> Executors.<span style="color: #7D9029">newFixedThreadPool</span>(<span style="color: #666666">10</span>); <span style="color: #408080; font-style: italic">// thread para processar socket</span>
<span style="color: #008000; font-weight: bold">try</span>(ServerSocket server <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ServerSocket(<span style="color: #666666">5555</span>)) {            <span style="color: #408080; font-style: italic">// abre socket na porta 5555</span>
    <span style="color: #008000; font-weight: bold">while</span> (running.<span style="color: #7D9029">get</span>()) {
        Socket socket <span style="color: #666666">=</span> server.<span style="color: #7D9029">accept</span>();                       <span style="color: #408080; font-style: italic">// conexão aberta com cliente</span>
        threadPool.<span style="color: #7D9029">submit</span>(() <span style="color: #666666">-&gt;</span> {                              <span style="color: #408080; font-style: italic">// Se não tratar dentro de uma thread não é possível abrir outras conexões</span>
            <span style="color: #008000; font-weight: bold">try</span> {
                process(socket.<span style="color: #7D9029">getInputStream</span>(),               <span style="color: #408080; font-style: italic">// encapsula toda comunicação</span>
                        socket.<span style="color: #7D9029">getOutputStream</span>());
            } <span style="color: #008000; font-weight: bold">finally</span> {
                socket.<span style="color: #7D9029">close</span>();                               <span style="color: #408080; font-style: italic">// Só fecha o socket depois de finalizada a comunicação</span>
            }
        });
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Já o cliente é um pouco mais simples porque não se espera que ele se conecte com mais de um servidor.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">try</span> (Socket socket <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Socket(<span style="color: #BA2121">&quot;localhost&quot;</span>, <span style="color: #666666">5555</span>)) {
    process(socket.<span style="color: #7D9029">getInputStream</span>(), socket.<span style="color: #7D9029">getOutputStream</span>());
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Eu não recomendo a você escrever um servidor socket em nenhuma hipótese. Caso você tenha um protocolo complexo que deve ser feito através de um servidor socket, eu recomendo usar o projeto <a href="https://netty.io/">Netty</a> para que você consiga focar nas regras de negócios deixando funcionalidades como serialização, controle de threads e segurança como responsabilidade da biblioteca.</p>
</div>
</div>
<div class="sect2">
<h3 id="_5-lidando-objetos-complexos">5. Lidando objetos complexos</h3>
<div class="paragraph">
<p>Se você foi atento deve ter reparado que no diagrama de classe tem duas classes que parecem bastante úteis: <a href="https://docs.oracle.com/javase/8/docs/api/java/io/ObjectInputStream.html"><code>ObjectInputStream</code></a> e <a href="https://docs.oracle.com/javase/8/docs/api/java/io/ObjectOutputStream.html"><code>ObjectOutputStream</code></a>. Essas duas classes permitem serializar qualquer objeto da JVM e enviar para outra JVM, é por causa dessas classes que existe a interface <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html"><code>Serializable</code></a> a qual eu citei na minha primeira pergunta e até agora não respondi. Pois vamos entender o motivo de deixar essa resposta por último?</p>
</div>
<div class="paragraph">
<p>Para serializar um objeto eu devo usar a interface <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html"><code>Serializable</code></a>? Não! Você pode usar qualquer biblioteca com formatos de serialização que são compreendidos por várias linguagens. A interface <code>Serializable</code> é usada para serializar objetos que só podem ser carregados na JVM através das classes <code>ObjectInputStream</code> e <code>ObjectOutputStream</code>. MAS essas classes não deve ser usadas porque elas tem várias falhas de segurança que podem ser exploradas. Então resposta curta: <strong>Não use essas classes!</strong></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-05-proximos-passos">Próximos passos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Eu espero que você tenha compreendido que como ler dados de várias fontes como arquivos ou sockets. Agora é hora de você aprender a usar bibliotecas de leituras de arquivos. Recomendo que você explore a biblioteca Jackson, assim como outras bibliotecas para se escrever JSON. Um bom exercício é comparar a performance de escrita entre várias bibliotecas e escolher a que você vai usar sempre.</p>
</div>
<div class="paragraph">
<p>Outros exercícios são tentar conhecer a biblioteca de leitura e XML, <a href="https://yaml.org/">YAML</a>, <a href="https://toml.io/en/">TOML</a> ou qualquer outro formato que lhe interessar.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Tutorial" /><category term="I/O" /><summary type="html"><![CDATA[Quais são as bibliotecas para leitura de arquivos em Java? O que significa ler e escrever em um programa? A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">OO: Eu vejo objetos por todos os cantos!</title><link href="https://blog.vepo.dev/posts/java-101-objetos" rel="alternate" type="text/html" title="OO: Eu vejo objetos por todos os cantos!" /><published>2022-05-30T00:00:00+00:00</published><updated>2022-05-30T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/11-15-00-java101-objetos</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-objetos"><![CDATA[<div class="paragraph">
<p>Java tem um fã clube enorme! São pessoas que usam a linguagem no dia a dia e resolvem problemas importantes para a nossa sociedade. Quando Java completou 25 anos houve até a hashtag <a href="https://twitter.com/search?q=lang%3Apt%20%23MovedByJava&amp;src=typed_query&amp;f=top">#MovedByJava</a> para mostrar que o mundo é movido por software desenvolvido em Java, são bilhões de transações em Java em serviços altamente escaláveis.</p>
</div>
<div class="paragraph">
<p>MAS&#8230;&#8203; existe um pequeno grupo raivoso e ruidoso que <a href="https://twitter.com/search?q=java%20lento&amp;src=typed_query&amp;f=live">odeia Java</a>. Eu não desejaria nem citar esse grupo, mas creio que isso tem que estar em qualquer tutorial de Java, não para dar voz a esse povo, mas para desmentir. Java não é lento, talvez você que não está sabendo usar e vamos mais a frente falar sobre <em>tuning</em>. Essas pessoas usam argumentos bem simples como "tudo tem que estar em objetos", "eu tenho que escrever um main dentro de um objeto", "nada disso faz sentido"&#8230;&#8203; Resolvi citar eles aqui, porque eles não odeiam Java, eles odeiam Orientação a Objetos e com esse post eu vou te convencer que além de ser uma ótima forma de pensar, Orientação a Objetos ajudou a pavimentar os outros paradigmas que estão por aqui no ano de 2022.</p>
</div>
<div class="sect1">
<h2 id="cap-04-um-pouco-de-historia">Um pouco de história</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Orientação a Objetos surgiu nos anos 60 e era usado para fazer simulações no Simula 67. Esta linguagem, por sua vez, acabou por influenciar o C (1979), que na verdade é uma tentativa de adicionar objetos a linguagem C. Por muitos anos o C foi uma das linguagens mais influentes do mercado, ela não era, puramente, uma linguagem orientada a objetos, era até possível intercalar código C com código C++. A primeira linguagem que surge como puramente orientada a objetos e ainda por cima compilada em <em>bytecode</em> para ser executado em uma Máquina Virtual foi&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>PAUSA DRAMÁTICA&#8230;&#8203; 🥶</p>
</div>
<div class="paragraph">
<p>O Smalltalk! O que foi? 🧐 Achou que era o Java? O Java só surge em 1991, e em seu lançamento em 1995, e acaba herdando muitas características do Smalltalk, tanto que muitas pessoas da comunidade Java vieram do mundo Smalltalk. E uma das coisas que Java herda é ser primariamente orientada a objetos.</p>
</div>
<div class="paragraph">
<p><em>— Mas porque essa preocupação em ser Orientada a Objetos?!</em></p>
</div>
<div class="paragraph">
<p>Porque na verdade a computação não começou com essas linguagens e nem com esses paradigmas, mas como Programação Funcional (ver <em><a href="https://dl.acm.org/doi/abs/10.1145/72551.72554">Conception, evolution, and application of functional programming languages</a></em>). Linguagens funcionais são excelentes para modelarem problemas matemáticos e alguns problemas computacionais, pois elas são declarativas. Podemos transpor a definição de um problema para a linguagem de programação facilmente, podendo até mesmo aplicar uma lógica equacional, pois, se as funções são puras, o valor de <code>f(x)</code> só precisa ser calculado uma vez. Logica equacional é o mesmo que tratar uma função como uma equação matemática, isso implica que símbolos iguais terão valores iguais.</p>
</div>
<div class="paragraph">
<p>MAS linguagens funcionais apresentam uma certa dificuldade de modelar alguns tipos de sistemas e, com a popularização da computação, foi necessário outros paradigmas para os novos sistemas que foram sendo desenvolvidos. O primeiro desses paradigmas foi a Programação Procedural, popularizado pela linguagens como C. Nesse tipo de linguagem a lógica de programação pode ser estruturada dentro de procedimentos que podem ser tanto funções quanto procedimentos, a diferença entre os dois é que uma função não altera o valor dos parâmetros e sempre retorna um valor, já os procedimentos alteram o valor dos parâmetros e não retornam nenhum valor. Em C, podemos escrever tanto funções quanto procedimentos.</p>
</div>
<div class="paragraph">
<p>Linguagens procedurais apresentam bastante dificuldade para encapsular complexidade porque é difícil criar abstrações com ela. Em C, os dados são sempre modelados usando tipos primitivos ou estruturas, que nada mais são que agrupamentos de tipos primitivos. Mesmo quem desenvolve C hoje em dia, não consegue compreender o que era desenvolver nos anos 70, pois a linguagem continuou avançando. Eu tenho uma leve ideia porque, na universidade, desenvolvi programas para um microcontrolador com o compilador bem limitado. O exemplo abaixo eu retirei de um <a href="https://github.com/vepo/csvi">visualizador de CSV</a> que eu desenvolvi por necessidade.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="c"><span></span>matrix_config_t <span style="color: #666666">*</span><span style="color: #0000FF">matrix_config_initialize</span>(<span style="color: #B00040">size_t</span> width, <span style="color: #B00040">size_t</span> height)
{
    matrix_config_t <span style="color: #666666">*</span>config <span style="color: #666666">=</span> (matrix_config_t <span style="color: #666666">*</span>)malloc(<span style="color: #008000; font-weight: bold">sizeof</span>(matrix_config_t));
    config<span style="color: #666666">-&gt;</span>columns <span style="color: #666666">=</span> width;
    config<span style="color: #666666">-&gt;</span>heights <span style="color: #666666">=</span> height;
    config<span style="color: #666666">-&gt;</span>column_width <span style="color: #666666">=</span> (<span style="color: #B00040">size_t</span> <span style="color: #666666">*</span>)calloc(width, <span style="color: #008000; font-weight: bold">sizeof</span>(<span style="color: #B00040">size_t</span>));
    config<span style="color: #666666">-&gt;</span>line_height <span style="color: #666666">=</span> (<span style="color: #B00040">size_t</span> <span style="color: #666666">*</span>)calloc(height, <span style="color: #008000; font-weight: bold">sizeof</span>(<span style="color: #B00040">size_t</span>));
    <span style="color: #008000; font-weight: bold">return</span> config;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Observe que no código há a preocupação de se alocar a posição de memória necessária para uma determinada estrutura chamada <code>matriz_config_t</code> e que essa alocação é feita através de duas funções diferentes <code>calloc</code> e <code>malloc</code>. Esse código pode parecer simples, mas tem diversidades camadas de complexidades, como simplesmente diferenciar essas duas funções.</p>
</div>
<div class="paragraph">
<p><em>— Aonde você quer chegar?!?!</em></p>
</div>
<div class="paragraph">
<p>Ora! Qual é o objetivo de um desenvolvedor?</p>
</div>
<div class="paragraph">
<p><em>— Escrever código!</em></p>
</div>
<div class="paragraph">
<p>Errado! O objetivo de um desenvolvedor é resolver problemas através da escrita de código. Por isso, desenvolvedores não podem e não devem ficar preocupado com complexidades desnecessária. É para remover essa complexidade que surgem linguagens Orientadas a Objetos. As linguagens procedurais são simples e com poucas funcionalidades, por isso toda a informação é armazenada de forma simplória em estruturas. Isso gera complexidade e o objetivo principal de uma linguagem de programação é encapsular complexidade.</p>
</div>
<div class="paragraph">
<p>Vamos tentar explicar de outra forma&#8230;&#8203;</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-04-o-que-e-poo">O que é Programação Orientada a Objetos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vamos estabelecer algumas hipóteses&#8230;&#8203;.</p>
</div>
<div class="sect2">
<h3 id="_e-se-eu-puder-lidar-com-tipos-complexos">E se eu puder lidar com tipos complexos</h3>
<div class="paragraph">
<p>Uma linguagem OO irá sempre lidar com tipos de dados cada vez mais complexos pois não estamos apenas falando de programação, mas de encapsulamento de complexidades.</p>
</div>
<div class="paragraph">
<p>Vamos supor que eu desejo desenvolver uma API para navegação robótica e eu sei que meu robô tem 4 rodas e que posso definir a velocidade de cada roda. Será que eu preciso saber qual é a velocidade de cada roda? Ou eu posso apenas mandar comandos para o meu robô? Um exemplo de comandos são: "Vá para frente", "Faça uma curva de 30º", "Pare".</p>
</div>
<div class="paragraph">
<p>Quando falamos de Orientação a Objetos, devemos pensar em design de código. Não estamos falando de programação pura, mas de uma modelagem de dados e conceitos. Os detalhes internos devem ser escondidos para quem só sejam visíveis para os próprios times de manutenção.</p>
</div>
</div>
<div class="sect2">
<h3 id="_e-se-eu-puder-associar-comportamento-aos-meus-tipos-complexos">E se eu puder associar comportamento aos meus tipos complexos</h3>
<div class="paragraph">
<p>Todo código tem um contexto para ser executado. Quando eu tenho um robô e eu desejo que ele vá para uma posição, se essa ordem é diferente para cada robô e produz diferentes resultados, mas ela sempre está associada a um robô, ou seja, não faz sentido um outro objeto que não seja um robô se mover (<em>ainda falarei de herança</em>).</p>
</div>
<div class="paragraph">
<p>Mas podem existir outros objetos que se movem, certo? E como fica se a função mover é somente associada a robôs?</p>
</div>
<div class="paragraph">
<p>Em uma linguagem orientada a objetos, não temos funções e nem procedimentos, mas métodos. A diferença é que uma função transforma dados, procedimentos executa uma série de alterações nos parâmetros, mas um método envia uma mensagem (<em>essas definições não tem caráter acadêmico, se alguém tiver alguma referência me manda no Twitter</em>). Logo um método vai pertencer a um objeto, assim se formos modelar um Avião, podemos criar um outro método mover que existirá somente para um Avião e que será diferente do método mover de um robô.</p>
</div>
</div>
<div class="sect2">
<h3 id="_e-se-puder-compartilhar-o-comportamento-entre-tipos-diferentes">E se puder compartilhar o comportamento entre tipos diferentes</h3>
<div class="paragraph">
<p>Objetos tem um tipo especifico, por exemplo nós estamos falando de um robô. Mas eu posso assumir que um robô é um tipo de objeto móvel? Posso eu criar métodos nesse objeto móvel? O que essa implementação desse método faz para um robô é a mesma coisa que se faz para um avião?</p>
</div>
<div class="paragraph">
<p>Para cada pergunta acima, existe uma resposta no mundo da Programação Orientada a Objetos e é o que vamos ver na próxima sessão.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-04-orientacao-a-objetos">Orientação a Objetos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nós falamos um pouco sobre Programação Funcional e Programação Procedural, então vamos definir o que é Programação Orientada a Objetos (POO) antes de ver como Java faz POO.</p>
</div>
<div class="paragraph">
<p>Programação Orientada a Objetos é um modelo de design, analise e desenvolvimento de software que organiza todo o software ao redor dos dados e suas abstrações. Para que isso seja possível, é criado o conceito de Objeto. Um objeto é um componente de software composto de atributos e comportamento.</p>
</div>
<div class="paragraph">
<p>Quando falamos de orientação a objeto, focamos na definição do que é um objeto e das operações que esse objeto pode realizar, ao contrário da lógica necessária para realizar a operação. Os principais benefícios da POO é a reutilização de código, escalabilidade e eficiência no desenvolvimento. Então podemos definir que POO vai ter alguns elementos.</p>
</div>
<div class="sect2">
<h3 id="_elementos">Elementos</h3>
<div class="paragraph">
<p>Abaixo vemos as descrições de cada elemento da POO, elas não se referem a linguagem Java, mas ao paradigma em si.</p>
</div>
<div class="sect3">
<h4 id="_classes">Classes</h4>
<div class="paragraph">
<p><strong>Classes</strong> são tipos de dados definidos pelo usuário que atuam como modelo para objetos, atributos e métodos.</p>
</div>
</div>
<div class="sect3">
<h4 id="_objetos">Objetos</h4>
<div class="paragraph">
<p><strong>Objetos</strong> são instâncias de uma classe criada com dados específicos.</p>
</div>
</div>
<div class="sect3">
<h4 id="cap-04-elementos-metodos">Métodos</h4>
<div class="paragraph">
<p><strong>Métodos</strong> são funções definidas dentro de uma classe que descrevem o comportamento de um objeto. Cada método contido nas definições de classe começa com uma referência a um objeto de instância. Além disso, as sub-rotinas contidas em um objeto são chamadas de métodos de instância. Os programadores usam métodos para reutilização ou para manter a funcionalidade encapsulada dentro de um objeto por vez.</p>
</div>
</div>
<div class="sect3">
<h4 id="_atributos">Atributos</h4>
<div class="paragraph">
<p><strong>Atributos</strong> são definidos no modelo de classe e representam o estado de um objeto. Os objetos terão dados armazenados no campo de atributos. Os atributos de classe pertencem à própria classe.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-04-principios">Princípios</h3>
<div class="paragraph">
<p>Quando falamos em Orientação a Objetos, temos em mente alguns princípios.</p>
</div>
<div class="sect3">
<h4 id="_encapsulamento">Encapsulamento</h4>
<div class="paragraph">
<p>Encapsulamento significa que um objeto não é obrigado a expor a sua implementação e nem os seus atributos. Cabe ao design do objeto escolher como será feita essa exposição. Essa característica de ocultação de dados fornece maior segurança ao programa e evita corrupção de dados não intencional.</p>
</div>
</div>
<div class="sect3">
<h4 id="_abstração">Abstração</h4>
<div class="paragraph">
<p>Objetos criam abstrações que tornam possível controlar a complexidade. Ao se criar uma classe, o restante do sistema deverá interagir através da interface que ela propõe não tendo acesso a sua lógica interna.</p>
</div>
</div>
<div class="sect3">
<h4 id="cap-04-principios-heranca">Herança</h4>
<div class="paragraph">
<p>As classes podem reutilizar o código de outras classes. Relacionamentos e subclasses entre objetos podem ser atribuídos, permitindo que os desenvolvedores reutilizem a lógica comum enquanto ainda mantêm uma hierarquia única. Essa propriedade da OOP força uma análise de dados mais completa, reduz o tempo de desenvolvimento e garante um maior nível de precisão.</p>
</div>
</div>
<div class="sect3">
<h4 id="_polimorfismo">Polimorfismo</h4>
<div class="paragraph">
<p>Os objetos são projetados para compartilhar comportamentos e podem assumir mais de uma forma. O sistema poderá definir como vê um objeto e como interage por ele baseado na sua própria classe ou em alguma classe pai, reduzindo a complexidade ou a necessidade de duplicar código. Quando uma classe filha é criada, que estende a funcionalidade da classe pai, ambas podem ser tratada pelo mesmo código usando a classe pai como interface. O polimorfismo permite que diferentes tipos de objetos usem a mesma interface.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_como-java-faz-programação-orientada-a-objetos">Como Java faz Programação Orientada a Objetos</h3>
<div class="paragraph">
<p>Java é uma linguagem primariamente orientada a objetos, logo você deve primeiro entender o que é uma classe. Classe é o arquétipo de um objeto. Arquétipo, resumidamente, é o tipo comum de algo. Por exemplo, se eu falar que existe o tipo Gato, você vai imaginar o formato desse animal e algumas outras características, mas se eu falar que existe o Garfield você vai imaginar que ele é um Gato laranja, gordo e preguiçoso. O Garfield é um indivíduo do arquétipo Gato.</p>
</div>
<div id="significado-arquetipo" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-04/arquetipo.png" alt="arquetipo">
</div>
<div class="title">Figura 1. Significado de Arquétipo da Wikipedia</div>
</div>
<div class="paragraph">
<p>Vamos transpor isso pra Java? Podemos ter uma classe Gato, mas o objeto será um Garfield. Assim, podemos ter&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">package</span> <span style="color: #0000FF; font-weight: bold">org.animais.mamiferos</span>;

<span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">org.fisica.luz.Cor</span>;
<span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">org.animais.psique.Temperamento</span>;

<span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gato</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #B00040">float</span> pesoEmKg;
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> Cor cor;
    <span style="color: #008000; font-weight: bold">private</span> Temperamento temperamento;
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #0000FF">Gato</span>(<span style="color: #B00040">float</span> pesoEmKg, Cor cor, Temperamento temperamento) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">pesoEmKg</span> <span style="color: #666666">=</span> pesoEmKg;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">cor</span> <span style="color: #666666">=</span> cor;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">temperamento</span> <span style="color: #666666">=</span> temperamento;
    }

    <span style="color: #408080; font-style: italic">// MÉTODOS</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Isso significa que podemos modelar qualquer Gato por esse modelo, assim se quisermos ter um Garfield&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Gato garfield <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Gato(<span style="color: #666666">15.0</span>, Cor.<span style="color: #7D9029">LARANJA</span>, Temperamento.<span style="color: #7D9029">PREGUICOSO</span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>No primeiro trecho de código tempo a declaração da classe <code>Gato</code> no pacote <code>org.animais.mamiferos</code>. Isso significa que só pode existir um tipo de <code>Gato</code> nesse pacote, mas isso não implica que eu possa criar o tipo <code>Gato</code> para descrever, por exemplo, <em>instalações elétricas não-oficiais</em>, que obviamente não fazem parte do pacote <code>org.animais.mamiferos</code>, mas <code>org.humanos.civilizacoes.brasil.infraestrutura</code>. Classe é usada para definir o tipo do objeto, mas o pacote é o contexto na qual ele existe. Classe e Pacote tem uma relação umbilical, uma Classe sempre deve estar ligada a um Pacote.</p>
</div>
<div class="paragraph">
<p>A segunda coisa que vamos detalhar nesse trecho de código são os modificadores de acesso. Como disse uma linguagem orientada a objetos é usada para se encapsular detalhes, logo os modificadores de acesso servem para definir quem pode acessar o quê. Eles podem ser aplicados para Classes, Métodos e Campos e existem os seguintes modificadores de acesso.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Tipo</th>
<th class="tableblock halign-center valign-top">Token</th>
<th class="tableblock halign-left valign-top">Descrição</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Package Private</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Define que o elemento será acessível dentro do pacote. Esse é o modificador padrão, isso significa que nesse caso pode ser omitido.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Privado</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>private</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Define que o elemento só pode ser acessado dentro da própria classe.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Protegido</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>protected</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Define que o elemento é acessível dentro do mesmo pacote ou através de herança.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Público</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>public</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Define que o elemento é acessível em qualquer contexto.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Final</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>final</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Se aplicada a classe, ela não poderá ser estendida. Se aplicada a um campo ele não poderá ter seu valor alterado. Se aplicado a um método, ele não poderá ser reimplementado em uma classe que herda ele.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Estático</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>static</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Pode ser usado tanto em campos como em classes internas. Se usado no campo, ele vai ter apenas um valor e está associado a classe. Campos não estáticos são associados a objetos. Se aplicado a classes internas, ela não dependerá de um objeto.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Ainda existem dois mais dois modificadores (<code>volatile</code> e <code>transiente</code>), mas eles não são importantes quando falamos de OO. <code>transiente</code> será importante quando falarmos de serialização e <code>volatile</code> quando falarmos de threads. Dos outros, podemos agrupar o <code>private</code>, <code>protected</code>, <code>public</code> e a ausência de um desses, pois eles são mutualmente excludentes.</p>
</div>
<div class="paragraph">
<p>O próximo ponto que podemos falar é sobre métodos. Em Java não é comum termos funções puras, nem linguagem está preparada para isso. Temos basicamente dois tipos de métodos. Os métodos de instância são aqueles que são associados a um objeto. E os métodos estáticos são aqueles associados a uma classe, sem depender de uma instância. Conseguimos criar métodos estáticos usando o modificador de acesso <code>static</code>. Quando um método não é estático, podemos usar <code>this</code> para se referir a instância com a qual o método é associado.</p>
</div>
<div class="paragraph">
<p>Métodos sempre tem parâmetros e valor de retorno (pode ser <code>void</code> que significa um vazio existencial, diferente do vazio de posição que é a palavra <em>empty</em>). Métodos de instância sempre vão te acesso a um objeto específico (usando o <code>this</code>), enquanto métodos estáticos não o são.</p>
</div>
<div class="paragraph">
<p>Vamos ver melhor como os métodos funcionam? E se nós criássemos 3 métodos na nossa classe gato. O primeiro seria um método para mesclar características de 2 gatos, o segundo seria o método <code>meow</code> e o terceiro o método de reprodução (<code>cruza</code>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gato</span> {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Gato <span style="color: #0000FF">mistura</span>(Gato gatoA, Gato gatoB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> gatoC;
    }

    <span style="color: #408080; font-style: italic">// Campos, construtores, getters e setters</span>

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">meow</span>() {
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Miau!&quot;</span>);
    }

    <span style="color: #008000; font-weight: bold">public</span> Gato <span style="color: #0000FF">cruza</span>(Felino outro) {
        <span style="color: #008000; font-weight: bold">if</span> ((<span style="color: #666666">!</span>(outro <span style="color: #008000; font-weight: bold">instanceof</span> Gato)) <span style="color: #666666">||</span> sexo <span style="color: #666666">==</span> outro.<span style="color: #7D9029">sexo</span>) {
            <span style="color: #008000; font-weight: bold">throw</span> <span style="color: #008000; font-weight: bold">new</span> CruzamentoException(<span style="color: #BA2121">&quot;Não é possível gerar filhote!&quot;</span>);
        }
        <span style="color: #008000; font-weight: bold">return</span> mistura(<span style="color: #008000; font-weight: bold">this</span>, outro);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>O método <code>meow</code> é o exemplo clássico que veremos em herança, ele não retorna nada, só executa uma ação. Aqui vamos focar nos métodos <code>cruza</code> e <code>mistura</code> (ok, focar na parte reprodutiva foi péssimo&#8230;&#8203; mas estou falando de gatos!). <code>mistura</code> é um método que aleatoriamente vai gerar um novo gato baseado nas características de dois gatos. Nele podemos ver que o método recebe dois parâmetros e retorna um valor. No caso desse método, estamos retornando um novo objeto, mas nada impede de o retorno ser um dos parâmetros. Outra característica é que os parâmetros são uma passagem por referência e não por valor como vamos ver um pouco mais a frente. Sobre o método <code>cruza</code>, nele podemos acessar os campos do objeto local e campos da referência. Quero ressaltar o uso do <code>this</code> que é a forma de acessar a referência ao objeto pela qual o método é referenciado, o <code>this</code> não pode ser usado para métodos estáticos.</p>
</div>
<div class="sect3">
<h4 id="cap-04-principios-heranca-implemenacao">Como Java implementa Herança</h4>
<div class="paragraph">
<p>Falamos sobre classes e alguns detalhes, mas agora precisamos falar de herança.</p>
</div>
<div class="paragraph">
<p>Temos 3 tipos de classe: a Classe, a Interface e a Classe Abstrata.</p>
</div>
<div class="paragraph">
<p><em>— Peraê! Mas como uma classe pode ser também Interface e Classe Abstrata?!?!? Tem algum erro lógico nessa afirmação!</em></p>
</div>
<div class="paragraph">
<p>Não! Segura essa informação que quando formos falar sobre Reflexão trataremos do conceito interno de Classe. Por enquanto aceite que existem três tipos de classe e um deles é classe. 🤷‍♂️</p>
</div>
<div class="paragraph">
<p>A Interface é quando tempos um contrato de como uma classe deve ser implementada. Ela vai definir a assinatura de alguns métodos. Por assinatura entenda que é a forma como a JVM usa para identificar um método, ela é composta pelo nome do método e a lista de parâmetros. O tipo de retorno não faz parte de uma assinatura e isso vai ser importante mais a frente. Uma interface também pode definir métodos <code>default</code> e métodos <code>static</code>. Uma interface normalmente é usada para definir um tipo, ou comportamento, comum dentro de um sistema.</p>
</div>
<div class="paragraph">
<p>Uma classe abstrata é uma classe que não pode ser instanciada. Normalmente usamos quase abstrata quando desejamos compartilhar comportamento entre vários tipos. Em uma classe abstrata podemos definir variáveis e métodos, mas também podemos definir métodos abstratos (usando o modificador <code>abstract</code>). Ao se declara um método abstrato, estamos declarando apenas a assinatura, a implementação ficará a cargo de alguma classe que estende nossa classe abstrata.</p>
</div>
<div class="paragraph">
<p>E por fim uma classe é uma implementação pela qual podemos instanciar objetos. Classes podem ser estendidas também quando queremos modificar um comportamento específico. Por exemplo, e se quisermos modificar a forma como o Garfield mia?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>Gato garfield <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Gato(<span style="color: #666666">15.0</span>, Cor.<span style="color: #7D9029">LARANJA</span>, Temperamento.<span style="color: #7D9029">PREGUICOSO</span>) {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">meow</span>() {
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Miaaaaaaau!&quot;</span>);
    }
};</code></pre>
</div>
</div>
<div class="paragraph">
<p>Quando adicionamos um bloco de código lodo após a instanciação da classe, estamos criando uma classe anônima. Esse comportamento será especifico dessa instância. Nós poderíamos evitar isso usando o modificador <code>final</code> no método ou na classe. Se usarmos no método, nenhuma subclasse poderá estender esse método, mas se usarmos na classe, ela não poderá ser estendida.</p>
</div>
<div class="paragraph">
<p>Quando falamos de herança normalmente usamos as palavras estende e implementa. Estende é quando temos uma classe abstrata sendo estendida, e isso é feito usando a palavra reservada <code>extends</code>. Já implementa é quando temos uma interface sendo implementada pela classe, a palavra reservada <code>implements</code>.</p>
</div>
<div class="paragraph">
<p>O Java tem algumas limitações em heranças. Uma classe SÓ pode estender uma classe, mas pode implementar quantas interfaces forem necessárias. MAS interfaces com mesma assinatura e tipo de retorno diferentes não são possíveis de serem implementas por uma mesma classe. No caso abaixo, temos que um <code>Gato</code> estende um <code>Felino</code> e implementa as interfaces <code>Miador</code> e <code>Ronronador</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gato</span> <span style="color: #008000; font-weight: bold">extends</span> Felino <span style="color: #008000; font-weight: bold">implements</span> Miador, Ronronador {
    <span style="color: #408080; font-style: italic">// Implementação</span>
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-04-conceitos-oo">Conceitos da Orientação a Objetos</h3>
<div class="paragraph">
<p>Agora vamos discutir alguns conceitos comuns da orientação a objetos que podem nos auxiliar no dia a dia.</p>
</div>
<div class="sect3">
<h4 id="_herança">Herança</h4>
<div class="paragraph">
<p>Para entender herança, podemos pensar em herança genética. Todo objeto ele tem um arquétipo e ele vai possuir uma hierarquia de tipos. Um <code>Gato</code> é um <code>Felino</code> que é um <code>Animal</code>. Cada uma dessas classes podem ter comportamentos associados ou apenas assinaturas de métodos. Se voltarmos no post anterior, sobre a biblioteca <code>Collections</code>, vamos ver o mais comum tipo de herança.</p>
</div>
<div id="jdk-lib-collections" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-03/Collections.png" alt="Collections">
</div>
<div class="title">Figura 2. Pacote Java Collections</div>
</div>
<div class="paragraph">
<p>Vamos ver o caso da <code>LinkedList</code> que estende uma <code>AbstractSequentialList</code> e implementa as interface <code>List</code>, <code>Deque</code>, <code>Cloneable</code> e <code>Serializable</code>.</p>
</div>
<div class="paragraph">
<p><code>LinkedList</code> é uma classe, <code>AbstractSequentialList</code> é uma classe abstrata e <code>List</code> uma interface. <code>AbstractSequentialList</code> contém uma implementação de lista que por sua vêz estende uma <code>AbstractList</code>. Podemos dizer que <code>LinkedList</code> herda implementações de <code>AbstractSequentialList</code> e <code>AbstractList</code>. Assim como podemos dizer que <code>LinkedList</code> e <code>ArrayList</code> herdam implementações de <code>AbstractList</code> mesmo tendo comportamentos completamente diferentes.</p>
</div>
<div class="paragraph">
<p>Da mesma forma <code>LinkedList</code> e <code>ArrayList</code> são tipos de <code>List</code>, enquanto apenas <code>LinkedList</code> é um tipo de <code>Deque</code>.</p>
</div>
<div class="paragraph">
<p>Quando temos uma classe que herda tipos de outras classe, podemos definir nossos objetos com o tipo que desejarmos. Eu recomendo sempre usar a interface que você deseja usar e não a implementação final. Quer um exemplo? Vamos imaginar que eu quero definir um método que fará uma busca especifica pelo Gato mais gordo. Ao invés de declarar que desejo receber uma <code>LinkedList</code>, posso declarar que desejo receber apenas uma <code>List</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gatos</span> {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Gato <span style="color: #0000FF">maisGordo</span>(List<span style="color: #666666">&lt;</span>Gato<span style="color: #666666">&gt;</span> gatos) {
        <span style="color: #408080; font-style: italic">// encontra o Garfield aqui que não tem erro.</span>
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Uma dúvida clássica é se perguntar porque não devo usar o tipo mais específico. Nunca devemos usar as classes porque isso limita o uso do nosso código. Ao usar um <code>List</code>, eu posso aceitar qualquer implementação de <code>List</code>, mesmo implementações que eu não conheço. Essa preocupação será muito mais real quando estivermos falando de frameworks em que a geração de código ou classes do tipo proxy são comuns.</p>
</div>
</div>
<div class="sect3">
<h4 id="_override">Override</h4>
<div class="paragraph">
<p>Chamamos de <em>Override</em> a prática de sobrescrever implementações de métodos em classes filhos. Vamos voltar ao nosso exemplo de Gatos, e se existe uma raça especifica de gatos que não mia, são gatos mudos. Como esse característica é muito especifica mas ele definitivamente são gatos, podemos criar essa nova classe de gatos e sobrescrever o método.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">GatoMudo</span> <span style="color: #008000; font-weight: bold">extends</span> Gato {

    <span style="color: #AA22FF">@Override</span>
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">meow</span>() {
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;.&quot;</span>); <span style="color: #408080; font-style: italic">// . significa silêncio</span>
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Se tivermos um objeto da classe <code>GatoMudo</code>, mesmo que ele esteja definido como <code>Gato</code>, será chamado o método da classe <code>GatoMudo</code>.</p>
</div>
<div class="paragraph">
<p>O uso da anotação <code>@Override</code> não é obrigatório, mas é altamente recomendável.</p>
</div>
</div>
<div class="sect3">
<h4 id="_overload">Overload</h4>
<div class="paragraph">
<p>Chamamos de <em>Overload</em> quando criamos um novo método para um tipo diferente de parâmetros. Essa técnica é excelente quando queremos criar métodos semelhantes para tipos diferentes. Vamos supor que nosso método de <code>mistura</code> vai ser migrado para a classe abstrata de animais e que queremos criar esse método para alguns tipos de animais, não para todos, mas ele será diferente para alguns grupos (tem animal que se divide e não reproduz). Assim podemos criar um método mistura para os tipos <code>Mamifero</code>, <code>Ave</code>, <code>Reptil</code> e <code>Peixe</code>, cada método terá uma implementação completamente diferente.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Gato</span> {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Mamifero <span style="color: #0000FF">mistura</span>(Mamifero mamiferoA, Mamifero mamiferoB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> mamiferoC;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Ave <span style="color: #0000FF">mistura</span>(Ave aveA, Ave aveB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> aveC;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Reptil <span style="color: #0000FF">mistura</span>(Reptil reptilA, Reptil reptilB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> reptilC;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> Peixe <span style="color: #0000FF">mistura</span>(Peixe peixeA, Peixe peixeB) {
        <span style="color: #408080; font-style: italic">// Mágica acontece</span>
        <span style="color: #008000; font-weight: bold">return</span> peixeC;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Nós fizemos <em>overload</em> de um método estático, mas poderíamos ter feito de um método de instância.</p>
</div>
</div>
<div class="sect3">
<h4 id="_hashcode-equals-e-tostring">HashCode, Equals e ToString</h4>
<div class="paragraph">
<p>Uma outra reclamação constante de quem não gosta de Java é a necessidade de se implementar esses três métodos que as vezes parecem inúteis.</p>
</div>
<div class="paragraph">
<p>Primeiro devemos esclarecer que <code>hashCode</code>, <code>equals</code> e <code>toString</code> são métodos extremamente úteis e usados constantemente pela JVM. É sempre recomendável a leitura da documentação da classe <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Object.html">Object</a> sobre esses três métodos.</p>
</div>
<div class="paragraph">
<p><code>hashCode</code> é um método usado para o calculo do <em>Hash</em> do objeto. O hash é um valor inteiro que será usado para identificar cada objeto. Dois objetos iguais devem ter o mesmo hash, mas dois objetos com o mesmo hash não são iguais. Toda e qualquer classe usando o nome Hash usar esse método, assim se você tem um <code>HashMap</code> ou um <code>HashSet</code>, você tem o uso do método.</p>
</div>
<div class="paragraph">
<p><code>equals</code> é um método usado para se verificar um objeto é igual a outro. Ele é usado por várias algoritmos da JVM, as vezes associado com o hash ou sem associação. Quando temos um <code>HashMap</code> os dois métodos são usados. O <code>equals</code> é usando quando temos o que chamamos de <strong>Colisão de Hash</strong>, dois objetos diferentes que tem o mesmo hash.</p>
</div>
<div class="paragraph">
<p><code>toString</code> é usado para se criar um valor String para a classe. Sempre implemente o toString para melhorar o rastreamento de erros em logs de execução.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-04-passagem-por-valor-e-referencia">Passagem por valor e Passagem por referência</h3>
<div class="paragraph">
<p>Quando estudamos linguagem como C, estudar o tipo de passagem como argumento de uma função é muito importante, porque é possível controlar o que queremos fazer ao se escolher o tipo de parâmetro. Já em Java não nos preocupamos muito, mas em ambas a linguagem temos a possibilidade de se passar um argumento como valor ou como referência. Vamos primeiro definir para depois mostrar como pode ser feito?</p>
</div>
<div class="paragraph">
<p>Falamos de <strong>Passagem por valor</strong> de um argumento para uma função quando ao se alterar o valor desse argumento dentro de um função, essa alteração não é refletida fora da função. Já quando falamos de <strong>Passagem por referência</strong> de um argumento, ao se alterar o valor desse argumento dentro da função ele é refletido fora da função. Fácil de entender? Não?!?!</p>
</div>
<div class="paragraph">
<p>Em C, isso é meio óbvio porque podemos passar o valor ou a referência. Vou tentar mostrar aqui:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="c"><span></span><span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdio.h&gt;</span><span style="color: #BC7A00"></span>

<span style="color: #B00040">int</span> <span style="color: #0000FF">incrementaValor</span>(<span style="color: #B00040">int</span> valor) {
    <span style="color: #008000; font-weight: bold">return</span> valor <span style="color: #666666">+</span> <span style="color: #666666">1</span>;
}

<span style="color: #B00040">int</span> <span style="color: #0000FF">incrementaReferencia</span>(<span style="color: #B00040">int</span> <span style="color: #666666">*</span> valor) {
    (<span style="color: #666666">*</span>valor)<span style="color: #666666">++</span>
    <span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">*</span>valor;
}

<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>() {
    <span style="color: #B00040">int</span> contador <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
    printf(<span style="color: #BA2121">&quot;Valor: %d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, incrementaValor(contador));  <span style="color: #408080; font-style: italic">// Imprime &quot;Valor: 1&quot;</span>
    printf(<span style="color: #BA2121">&quot;Valor: %d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, incrementaValor(contador));  <span style="color: #408080; font-style: italic">// Imprime &quot;Valor: 1&quot;</span>

    printf(<span style="color: #BA2121">&quot;Valor: %d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, incrementaReferencia(<span style="color: #666666">&amp;</span>contador));  <span style="color: #408080; font-style: italic">// Imprime &quot;Valor: 1&quot;</span>
    printf(<span style="color: #BA2121">&quot;Valor: %d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, incrementaReferencia(<span style="color: #666666">&amp;</span>contador));  <span style="color: #408080; font-style: italic">// Imprime &quot;Valor: 2&quot;</span>
    <span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">0</span>;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>O que acontece quando eu chamo a função <code>incrementaValor</code> é que uma cópia do contador é enviado para a função, mas quando chamo <code>incrementaReferencia</code> o próprio contador é enviado para a função.</p>
</div>
<div class="paragraph">
<p>Em Java só temos passagem por valor quando usamos tipos primitivos (<code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code> ou <code>char</code>). Quando definimos um objeto, sempre estamos passando a referência do mesmo para funções. Por isso é muito importante entender o que é e como garantir imutabilidade. Quando formos falar de memória, vou explicar o que é o conceito de memória e como isso funciona na prática, mas, resumidamente, tipos primitivos são armazenados na stack do programa enquanto todas as classes são armazenados na memoria heap do programa. Ao se criar um objeto, um ponteiro na stack é criado para um novo espaço de memoria alocado na Heap. <em>Calma, você não tem obrigação de entender isso facilmente</em>!!!</p>
</div>
</div>
<div class="sect2">
<h3 id="_imutabilidade-e-mutabilidade">Imutabilidade e Mutabilidade</h3>
<div class="paragraph">
<p>Chamamos de mutabilidade a capacidade de um objeto ter seu estado interno alterado. Em orientação a objetos mutabilidade é um requisito desejado para quase todas as classes, por isso que só recentemente o Java incorporou o conceito de imutabilidade a linguagem através dos Records. Antes dos Records era comum se usar POJOs em que existia para cada campo um respectivo <code>get</code> e um <code>set</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">POJO</div>
POJO é um acrônimo para <em>Plain Old Java Object</em>, que significa velho e simples objeto Java. É um termo usado para referenciar um padrão de classes Java que não dependem da herança de interfaces ou classes de frameworks externos.
</div>
</div>
<div class="paragraph">
<p>Records é o tipo que adiciona o conceito de imutabilidade ao código Java. Abaixo vou definir a classe <strong>Usuario</strong> três vezes. Na primeira vez ela é mutável, na segunda imutável usando POJO e na terceira usando record.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Usuario</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #B00040">int</span> id;
    <span style="color: #008000; font-weight: bold">private</span> String username;
    <span style="color: #008000; font-weight: bold">private</span> String email;

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #0000FF">Usuario</span>(<span style="color: #B00040">int</span> id, String username, String email) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">id</span> <span style="color: #666666">=</span> id;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">username</span> <span style="color: #666666">=</span> username;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">email</span> <span style="color: #666666">=</span> email;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span> <span style="color: #0000FF">getId</span>() {
        <span style="color: #008000; font-weight: bold">return</span> id;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">setId</span>(<span style="color: #B00040">int</span> id) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">id</span> <span style="color: #666666">=</span> id;
    }

    <span style="color: #008000; font-weight: bold">public</span> String <span style="color: #0000FF">getUsername</span>() {
        <span style="color: #008000; font-weight: bold">return</span> username;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">setUsername</span>(String username) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">username</span> <span style="color: #666666">=</span> username;
    }

    <span style="color: #008000; font-weight: bold">public</span> String <span style="color: #0000FF">getEmail</span>() {
        <span style="color: #008000; font-weight: bold">return</span> email;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">setEmail</span>(String email) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">email</span> <span style="color: #666666">=</span> email;
    }

    <span style="color: #408080; font-style: italic">// Implementa hashCode, equals e toString</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para implementar um campo imutável, devemos usar o modificador de acesso <code>final</code>. Um campo final terá seu valor definido no construtor e não poderá ser alterado em todo ciclo de vida do objeto.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Usuario</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> <span style="color: #B00040">int</span> id;
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> String username;
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">final</span> String email;

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #0000FF">Usuario</span>(<span style="color: #B00040">int</span> id, String username, String email) {
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">id</span> <span style="color: #666666">=</span> id;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">username</span> <span style="color: #666666">=</span> username;
        <span style="color: #008000; font-weight: bold">this</span>.<span style="color: #7D9029">email</span> <span style="color: #666666">=</span> email;
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">int</span> <span style="color: #0000FF">getId</span>() {
        <span style="color: #008000; font-weight: bold">return</span> id;
    }

    <span style="color: #008000; font-weight: bold">public</span> String <span style="color: #0000FF">getUsername</span>() {
        <span style="color: #008000; font-weight: bold">return</span> username;
    }

    <span style="color: #008000; font-weight: bold">public</span> String <span style="color: #0000FF">getEmail</span>() {
        <span style="color: #008000; font-weight: bold">return</span> email;
    }

    <span style="color: #408080; font-style: italic">// Implementa hashCode, equals e toString</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ao usar records, é como se todos os campos já fossem definidos como final, mas a grande vantagem se dá que não precisamos implementar os métodos <code>hashCode</code>, <code>equals</code> e <code>toString</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> record <span style="color: #0000FF">Usuario</span>(<span style="color: #B00040">int</span> id, String username, String email) {}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-04-conclusao">Conclusão</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Orientação a Objeto é uma ótima técnica para fazer design de código. Ela é melhor utilizada quando tempos que modelar problemas do mundo real, mas haverá dificuldade se o modelo for mais próximo de um modelo matemático.</p>
</div>
<div class="paragraph">
<p>O principal ganho com a modelagem a Orientação a Objetos é a capacidade de se encapsular complexidades.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Orientação a Objeto" /><category term="Tutorial" /><category term="Java" /><summary type="html"><![CDATA[Você sabe o que é Orientação a Objetos? E você sabe porque OO é o principal foco da linguagem Java? A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">Collections!?!? Listas, conjuntos e mapas… as classes mais usadas do Java!</title><link href="https://blog.vepo.dev/posts/java-101-collections" rel="alternate" type="text/html" title="Collections!?!? Listas, conjuntos e mapas… as classes mais usadas do Java!" /><published>2022-05-06T00:00:00+00:00</published><updated>2022-05-06T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/17-38-00-java-101-collections</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-collections"><![CDATA[<div class="paragraph">
<p>No post anterior nós falamos sobre o que é a JVM e sobre como criar seu primeiro projeto Java. Se você não leu e não sabe escrever um código Java, volta aí no post anterior e veja.</p>
</div>
<div class="paragraph">
<p>Agora vamos dar um segundo passo, pois para quem está começando a entender Java uma das dificuldades é conhecer a extensa biblioteca que a JVM provê. Essa biblioteca trás para nos dá a capacidade de não reescrever códigos básicos para qualquer software, por isso não conhecer é um risco, pois podemos precisar reescrever código que já estão a nossa disposição. Precisamos também compreender alguns conceitos para usar bem os recursos a nossa disposição, vou dar um exemplo fora do contexto desse post, ninguém precisa implementa uma conexão socket, basta usar a classe <a href="https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html"><code>java.net.Socket</code></a>.</p>
</div>
<div class="paragraph">
<p>Na figura abaixo, temos a lista de todos os módulos da versão 17 do Java (uma versão é chamada de JDK, <em>Java Development Kit</em>). É essencial conhecermos o módulo <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/module-summary.html"><code>java.base</code></a>, já os demais módulos podem ser necessários para funcionalidades específica.</p>
</div>
<div id="jdk-libs" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://docs.oracle.com/en/java/javase/18/docs/api/index.html"><img src="/assets/images/java-101/cap-03/jdk-libs.PNG" alt="jdk libs"></a>
</div>
<div class="title">Figura 1. Módulos do JDK 17</div>
</div>
<div class="paragraph">
<p><em>— Tem muita biblioteca aí! Pode onde devo começar?</em></p>
</div>
<div class="paragraph">
<p>Eu recomendaria pelo que conhecemos como <em>Collections</em>. Ela não é especificamente um pacote, mas uma interface, a <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/Collection.html"><code>Collection</code></a>, e uma série de classes que a usam. A Collections é praticamente onipresente em todo código Java.</p>
</div>
<div class="paragraph">
<p>Quando ouvimos falar das Java Collections, podemos assumir que estamos falando de classes da biblioteca padrão do Java que estendem a interface Collection, essa interface por sua vez irá implementar uma serie de métodos que são comuns em todas as classes que implementam ela. Mas ter métodos em comum não implica em comportamento similar. Para entender o comportamento, precisamo olhar para interfaces que estendem a interface Collection, as principais são <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/List.html"><code>List</code></a> e <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/Set.html"><code>Set</code></a>.</p>
</div>
<div class="paragraph">
<p>Mas a biblioteca Collections não está restrita a interface Collection, outras interfaces podem ser incluídas como a <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/Map.html"><code>Map</code></a> e a <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/stream/Stream.html"><code>Stream</code></a>.</p>
</div>
<div class="paragraph">
<p>Vamos olhar como usar cada uma dessas interfaces e classes? No diagrama abaixo estão listadas as classes mais importantes, exceto a <code>Stream</code> da qual discutiremos no final.</p>
</div>
<div id="jdk-lib-collections" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-03/Collections.png" alt="Collections">
</div>
<div class="title">Figura 2. Pacote Java Collections</div>
</div>
<div class="sect1">
<h2 id="_listas-conjuntos-e-mapas">Listas, Conjuntos e Mapas</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Listas, Conjuntos e Mapas são os conceitos básicos da biblioteca Collections. Esses conceitos podem ser abstratos a primeira vista, mas a diferença é percebida quando perguntamos o que indexa cada um deles.</p>
</div>
<div class="paragraph">
<p>Se você não entendeu o significado de indexar (indexação), podemos assumir que estou falando da forma como os elementos são agrupados. Vamos pensar uma lista (<code>List</code>), nela os elementos são agrupados de forma sequencial, ou seja, indexados pela posição. Mas quando temos um conjuntos (<code>Set</code>), eles estão agrupados pela identidade própria deles, ou seja, elementos iguais não devem ser repetidos, sendo contado apenas uma vez. Já nos Mapas (<code>Map</code>), os elementos são indexados por uma chave externa a própria natureza do elemento, nesse caso podemos afirmar que temos um par de chave/valor. É por isso que <code>List</code> e <code>Set</code> estendem a interface <code>Collection</code> enquanto <code>Map</code> não estende, porque essa classe não é apenas uma coleção, mas uma indexação composta por dois valores.</p>
</div>
<div id="indexacao-significado" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-03/indexação.PNG" alt="indexação">
</div>
<div class="title">Figura 3. Significado de indexação</div>
</div>
<div class="paragraph">
<p><em>— Cara, você falou um monte aí, mas eu não entendi nada!</em></p>
</div>
<div class="paragraph">
<p>OK! Então vamos demonstrar isso por código? No pequeno trecho abaixo estou inicializando uma lista, um conjunto e um mapa e usando eles para adicionar alguns valores. Você pode ser por exemplo Strings, tente executar o código abaixo usando a ferramenta <em>jshell</em> (ferramenta REPL excelente adicionada na JDK 9), preste bem atenção no trecho de código a esquerda e no resultado a direta (<code>$x</code> representa o resultado retornado pela operação).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">java.util.ArrayList</span>;
<span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">java.util.HashSet</span>;
<span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">java.util.HashMap</span>;

<span style="color: #008000; font-weight: bold">var</span> lista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ArrayList<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span>();       <span style="color: #408080; font-style: italic">// lista ==&gt; []</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 1&quot;</span>);                      <span style="color: #408080; font-style: italic">// $5 ==&gt; true</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 2&quot;</span>);                      <span style="color: #408080; font-style: italic">// $6 ==&gt; true</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 1&quot;</span>);                      <span style="color: #408080; font-style: italic">// $7 ==&gt; true</span>
lista.<span style="color: #7D9029">size</span>() <span style="color: #666666">==</span> <span style="color: #666666">3</span>                          <span style="color: #408080; font-style: italic">// $8 ==&gt; true</span>
lista;                                     <span style="color: #408080; font-style: italic">// lista ==&gt; [Valor 1, Valor 2, Valor 1]</span>

<span style="color: #008000; font-weight: bold">var</span> conjunto <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> HashSet<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span>();      <span style="color: #408080; font-style: italic">// conjunto ==&gt; []</span>
conjunto.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 1&quot;</span>);                   <span style="color: #408080; font-style: italic">// $11 ==&gt; true</span>
conjunto.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 2&quot;</span>);                   <span style="color: #408080; font-style: italic">// $12 ==&gt; true</span>
conjunto.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;Valor 1&quot;</span>);                   <span style="color: #408080; font-style: italic">// $13 ==&gt; false</span>
conjunto;                                  <span style="color: #408080; font-style: italic">// conjunto ==&gt; [Valor 1, Valor 2]</span>

<span style="color: #008000; font-weight: bold">var</span> mapa <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> HashMap<span style="color: #666666">&lt;</span>Integer, String<span style="color: #666666">&gt;</span>(); <span style="color: #408080; font-style: italic">// mapa ==&gt; {}</span>
mapa.<span style="color: #7D9029">put</span>(<span style="color: #666666">1</span>, <span style="color: #BA2121">&quot;Valor 1&quot;</span>);                    <span style="color: #408080; font-style: italic">// $16 ==&gt; null</span>
mapa.<span style="color: #7D9029">put</span>(<span style="color: #666666">2</span>, <span style="color: #BA2121">&quot;Valor 2&quot;</span>);                    <span style="color: #408080; font-style: italic">// $17 ==&gt; null</span>
mapa.<span style="color: #7D9029">put</span>(<span style="color: #666666">3</span>, <span style="color: #BA2121">&quot;Valor 1&quot;</span>);                    <span style="color: #408080; font-style: italic">// $18 ==&gt; null</span>
mapa.<span style="color: #7D9029">put</span>(<span style="color: #666666">1</span>, <span style="color: #BA2121">&quot;Valor 3&quot;</span>);                    <span style="color: #408080; font-style: italic">// $19 ==&gt; &quot;Valor 1&quot;</span>
mapa;                                      <span style="color: #408080; font-style: italic">// mapa ==&gt; {1=Valor 3, 2=Valor 2, 3=Valor 1}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Dá pra ver claramente que em uma <code>List</code> podemos adicionar (<code>add</code>) elementos repetidos, mas ao adicionar um elemento repetido em um <code>Set</code> ele não é alterado. Apesar de nosso exemplo manter a ordem, um <code>Set</code> não garante a ordem dos elementos. Observe também que quando adicionamos um elemento em um <code>Set</code> o método <code>add</code> irá retornar se o valor já existia ou não no conjunto.</p>
</div>
<div class="paragraph">
<p>Para um <code>Map</code> temos o comportamento um pouco diferente. Temos que usar a operação <code>put</code> com uma chave e um valor como parâmetros. Valores repetidos podem ser adicionados desde que com chaves diferentes, mas quando reutilizamos uma chave, o antigo valor associado a ele é o retorno da operação.</p>
</div>
<div class="paragraph">
<p>Essas três classes são muito usadas e por isso é bom conhecer cada método dela. Recomendo ler o <em>Javadoc</em> mesmo que você não saiba ler em inglês, tente usar o Google Translator. Você deve ficar atento é a versão da documentação que você está lendo. Cada método e classe terá uma referência sobre a versão do Java na qual ela foi introduzida. Por exemplo, abaixo tempos o método <a href="https://cr.openjdk.java.net/~iris/se/18/build/latest/api/java.base/java/util/Map.html#copyOf(java.util.Map">Map#copyOf</a>) que foi introduzida na JDK 9.</p>
</div>
<div id="javadoc-map-copyof" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-03/javadoc.png" alt="javadoc">
</div>
<div class="title">Figura 4. Documentação da classe Map, método copyOf</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tipos-de-listas">Tipos de Listas</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Como falamos anteriormente, listas servem para armazenar objetos sequencialmente. No nosso exemplo, usamos a class <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/ArrayList.html"><code>ArrayList</code></a>, mas ela não é a única classe de lista existente, temos também a <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/LinkedList.html"><code>LinkedList</code></a>. Vamos ver a diferença das duas?</p>
</div>
<div class="paragraph">
<p>Para compreender bem a diferença das duas classes, precisamos conhecer um pouco de como elas são implementadas.</p>
</div>
<div class="paragraph">
<p>A classe <code>ArrayList</code> é uma abstração de uma lista sobre um vetor. A classe é inicializada, por padrão, alocando um vetor de tamanho 10. Esse tamanho só será alterado quando a capacidade máxima dela for atingida, o que significa que a operação <code>add</code> pode significar que um vetor inteiro foi criado com o tamanho <code>n + 1</code> e depois todos os elementos foram copiados para o novo vetor.</p>
</div>
<div class="paragraph">
<p><em>— Isso não me parece uma boa coisa&#8230;&#8203;</em></p>
</div>
<div class="paragraph">
<p>Exato! Se a classe é utilizada para uma lista que removemos e adicionamos elementos constantemente, ela terá uma péssima performance. Quando adicionamos um elemento, no melhor caso é uma operação de tempo constante, mas no pior caso pode ser que o tempo dessa operação dependa do tamanho da lista (aqui tem o conceito de <a href="https://pt.wikipedia.org/wiki/An%C3%A1lise_assint%C3%B3tica"><strong>Análise assintótica</strong></a> que vamos falar em outro post). Já para se remover um elemento é preciso copiar todos os elementos posteriores a posição do elemento removido, o que significa que essa operação só é ótima quando removemos o último elemento.</p>
</div>
<div class="paragraph">
<p><em>— Então a classe ArrayList é péssima!</em></p>
</div>
<div class="paragraph">
<p>Não! Nós só falamos as desvantagens dessa classe! Ela é a classe do Java Collection mais utilizada, pois ela é ótima quando você tem uma lista de acesso aleatório.</p>
</div>
<div class="paragraph">
<p><em>— Que raios é acesso aleatório?!?!</em></p>
</div>
<div class="paragraph">
<p>Acesso aleatório é quando você precisa acessar um elemento qualquer da lista sem nenhuma ordenação. Digamos que você deseja acessar a posição <em>541</em> de uma lista com <em>9172</em> elementos, o tempo de acesso é constante. O mesmo acontece se você precisa substituir um elemento dentro da lista.</p>
</div>
<div class="paragraph">
<p>Logo, essa classe é ótima para listas de tamanhos fixos (ou com pouca variação) e que precise de acesso aleatório. Se você já sabe o tamanho da lista que irá preencher, você pode já iniciar a classe com o tamanho deseja, isso vai poupar muito processamento do seu software!</p>
</div>
<div class="paragraph">
<p>A outra classe é a <code>LinkedList</code>, ela é bem mais complexa que a <code>ArrayList</code>. Se você abrir o código dela, vai ver que a classe só armazena o primeiro elemento, o último elemento e o tamanho da lista. Cada elemento é um nó da lista, que contém uma referência ao elemento posterior e anterior. Isso significa que para acessar um elemento, é preciso navegar na lista pelos nós.</p>
</div>
<div class="paragraph">
<p><em>— OI?!?!</em></p>
</div>
<div class="paragraph">
<p>Vamos demonstrar&#8230;&#8203; Se tivermos uma lista com 10 elementos, e eu preciso acessar o elemento na 5ͣ  a operação vai acessar os elementos 1, 2, 3, 4 e depois retornar o 5. Isso significa que qualquer operação que não seja na cabeça ou na calda da lista vai depender da posição do elemento.</p>
</div>
<div class="paragraph">
<p><em>— Então ela não serve para acesso aleatórios como a <code>ArrayList</code>?!?</em></p>
</div>
<div class="paragraph">
<p>Servir ela serve&#8230;&#8203; Devemos usar a palavra <strong>ótimo</strong>! Ótimo é um conceito que sempre associamos a algo bom, mas na verdade ótimo é quando atingimos uma situação satisfatória de acordo com certos parâmetros. Servir não é um termo correto porque independente do uso as duas classes vão responder corretamente, mas se considerarmos o parâmetro velocidade, podemos escolher uma implementação de lista ótima.</p>
</div>
<div class="paragraph">
<p>Mas voltando a resposta&#8230;&#8203; A <code>LinkedList</code> é ótima para usos em que elementos são adicionados/removidos no inicio e no final constantemente. É por esse motivo que a classe implementa duas interfaces que adicionam métodos importantes para o acesso direto desses elementos, a <code>Queue</code> e <code>Deque</code>.</p>
</div>
<div class="paragraph">
<p>Por fim podemos falar da <code>PriorityQueue</code>&#8230;&#8203; Essa classe é especial porque ela pode funcionar como uma lista comum, mas podemos associar ela a um <code>Comparator</code> que irá definir a prioridade que os elementos devem ser acessados. Internamente os elementos são armazenados pela ordem de inserção, mas eles são retornados pelos métodos <code>poll()</code> de acordo com a ordem estabelecida pelo comparador usado no construtor, isso significa que você sempre inicializar com um comparador.</p>
</div>
<div class="paragraph">
<p>Vamos ver ela em execução? No exemplo abaixo vamos adicionar algumas Strings e ver como elas são retornadas pelo método <code>poll()</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">var</span> lista <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> PriorityQueue<span style="color: #666666">&lt;</span>String<span style="color: #666666">&gt;</span>();  <span style="color: #408080; font-style: italic">// lista ==&gt; []</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;a&quot;</span>);                           <span style="color: #408080; font-style: italic">// $2 ==&gt; true</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;d&quot;</span>);                           <span style="color: #408080; font-style: italic">// $3 ==&gt; true</span>
lista;                                    <span style="color: #408080; font-style: italic">// lista ==&gt; [a, d]</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;b&quot;</span>);                           <span style="color: #408080; font-style: italic">// $5 ==&gt; true</span>
lista;                                    <span style="color: #408080; font-style: italic">// lista ==&gt; [a, d, b]</span>
lista.<span style="color: #7D9029">add</span>(<span style="color: #BA2121">&quot;d&quot;</span>);                           <span style="color: #408080; font-style: italic">// $7 ==&gt; true</span>
lista;                                    <span style="color: #408080; font-style: italic">// lista ==&gt; [a, d, b, d]</span>
lista.<span style="color: #7D9029">poll</span>();                             <span style="color: #408080; font-style: italic">// $9 ==&gt; &quot;a&quot;</span>
lista.<span style="color: #7D9029">poll</span>();                             <span style="color: #408080; font-style: italic">// $10 ==&gt; &quot;b&quot;</span>
lista.<span style="color: #7D9029">poll</span>();                             <span style="color: #408080; font-style: italic">// $11 ==&gt; &quot;d&quot;</span>
lista.<span style="color: #7D9029">poll</span>();                             <span style="color: #408080; font-style: italic">// $12 ==&gt; &quot;b&quot;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Observe que existe uma ordenação no retorno, tanto que a falta de ordem na adição foi resolvida. Essa classe é muito útil quando precisamos implementar uma lista de prioridades.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tipos-de-conjuntos">Tipos de Conjuntos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Os conjuntos são mais simples que as Listas, vamos ter duas classes importantes: <code>HashSet</code> e <code>TreeSet</code>.</p>
</div>
<div class="paragraph">
<p><code>HashSet</code> deve ser usada quando a ordem dos elementos não é importante, tanto que a interface não dispõe de métodos para acesso sequencial aos elementos. Os elementos são tratados como um conjunto. Se você for abrir a implementação do <code>HashSet</code>, ela usa um <code>HashMap</code> internamente, a seguir veremos como o <code>HashMap</code> funciona. A adição/remoção em um <code>HashSet</code> são mais rápidas que em uma <code>TreeSet</code>.</p>
</div>
<div class="paragraph">
<p>Já a <code>TreeSet</code> é um conjunto ordenado, por isso existe a necessidade de um <code>Comparator</code>, isso significa que os elementos podem ser acessados em ordem, mas ao se adicionar há uma penalidade pois haverá uma operação de balanceamento da árvore interna.</p>
</div>
<div class="paragraph">
<p>Em resumo, use <code>HashSet</code> se a ordem não importa e <code>TreeSet</code> se a ordem importa!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tipos-de-mapas">Tipos de Mapas</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Os mapas são a base de implementação dos conjuntos, <code>HashMap</code> terá o mesmo comportamento do <code>HashSet</code> exceto pelo fato de que ao invés de indexar pelo próprio elemento, ele será indexado pela chave. Já o <code>TreeMap</code> vai armazenar os elementos seguindo a ordenação das chaves.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_streams">Streams</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code>Stream</code> é uma interface pela qual teremos um post especifico futuramente pois essa foi uma das maiores contribuições do Java 8. Quando usamos o método <code>stream()</code> presente em cada Collection, nós não criamos uma nova coleção, nós apenas iniciamos o processo de criação de uma pipeline. O principal conceito de um Stream é que a construção da nova collection será postergada até que o final dela seja conhecido. Essa propriedade é o que chamamos de <a href="https://pt.wikipedia.org/wiki/Avalia%C3%A7%C3%A3o_pregui%C3%A7osa"><em>Lazy Evaluation</em></a>, isso significa que existirá um algoritmo para criação dessa lista, mas ele só será executado ao final.</p>
</div>
<div class="paragraph">
<p><em>— Entendi bulhufas!</em></p>
</div>
<div class="paragraph">
<p>OK! Vamos demonstrar usando o JShell&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">var</span> lista <span style="color: #666666">=</span> Arrays.<span style="color: #7D9029">asList</span>(<span style="color: #BA2121">&quot;a&quot;</span>, <span style="color: #BA2121">&quot;aaa&quot;</span>, <span style="color: #BA2121">&quot;b&quot;</span>, <span style="color: #BA2121">&quot;c&quot;</span>, <span style="color: #BA2121">&quot;aaaaa&quot;</span>, <span style="color: #BA2121">&quot;asdada&quot;</span>);       <span style="color: #408080; font-style: italic">// lista ==&gt; [a, aaa, b, c, aaaaa, asdada]</span>
lista.<span style="color: #7D9029">stream</span>().<span style="color: #7D9029">filter</span>(x <span style="color: #666666">-&gt;</span> x.<span style="color: #7D9029">contains</span>(<span style="color: #BA2121">&quot;a&quot;</span>)).<span style="color: #7D9029">collect</span>(Collectors.<span style="color: #7D9029">toList</span>()); <span style="color: #408080; font-style: italic">// $2 ==&gt; [a, aaa, aaaaa, asdada]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>No código acima nós criamos uma lista e depois criamos um <code>Stream</code> baseado nela. Até chamar o método <code>collect</code>, o <code>Stream</code> não passava de uma sequência de operações sob a lista, depois se cria uma nova lista (poderia ser qualquer coisa) usando as operações. A lista original não é alterada!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-03-conclusao">Conclusão</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Collections é uma biblioteca onipresente! Em qualquer código você verá vestígio dela. Experimente e conheça.</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Tutorial" /><category term="Collections" /><category term="Bibliotecas" /><summary type="html"><![CDATA[Continuando a série sobre Java, vamos apresentar o que é o Java Collections. Vou apresentar um panorama sobre a biblioteca contendo as principais classes. A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">Como começar a aprender Java</title><link href="https://blog.vepo.dev/posts/java-101" rel="alternate" type="text/html" title="Como começar a aprender Java" /><published>2022-04-29T00:00:00+00:00</published><updated>2022-04-29T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/14-29-00-java-101-como-comecar</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101"><![CDATA[<div class="paragraph">
<p>A intenção desse material é te apresentar o básico sobre Java oferecendo ferramentas para que você possa aprender a programar. Nenhum material por sí só fará o trabalho completo, para que você possa se tornar um desenvolvedor é preciso muito exercício, por isso vá lentamente avançando sobre os tópicos propostos e fazendo todos os exercícios propostos.</p>
</div>
<div class="paragraph">
<p>Nesse sessão você vai aprender:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>O que é Java</p>
</li>
<li>
<p>Como criar seu primeiro programa Java</p>
</li>
</ul>
</div>
<hr>
<div class="paragraph">
<p>Nos últimos meses muitas pessoas vem me perguntando por onde começar a desenvolver Java. Eu sei que existem vários cursos na internet que tem essa resposta e não quero me propor a criar um curso Java. Creio que o conhecimento deve ser livre e sem escassez. Por isso vou te apresentar o básico que você deve saber sobre Java.</p>
</div>
<div class="paragraph">
<p>Eu vou tentar seguir a ordem dessa thread que fiz em dezembro.</p>
</div>
<div id="twitter-thread" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://twitter.com/vepo/status/1473250093742571521"><img src="/assets/images/java-101/cap-01/java-thread.PNG" alt="java thread"></a>
</div>
<div class="title">Figura 1. Thread que fiz no Twitter em dezembro de 2021</div>
</div>
<div class="sect1">
<h2 id="java-e-um-ecossistema">Java é um ecossistema</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Muitos tendem a querer comparar Java com outras linguagens. Alguns tem a pretensão de comparar Java com linguagens como Javascript ou mesmo Scala. Esse é um erro crasso! Essa comparação não tem sentido porque o Java não é apenas uma linguagem, mas um ecossistema.</p>
</div>
<div class="paragraph">
<p>Primeiro para entender melhor vamos tentar compreender melhor o que é uma linguagem de programação&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Quando a computação eletrônica começou a se popularizar, existiam inúmeras plataformas e cada uma delas haviam um conjunto de instruções. Para desenvolver qualquer software era preciso conhecer o hardware e o conjunto de instruções que existem naquele hardware. Quer ver um exemplo? Tenta navegar no <a href="https://github.com/chrislgarry/Apollo-11">código da Apollo 11</a> para tentar entender algo. É praticamente impossível, até mesmo para quem já desenvolveu em Assembly. Isso acontece porque o conjunto de instruções e a arquitetura do hardware são completamente diferentes das máquinas que temos hoje.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Assembly</div>
<strong>Assembly</strong> ou linguagem de montagem é uma notação legível por humanos para o código de máquina que uma arquitetura de computador específica usa, utilizada para programar códigos entendidos por dispositivos computacionais.
</div>
</div>
<div id="apollo11" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/apollo11.png" alt="apollo11">
</div>
<div class="title">Figura 2. Olha o código da ignição da Apolo 11! 😲</div>
</div>
<div class="paragraph">
<p>Com o tempo as máquinas ganharam um padrão, tanto de processadores como de Opcodes. Hoje sabemos que existe um processador, um barramento, memória, registradores, etc&#8230;&#8203; Esses componentes variam um pouco de arquitetura pra arquitetura, mas eles continuam seguindo um padrão. Abaixo você pode ver a documentação de um opcode.</p>
</div>
<div id="opcode" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/opcode.png" alt="opcode">
</div>
<div class="title">Figura 3. Exemplo de Opcode</div>
</div>
<div class="paragraph">
<p><em>— Cara qual a relação disso com Java?</em></p>
</div>
<div class="paragraph">
<p>Bom, vamos lá! Eu vou chegar lá! Eu prometo! Tudo que um computador reconhece são opcodes! Nenhum computador entende nenhuma linguagem de programação. Ah, mas você vai me dizer que algumas pessoas desenvolvem assembly&#8230;&#8203; Sim! Mas mesmo para quem faz esses programas é preciso transcrever o programa em linguagem de máquina. Por exemplo, no opcode acima, o computador não sabe o que é <code>NOP</code>, ele só sabe que a operação <code>01</code> não deve produzir nenhum efeito. Então todo programa precisa ser compilado para uma série de instruções que chegam a praticamente o formato de máquina. Estou falando do famoso <code>EXE</code> do Windows. E esses programas também dependem de uma série de bibliotecas do sistema operacional para o qual foram compilados.</p>
</div>
<div class="paragraph">
<p>Até 1990 era comum um programa ser compilado para uma máquina especifica. Quem já trabalhou com Linux nos anos 2000 sabe o que é isso, você tinha que baixar o código fonte de um programa e compilar ele para a sua distribuição pois na maioria dos casos as versões de dependência eram muito especificas. Por isso uma grande empresa do Vale do Silício teve uma grande ideia! E se escrevêssemos uma linguagem em que ao se escrever um código ele poderá ser executado em qualquer lugar?</p>
</div>
<div class="paragraph">
<p>O ano era 1991 e a Sun já começava a se preparar para embarcar software em dispositivos portáveis e eletrodomésticos. Para isso era preciso de uma linguagem em que se pudesse criar programas sem nenhuma dependência com a arquitetura do processador e nem com o sistema operacional. Mas existia um grande desafio: como fazer para encapsular toda a lógica do hardware e do sistema operacional? Por isso surgiu algo que é tão importante quanto a linguagem Java: a <strong>Java Virtual Machine</strong>! Ou JVM para os mais íntimos&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>A JVM é um programa que lê um conjunto de classes e executa como se fosse um processador em alto nível. Ela tem uma arquitetura similar a uma máquina e instruções, como se fosse um processador. Se você for curioso, pode ler a <a href="https://docs.oracle.com/javase/specs/jvms/se18/html/index.html">especificação</a> dela, pois é aberta e pode ser acessada por qualquer fornecedor que queira porta ela em seu sistema operacional.</p>
</div>
<div class="paragraph">
<p><em>— Ah, mas Java nem é tão popular!</em></p>
</div>
<div class="paragraph">
<p>Então agora para e olha para o transformador que existe na sua rua&#8230;&#8203; E se eu te dissesse que é provável que existe uma JVM rodando perto dele para monitorar esse transformador específico? Você acreditaria? Em algumas cidades isso existe. E só é possível porque a JVM é portátil em qualquer tipo de dispositivo.</p>
</div>
<div class="paragraph">
<p>Como eles tinha requisitos de portabilidade para criar o Java, foi preciso criar uma máquina virtual poderosa e é ela quem tem grande parte do crédito da popularidade da linguagem. Ao abstrair as particularidades de vários sistemas operacionais e hardwares, foi possível se economizar tempo escrevendo e compilando código.</p>
</div>
<div class="paragraph">
<p><em>— Então você tá falando que o Java é famoso só por causa da JVM?</em></p>
</div>
<div class="paragraph">
<p>Óbvio que não! A JVM já vem com uma biblioteca padrão que é muito poderosa. Podemos ter acesso a biblioteca de coleções que é poderosa, a biblioteca de Reflections foi a base da grande maioria dos frameworks dos anos 2000, etc&#8230;&#8203; A JVM era poderosa e ela era parte do que chamamos Java. Ela era tão boa que surgiram linguagens que compilavam para rodar JVM e algumas delas são bem populares como: Kotlin, Groovy, Scala e Clojure.</p>
</div>
<div class="paragraph">
<p><em>— Ah, mas Java é chato. Não dá nem pra escrever um programa sem ter um objeto! Porque tem que sempre escrever um objeto? Quem teve essa ideia infeliz?</em></p>
</div>
<div class="paragraph">
<p>Eu poderia colocar essa pergunta como um <em>ageísmo</em>, mas eu prefiro o tempo <em>esnobismo cronológico</em>. Mas você está certo! Na minha humilde opinião, essa ideia é infeliz! Hoje nós sabemos disso porque a experiência desenvolvendo na linguagem Java nos mostrou isso. Quando ela foi desenvolvida a crença comum era de que Orientação Objeto era a panaceia para todos os males da computação. Se quiser reclamar, pode! Mas lhe garanto que não foi a pior ideia envolvendo OO, tentaram criar um banco de dados OO. Isso é bem pior do que escrever uma linguagem puramente OO.</p>
</div>
<div class="paragraph">
<p>Houveram projetos focados em fazer que componentes fosse a principal forma de desenvolvimento de software. Se acreditava que toda programação seria feita através do arrasto e do clique do mouse. Foi muito esforço para que não fosse mais preciso escrever código e nós estamos em 2022 escrevendo código. Quando o JavaBeans foi criado, a intenção era que ele pudesse ser manipulado por uma ferramenta visual, a BeanBox. Seria uma IDE que se conectaria vários componentes para que a dependência do desenvolvimento fosse reduzida. Como vemos pela história: deu errado! Mas esse esforço gerou muitas boas tecnologias que temos hoje.</p>
</div>
<div class="paragraph">
<p>Java Beans é uma especificação que deu origem ao que conhecemos hoje como Jakarta EE. É o falecido Java EE! É um modelo de programação em que seu código não fica dependente de um framework, da mesma forma que seu código não é dependente de uma máquina. Hoje é possível você escrever um programa para <em>Quarkus</em> e usar o mesmo código para OpenLiberty.</p>
</div>
<div class="paragraph">
<p>Já que falamos um pouco da história do Java, vamos começar a escrever nossa primeira linha Java?</p>
</div>
<div class="sect2">
<h3 id="_instalando-tudo">Instalando tudo&#8230;&#8203;</h3>
<div class="paragraph">
<p>Para desenvolver programas Java é preciso instalar a JDK. JDK é a sigla para <em>Java Development Kit</em> que são uma série de programas para compilar, empacotar e monitorar seu programa Java. Desde de 2017 o Java adotou um processo chamado Release Train, em que uma nova versão é lançada a cada 6 meses com as funcionalidades prontas, então não gaste tempo procurando qual versão instalar&#8230;&#8203; Você precisa de apenas uma coisa: o <a href="https://sdkman.io/">SDKMan!</a>. Com ele é possível instalar qualquer versão de Java que você deseja e algumas outras ferramentas como vamos citar mais a frente.</p>
</div>
<div class="paragraph">
<p>Outra habilidade importante é saber usar a linha de comando, você pode ser um desenvolvedor sem usar ela, mas eu recomendo ter um pouco de intimidade com o Bash e usar constantemente.</p>
</div>
<div class="paragraph">
<p><em>— Bash não é do Linux?! Eu uso Windows e não quero mudar meu sistema operacional!</em></p>
</div>
<div class="paragraph">
<p>Calma. Se você usa Windows&#8230;&#8203; Tá errado! Brincadeira! <em>hehehe</em> Você pode usar Windows, eu mesmo uso Windows (não por livre e espontânea vontade). Para usar Bash no Windows você pode instalar o <a href="https://git-scm.com/downloads">cliente GIT</a> que ele já vem com uma ferramenta chamada Git Bash, um console MinGW que é um porte dos programas GNU para Windows.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">GNU</div>
GNU é um conjunto de programas que são criados pela comunidade de Software Livre. Software Livre é muito mais que Open Source, vale a pena conhecer mais a iniciativa <strong>Free Software Foundation</strong> que é responsável pelo GNU, é por causa dela que você não precisa pagar pra usar um compilador ou outras ferramentas que até sua criação eram pagas.
</div>
</div>
<div class="paragraph">
<p>Para desenvolver, é recomendável que você use uma IDE. IDEs ou <em>Integrated Development Environment</em> (Ambiente de Desenvolvimento Integrado) são programas que integram editores de textos e ferramentas para desenvolvimento, build e analise de código. Escolha a que você mais gosta. Todas as IDEs relevantes no mercado tem suporte a Java.</p>
</div>
<div class="paragraph">
<p><em>— Ah, mas eu não posso usar o Notepad++?!?</em></p>
</div>
<div class="paragraph">
<p>Pode, mas você precisa de uma IDE porque é mais fácil desenvolver usando ferramentas. Elas provem funcionalidades que diminuem o número de bugs e facilitam o desenvolvimento como fazer a marcação da linguagem (<em>o famoso code highlight</em>) e para propor código (<em>o famoso auto-complete</em>). Desenvolvedores experientes preferem comodidade porque os problemas já são complexos demais para ficar perdendo tempo. Eu recomendo usar ou o Eclipse, o IntelliJ Idea ou o VS Code. As três IDEs são boas.</p>
</div>
<div class="paragraph">
<p>Usando uma IDE você pode construir seu projetinho Java, mas será muito difícil compartilhar ele com outras pessoas ou mesmo criar um executável a partir dele. Para facilitar a build do seu projeto existem ferramentas de gerenciamento de build: o Maven e o Gradle. Para instalar ele, procure no SDKMan!. Usando Maven/Gradle você pode definir o seu projeto e as dependências dele em um arquivo e ele será responsável pro baixar todas as dependências, compilar e gerar o que você precisa para colocar o seu software em produção.</p>
</div>
<div class="paragraph">
<p>Logo em resumo, o que você precisa é:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>SDKMan!</p>
</li>
<li>
<p>Maven ou Gradle</p>
</li>
<li>
<p>Java</p>
</li>
<li>
<p>Uma boa IDE (<a href="https://www.eclipse.org/downloads/">Eclipse</a>, <a href="https://www.jetbrains.com/pt-br/idea/download/#section=windows">IntelliJ IDEA</a> ou <a href="https://code.visualstudio.com/download">VS Code</a>)</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_construindo-meu-primeiro-programa-java">Construindo meu primeiro programa Java</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Então agora que você sabe que o Java é mais que uma linguagem, vamos escrever nosso primeiro código Java?</p>
</div>
<div class="paragraph">
<p>Se você quiser aprender, recomendo abrir sua IDE preferida e criar um projeto Java. Tente explorar sua IDE, ela tem uma infinidade de recursos que muitas vezes são poucos conhecidos principalmente por desenvolvedores mais experientes. Vou demonstrar primeiro como criar usando o IntelliJ, depois usando o Eclipse e por fim usando o Gradle e o Maven. Se você deseja apenas estudar, sinta-se a vontade para usar apenas a IDE, mas se você usar um sistema de build será mais fácil você trabalhar em equipes e seu projeto terá uma aparência mais "<em>profissional</em>".</p>
</div>
<div class="sect2">
<h3 id="_usando-o-intellij">Usando o IntelliJ</h3>
<div class="paragraph">
<p>Com o ItelliJ, selecione Novo Projeto e você verá a tela abaixo. Você precisa adicionar o nome do projeto (<em>Name</em>) e o local em que deseja criar o projeto (<em>Location</em>). Eu recomendo você ter uma pasta separada para todos os seus projetos.</p>
</div>
<div id="intellij-novo-projeto-1" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/intellij-novo-projeto-1.png" alt="intellij novo projeto 1">
</div>
<div class="title">Figura 4. Tela de novo Projeto</div>
</div>
<div class="paragraph">
<p>Na tela acima, temos algumas opções que são importantes. A primeira delas é que você pode escolher o sistema de build do seu projeto. O IntelliJ já tem um sistema de build próprio, mas você pode usar Maven ou Gradle. A segunda opção é que você pode escolher a versão da JDK que você vai usar. A JDK é a ferramenta que te possibilitará desenvolver Java, ela contém todos os programas para compilar seu código, executar, debugar e muitas outras ferramentas que podemos falar mais a diante. O IntelliJ permite você selecionar a JDK e fazer o download dela. Eu recomendo você usar a versão mais recente e escolher a Oracle OpenJDK como <em>vendor</em>. Depois você pode escolher já inicializar esse projeto como um repositório git (<em>Create Git repository</em>) ou iniciar o projeto com um código de exemplo (<em>Add sample code</em>).</p>
</div>
<div class="paragraph">
<p>Depois de criado o projeto, você terá que adicionar uma classe ao projeto. Todo programa Java precisa de um método de entrada chamado <code>main</code>. Apesar de muitos criticarem essa limitação, isso era comum quando o Java foi desenvolvido. Hoje, na verdade, o Java não tem essa limitação, você pode usar o <a href="https://cr.openjdk.java.net/~rfield/tutorial/JShellTutorial.html">JShell</a> e importar um arquivo <code>jsh</code>. Para criar sua primeira classe, selecione o botão direito do mouse na pasta <code>src</code> e depois selecione <strong>New → Java Class</strong>.</p>
</div>
<div id="intellij-novo-projeto-2" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/intellij-novo-projeto-2.png" alt="intellij novo projeto 2">
</div>
<div class="title">Figura 5. Criando nova classe</div>
</div>
<div class="paragraph">
<p>Ao selecionar uma nova classe, será necessário dar um nome a ela. O nome de uma classe é o que chamamos de <em>Fully Qualified Name</em>, ele é composto pelo nome do pacote e o real nome da classe, no caso estou criando o pacote <code>io.vepo.helloworld</code> e a classe <code>HelloWorld</code>. Vamos falar mais sobre classes e pacotes quando formos falar de Orientação a Objetos (eu prometo falar disso, tenham paciência!).</p>
</div>
<div id="intellij-novo-projeto-3" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/intellij-novo-projeto-3.png" alt="intellij novo projeto 3">
</div>
<div class="title">Figura 6. Dando nome a classe</div>
</div>
<div class="paragraph">
<p>Criada a classe, vou te apresentar uma funcionalidade muito importante. Abra o editor de texto posicione o cursor para editar o texto dentro da classe, adicione o texto <code>ma</code> e use a funcionalidade mais fabulosa que se chama <strong>auto-complete</strong> selecionando <strong>CTRL+SPACE</strong>! Magicamente a IDE vai compreender qual é o contexto e vai propor o que você deve escrever. Agora siga para o último <em>snippet</em> desse post. (snippet significa trecho, é normalmente um significado para um trecho de código que serve de exemplo simples).</p>
</div>
<div id="intellij-novo-projeto-4" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/intellij-novo-projeto-4.png" alt="intellij novo projeto 4">
</div>
<div class="title">Figura 7. Criando método main</div>
</div>
</div>
<div class="sect2">
<h3 id="_usando-o-eclipse">Usando o Eclipse</h3>
<div class="paragraph">
<p>Eclipse é uma IDE que pode parecer ultrapassada, mas ela tem uma relação intrínseca com o Java, <a href="https://www.oracle.com/java/technologies/java-se-support-roadmap.html">hoje uma nova versão do Java</a> é liberado pela Oracle semestralmente, mas para que a Oracle conseguisse essa proeza (antes demorava anos) ela acabou deixando liberando o Java EE para Eclipse Foundation sob o nome de Jakarta EE. Por enquanto você não precisa saber de nada disso, só lembre que Eclipse é a IDE da Eclipse Foundation que controla alguma coisa do Java!</p>
</div>
<div class="paragraph">
<p>Porque eu citei o Java EE? Porque é provável que ao tentar fazer o download do Eclipse você veja a opção Enterprise como disponível. Você não precisa por enquanto de uma versão enterprise, tudo que você precisa é do Java Padrão (ou Java Standard Edition, SE para os mais íntimos).</p>
</div>
<div class="paragraph">
<p>Assim, ao iniciar o Workspace do Eclipse para Java você verá a opção para criar um novo projeto Java.</p>
</div>
<div id="eclipse-novo-projeto-1" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/eclipse-novo-projeto-1.png" alt="eclipse novo projeto 1">
</div>
<div class="title">Figura 8. Criar novo projeto - Atalho</div>
</div>
<div class="paragraph">
<p>Ao selecionar, você entrará no Wizard de criação de um novo projeto. Semelhantemente ao IntelliJ, você terá que escolher um nome para o projeto e um local, a diferença é que no Eclipse o local padrão é o workspace. Você não precisa criar o projeto no workspace, você pode usar qualquer diretório, mas será no workspace que o Eclipse salvará alguns arquivos que definem como você está usando o mesmo, por isso caso você tenha mais de um contexto de desenvolvimento, você pode usar vários workspaces e trocar quando necessitar trocar de contextos. Por exemplo, você tem o workspace do trabalho e o workspace da faculdade, ou um workspace para cada projeto que você está trabalhando.</p>
</div>
<div class="paragraph">
<p>Você também pode selecionar a JDK que vai usar. Eu recomendo selecionar <strong>Finish</strong>, pois as outras telas do wizard são usadas para adicionar novas bibliotecas ou mudar a estrutura de diretórios do projeto.</p>
</div>
<div id="eclipse-novo-projeto-2" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/eclipse-novo-projeto-2.png" alt="eclipse novo projeto 2">
</div>
<div class="title">Figura 9. Criar novo projeto - Wizard</div>
</div>
<div class="paragraph">
<p>Da mesma forma que o IntelliJ você tem que selecionar o botão direito do mouse na pasta <code>src</code> e depois selecione <strong>New → Java Class</strong>.</p>
</div>
<div id="eclipse-novo-projeto-3" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/eclipse-novo-projeto-3.png" alt="eclipse novo projeto 3">
</div>
<div class="title">Figura 10. Criando classe - Atalho</div>
</div>
<div class="paragraph">
<p>E por fim dar um nome a classe, mas diferente do IntelliJ, o Eclipse dá mais liberdade para criar a classe, como já adicionar o método <code>main</code>.</p>
</div>
<div id="eclipse-novo-projeto-4" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-01/eclipse-novo-projeto-4.png" alt="eclipse novo projeto 4">
</div>
<div class="title">Figura 11. Criando classe - Wizard</div>
</div>
<div class="paragraph">
<p>Com a classe, você também pode usar o <strong>auto-complete</strong>. Eu pessoalmente acho essa funcionalidade melhor no Eclipse que no IntelliJ. Aliás, se você usa VS Code, você está usando essa funcionalidade porque o VS Code usa o servidor de código do Eclipse.</p>
</div>
<div class="paragraph">
<p>Uma desvantagem de usar eclipse é que ele não usa coordenadas Maven como veremos a seguir para definir as dependências.</p>
</div>
</div>
<div class="sect2">
<h3 id="_usando-o-gradle">Usando o Gradle</h3>
<div class="paragraph">
<p>O erro mais comum de quem trabalha em grandes times é baixar uma IDE e criar um projeto Java. 🤯 Eu fiz isso por muito tempo, até descobrir que é só dor de cabeça. Quando fazemos isso acabamos por obrigar todo mundo do time a usar a mesma IDE e a ter que alterar arquivos de configuração complicados para fazer o projeto funcionar. Por isso, é mais fácil você usar o Maven ou o Gradle. Usar um sistema de build não significa não usar uma IDE, as IDEs conseguem importar a estrutura desses projetos e a partir daí toda as configurações serão feitas usando o sistema de build, mesmo se forem feitas através da IDE. A minha opção pessoal é o Maven, mas é por pura comodidade pois sou usuário há bastante tempo. Já tive vontade de aprender Gradle, mas&#8230;&#8203; Bom&#8230;&#8203; Vamos ver o Gradle!</p>
</div>
<div class="paragraph">
<p>O Gradle te permite gerar toda a estrutura do seu projeto automaticamente, basta executar <code>gradle init</code> no diretório da aplicação e seguir respondendo as perguntas. Eu recomendo criar uma application Java não quebrada em submódulos usando Groovy e JUnit Jupyter conforme as opções abaixo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="bash"><span></span>$ gradle init

Select <span style="color: #008000">type</span> of project to generate:
  <span style="color: #666666">1</span>: basic
  <span style="color: #666666">2</span>: application
  <span style="color: #666666">3</span>: library
  <span style="color: #666666">4</span>: Gradle plugin
Enter selection <span style="color: #666666">(</span>default: basic<span style="color: #666666">)</span> <span style="color: #666666">[1</span>..4<span style="color: #666666">]</span> <span style="color: #666666">2</span>

Select implementation language:
  <span style="color: #666666">1</span>: C++
  <span style="color: #666666">2</span>: Groovy
  <span style="color: #666666">3</span>: Java
  <span style="color: #666666">4</span>: Kotlin
  <span style="color: #666666">5</span>: Scala
  <span style="color: #666666">6</span>: Swift
Enter selection <span style="color: #666666">(</span>default: Java<span style="color: #666666">)</span> <span style="color: #666666">[1</span>..6<span style="color: #666666">]</span> <span style="color: #666666">3</span>

Split functionality across multiple subprojects?:
  <span style="color: #666666">1</span>: no - only one application project
  <span style="color: #666666">2</span>: yes - application and library projects
Enter selection <span style="color: #666666">(</span>default: no - only one application project<span style="color: #666666">)</span> <span style="color: #666666">[1</span>..2<span style="color: #666666">]</span> <span style="color: #666666">1</span>

  <span style="color: #666666">1</span>: Groovy
  <span style="color: #666666">2</span>: Kotlin
Enter selection <span style="color: #666666">(</span>default: Groovy<span style="color: #666666">)</span> <span style="color: #666666">[1</span>..2<span style="color: #666666">]</span> <span style="color: #666666">1</span>

Select <span style="color: #008000">test</span> framework:
  <span style="color: #666666">1</span>: JUnit <span style="color: #666666">4</span>
  <span style="color: #666666">2</span>: TestNG
  <span style="color: #666666">3</span>: Spock
  <span style="color: #666666">4</span>: JUnit Jupiter
Enter selection <span style="color: #666666">(</span>default: JUnit Jupiter<span style="color: #666666">)</span> <span style="color: #666666">[1</span>..4<span style="color: #666666">]</span> <span style="color: #666666">4</span>

Project name <span style="color: #666666">(</span>default: meu-projeto-gradle<span style="color: #666666">)</span>:
Source package <span style="color: #666666">(</span>default: meu.projeto.gradle<span style="color: #666666">)</span>:


BUILD SUCCESSFUL
<span style="color: #666666">2</span> actionable tasks: <span style="color: #666666">2</span> executed</code></pre>
</div>
</div>
<div class="paragraph">
<p>O próximo passo é abrir o diretório em uma IDE, ver a estrutura criada. Para saber como usar o Gradle, use o comando <code>gradle tasks</code> e com um pouco de Google Translator você poderá saber tudo o que fazer com o projeto.</p>
</div>
<div class="paragraph">
<p>Eu nunca tinha usado o Gradle e ele me parece bem mais fácil que o Maven. Você precisa ficar atento ao arquivo <code>build.gradle</code> que é onde todas as propriedades são definidas. Elas serão bem similares as definidas no nosso projeto Maven, mas em uma linguagem diferente, o Groovy.</p>
</div>
</div>
<div class="sect2">
<h3 id="_usando-o-maven">Usando o Maven</h3>
<div class="sidebarblock">
<div class="content">
<div class="title">Aviso</div>
Apesar de Maven usar XML, não se sinta intimidado. Eu deixe um exemplo com comentários. Caso você ainda ache difícil, manda um feedback aí com a sua dificuldade pelo twitter para mim (<a href="https://twitter.com/vepo">@vepo</a>).
</div>
</div>
<div class="paragraph">
<p>Com o Maven você pode facilmente criar um projeto Java e compilar ele independente de IDE. O Maven também vai se encarregará de encontrar todas as dependências em suas versões e dependências. Então para criar um projeto Java basta criar um arquivo <code>pom.xml</code> e um arquivo Java, como na estrutura abaixo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>.
├── src
│   └── main
│       └── java
│           └── io
│               └── vepo
│                   └── helloworld
│                       └── HelloWorld.java
└── pom.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para quem não conhece o Maven (<em>dê uma olhada nesse <a href="https://github.com/dev-roadmap/backend-roadmap/blob/main/caso-de-uso-00-configurando-um-projeto-quarkus.md">simples tutorial</a></em>), ele vai gerenciar a build do seu projetos Java. O arquivo <code>pom.xml</code> vai conter as informações básicas do projeto e as dependências. Você pode achar estranha a estrutura de diretórios, mas ela é bastante útil para evitar configurações. O Maven atua por um padrão chamado <a href="https://pt.wikipedia.org/wiki/Conven%C3%A7%C3%A3o_sobre_configura%C3%A7%C3%A3o">Convenção sobre configuração</a>, ao invés de colocar todas as configurações do projeto, basta seguir essa regrinha básica de estrutura de diretórios.</p>
</div>
<div class="paragraph">
<p>Para encontrar dependências Maven, é possível procurar no mvnrepository.com. Cada dependência é definida pelas coordenadas <code>groupId</code>, <code>artifactId</code> e <code>version</code> e elas podem ser encontradas diretamente no mvnrepository.com, como é o caso do Kafka Clientes <a href="https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients">mvnrepository.com/artifact/org.apache.kafka/kafka-clients</a>. Observe o padrão da URL, <code>mvnrepository.com/artifact/{groupId}/{artifactId}</code>. É possível também adicionar a versão na URL <code>mvnrepository.com/artifact/{groupId}/{artifactId}/{version}</code>. Isso facilita a busca pode dependências.</p>
</div>
<div class="paragraph">
<p>Para facilitar na execução, já estou colocando o plugin <code>org.codehaus.mojo:exec-maven-plugin</code> corretamente configurado para apontar para a classe <code>io.vepo.helloworld.HelloWorld</code>, assim para executar basta usar <code>mvn clean compile exec:java</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="xml"><span></span><span style="color: #BC7A00">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span style="color: #008000; font-weight: bold">&lt;project</span> <span style="color: #7D9029">xsi:schemaLocation=</span><span style="color: #BA2121">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span> <span style="color: #7D9029">xmlns=</span><span style="color: #BA2121">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span style="color: #7D9029">xmlns:xsi=</span><span style="color: #BA2121">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span style="color: #008000; font-weight: bold">&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;modelVersion&gt;</span>4.0.0<span style="color: #008000; font-weight: bold">&lt;/modelVersion&gt;</span>

    <span style="color: #008000; font-weight: bold">&lt;groupId&gt;</span>io.vepo.helloworld<span style="color: #008000; font-weight: bold">&lt;/groupId&gt;</span> <span style="color: #408080; font-style: italic">&lt;!-- Use um identificado para sua empresa                    --&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;artifactId&gt;</span>hello-world<span style="color: #008000; font-weight: bold">&lt;/artifactId&gt;</span>  <span style="color: #408080; font-style: italic">&lt;!-- Use um identificado para seu projeto                    --&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;version&gt;</span>1.0.0-SNAPSHOT<span style="color: #008000; font-weight: bold">&lt;/version&gt;</span>     <span style="color: #408080; font-style: italic">&lt;!-- Use um versão baseada em https://semver.org/lang/pt-BR/ --&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;name&gt;</span>Hello World!<span style="color: #008000; font-weight: bold">&lt;/name&gt;</span>             <span style="color: #408080; font-style: italic">&lt;!-- Dê um nome legal ao seu projeto                         --&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;properties&gt;</span>
        <span style="color: #408080; font-style: italic">&lt;!-- Caso você se uma versão de Java diferente, altere a linha abaixo --&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;java.version&gt;</span>18<span style="color: #008000; font-weight: bold">&lt;/java.version&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span style="color: #008000; font-weight: bold">&lt;/project.build.sourceEncoding&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span style="color: #008000; font-weight: bold">&lt;/project.reporting.outputEncoding&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;maven.compiler.parameters&gt;</span>true<span style="color: #008000; font-weight: bold">&lt;/maven.compiler.parameters&gt;</span>

        <span style="color: #008000; font-weight: bold">&lt;maven.compiler.source&gt;</span>${java.version}<span style="color: #008000; font-weight: bold">&lt;/maven.compiler.source&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;maven.compiler.target&gt;</span>${java.version}<span style="color: #008000; font-weight: bold">&lt;/maven.compiler.target&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;/properties&gt;</span>

    <span style="color: #008000; font-weight: bold">&lt;dependencies&gt;</span>
        <span style="color: #408080; font-style: italic">&lt;!-- Procure as dependências no mvnrepository.com --&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;/dependencies&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;build&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;finalName&gt;</span>hello-world<span style="color: #008000; font-weight: bold">&lt;/finalName&gt;</span> <span style="color: #408080; font-style: italic">&lt;!-- Esse nome é usado para construir o jar final --&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;plugins&gt;</span>
            <span style="color: #008000; font-weight: bold">&lt;plugin&gt;</span>
                <span style="color: #008000; font-weight: bold">&lt;groupId&gt;</span>org.codehaus.mojo<span style="color: #008000; font-weight: bold">&lt;/groupId&gt;</span>
                <span style="color: #008000; font-weight: bold">&lt;artifactId&gt;</span>exec-maven-plugin<span style="color: #008000; font-weight: bold">&lt;/artifactId&gt;</span>
                <span style="color: #008000; font-weight: bold">&lt;version&gt;</span>3.0.0<span style="color: #008000; font-weight: bold">&lt;/version&gt;</span>
                <span style="color: #008000; font-weight: bold">&lt;configuration&gt;</span>
                    <span style="color: #008000; font-weight: bold">&lt;mainClass&gt;</span>io.vepo.helloworld.HelloWorld<span style="color: #008000; font-weight: bold">&lt;/mainClass&gt;</span>
                <span style="color: #008000; font-weight: bold">&lt;/configuration&gt;</span>
            <span style="color: #008000; font-weight: bold">&lt;/plugin&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;/plugins&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;/build&gt;</span>
<span style="color: #008000; font-weight: bold">&lt;/project&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Observe como é simples&#8230;&#8203; Com isso todas as configurações ficam disponíveis em um único arquivo que pode ser usado pela sua IDE preferida.</p>
</div>
<div class="paragraph">
<p>Agora é só criar a classe como o exemplo abaixo e pronto! Execute <code>mvn clean compile exec:java</code> e você verá o resultado na tela.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">package</span> <span style="color: #0000FF; font-weight: bold">io.vepo.helloworld</span>;

<span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">HelloWorld</span> {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">main</span>(String<span style="color: #666666">[]</span> args) {
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Hello World!&quot;</span>);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Agora caso você queira criar um programa usando um framework&#8230;&#8203; Eu recomendo você procurar o tutorial desse framework. Talvez você precisará escrever um <code>main</code> específico ou mesmo usar um conjunto de anotações, adicionar uma série de dependências e um plugin.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-01-exercicios">Exercícios</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Os exercícios são propostos como forma de validar que você pode ir para o próximo passo. Nessa sessão vamos apenas pedir para você configurar o ambiente, para isso:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Configure usa IDE preferida</p>
</li>
<li>
<p>Crie um programa Java usando a IDE</p>
</li>
<li>
<p>Crie um programa Java usando um sistema de build (Maven ou Gradle)</p>
</li>
<li>
<p>Tente criar um programa linha de comando usando os <a href="https://pt.wikipedia.org/wiki/C%C3%B3digo_escape_ANSI">código de escape ANSI</a>. Você pode fazer usando o <code>System.out.println</code> ou uma biblioteca (por exemplo a <a href="https://github.com/fusesource/jansi">github.com/fusesource/jansi</a>)</p>
</li>
<li>
<p>[Opcional] Tente criar e rodar um projeto <strong>Spring Boot</strong> usando o <a href="https://start.spring.io">Spring Initializr</a></p>
</li>
<li>
<p>[Opcional] Tente criar e rodar um projeto <strong>Quarkus</strong> usando o <a href="https://code.quarkus.io/">Quarkus - Start coding with code.quarkus.io</a></p>
</li>
<li>
<p>[Opcional] Tente criar e rodar um projeto <strong>Microprofile.io</strong> usando <a href="https://start.microprofile.io">Starter | MicroProfile</a></p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-01-proximos-passos">Próximos passos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Agora que você sabe como escrever e executar um programa Java, você pode conhecer um pouco mais da sintaxe da linguagem. Ela é baseada na linguagem C, mas tem algumas especificidades&#8230;&#8203; Eu recomendei o tutorial do <a href="https://www.w3schools.com/java/java_syntax.asp">W3CSchools</a> por ter ao menos uma listagem das principais construções do Java 8. Tente saber como declarar uma classe, um método, variáveis, quais são as principais estruturas de loop (<code>for</code> e <code>while</code>) e suas variações e por fim as estruturas lógicas (<code>if</code> e <code>switch</code>).</p>
</div>
<div class="paragraph">
<p>Depois conheça ao menos alguns dos pacotes básicos da linguagem, a <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/module-summary.html">documentação</a> está disponível na internet. Eu recomendo que você comece pelo pacote <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/package-summary.html"><code>java.util</code></a> ele vai conter as classes básicas de coleções. No próximo post vamos focar exatamente nela!</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Tutorial" /><summary type="html"><![CDATA[Você sabe o que é o mínimo que você precisa saber pra desenvolver Java? Aqui eu vou mostrar um pouco de como criar um programa "production ready". A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">A sintaxe do Java</title><link href="https://blog.vepo.dev/posts/java-101-sintaxe" rel="alternate" type="text/html" title="A sintaxe do Java" /><published>2022-04-29T00:00:00+00:00</published><updated>2022-04-29T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/14-29-00-java-101-sintaxe</id><content type="html" xml:base="https://blog.vepo.dev/posts/java-101-sintaxe"><![CDATA[<div class="paragraph">
<p>A intenção desse material é te apresentar o básico sobre Java oferecendo ferramentas para que você possa aprender a programar. Nenhum material por sí só fará o trabalho completo, para que você possa se tornar um desenvolvedor é preciso muito exercício, por isso vá lentamente avançando sobre os tópicos propostos e fazendo todos os exercícios propostos.</p>
</div>
<div class="paragraph">
<p>Nesse sessão você vai aprender:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>O que é uma linguagem de programação e no que ela difere de uma linguagem natural</p>
</li>
<li>
<p>Os elementos básicos da sintaxe da linguagem Java</p>
</li>
</ul>
</div>
<hr>
<div class="paragraph">
<p>Anteriormente aprendemos o que é Java, porque precisamos de uma linguagem de programação e como criar nosso primeiro programa Java. Agora vamos aprender um pouco mais a sintaxe Java e sobre um assunto muito importante para qualquer desenvolvedor: algoritmos. Qualquer linguagem de programação tem uma sintaxe e você tem que respeitar ela por um motivo meio óbvio e muito importante: o computador é extremamente burro.</p>
</div>
<div class="sect1">
<h2 id="_linguagens-formais-e-linguagem-natural">Linguagens Formais e Linguagem Natural</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Antes de entender porque o computador é extremamente burro, vamos tentar diferenciar uma linguagem de programação das linguagens que usamos para conversar com outras pessoas. Se você nunca estudou formalmente o que é uma linguagem de programação, talvez seja preciso definir corretamente o que a difere de outras linguagens.</p>
</div>
<div class="paragraph">
<p>No dia a dia, nós somos acostumados a um tipo de linguagem que é extremamente maleável e pode ser compreendida mesmo que esteja <strong>formalmente</strong> errada. Eu posso omitir um objeto, inverter sujeito e predicado (todo mundo entendia o Mestre Yoda) e a comunicação continua acontecendo normalmente. Na nossa cultura, infelizmente, são raras as pessoas que amam estudar a estrutura de português, eu mesmo não sou uma delas apesar de gostar de leitura. Conhecer mais a língua que falamos não é comum porque podemos ser entendidos facilmente mesmo usando estruturas básicas e é uma atividade hercúlea e extremamente chata. O português por ser uma língua falada em locais bem diferentes é cheio de regras e excussões de difícil entendimento, a nossa língua é falada no Brasil 🇧🇷, Angola 🇦🇴, Cabo Verde 🇨🇻, Guiné-Bissau 🇬🇼, Guiné Equatorial 🇬🇶, Moçambique 🇲🇿, São Tomé e Príncipe 🇸🇹, Timor-Leste 🇹🇱, China 🇨🇳 e até em Portugal 🇵🇹. Esse texto mesmo, apesar de parecer correto, se passar por uma revisão profissional será alvo de várias correções sutis que faço porque são comuns na coloquialidade mas podem casuar pequenos desentendimentos na língua escrita, o mais comum deles é a troca de pessoa ao me referir a você leitor.</p>
</div>
<div class="paragraph">
<p>As línguas Português, Inglês, Mandarim, Japonês e até o <a href="https://www.amazon.com.br/homem-sabia-javan%C3%AAs-outros-contos/dp/6550970016?crid=2AKGVQNZY4970&amp;keywords=o+homem+que+falava+javanes&amp;qid=1657880499&amp;sprefix=javan%C3%8As%2Caps%2C415&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=7efd916b98ad99a20e6be0794730cf47&amp;language=pt_BR&amp;ref_=as_li_ss_tl">Javanês</a> são o que conhecemos como linguagens naturais, pois elas emergem da experiência humana e são compreendidas por humanos. Computadores não entendem essas linguagens, eles podem apenas capturar símbolos, mas eles não conseguem compreender.</p>
</div>
<div class="paragraph">
<p><em>— Ah, mas tem o GPT-3 que consegue ler e escrever bons textos.</em></p>
</div>
<div class="paragraph">
<p>Calma lá! É preciso entender como funciona um computador para não cair no jornalismo barato e marketing agressivo de companhias de Inteligência Artificial. GPT-3 não é aquilo que foi prometido e tem suas limitações. Eu recomendo ler o artigo <a href="https://www.technologyreview.com/2020/08/22/1007539/gpt3-openai-language-generator-artificial-intelligence-ai-opinion/">"GPT-3, Falsário: o gerador de linguagem do OpenAI não tem ideia do que está falando"</a> (se não lê inglês, use o Google Translator). O entendimento do que é uma linguagem de programação é muito importante, por isso vamos fazer uma analogia para demonstrar como lidar com a gramática delas.</p>
</div>
<div class="paragraph">
<p>Imagine que <a href="https://pt.wikipedia.org/wiki/Quarto_chin%C3%AAs">um computador é como um falante de português que está preso dentro de um quarto com um livro de regras. Sua função é, ao receber caixas com texto em chinês, deve consultar o livro de regras para identificar os símbolos no texto e formular uma resposta baseado nas regras e no texto recebido e enviar a resposta para fora do quarto.</a> Esse homem não sabe chinês e nem consegue compreender o que ele está respondendo, ele só está seguindo as regras de quem escreveu o livro. O homem compreende a comunicação? Ao interlocutor fora do quarto, parece que o homem fala chinês?</p>
</div>
<div id="o-quarto-chines" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-02/o-quarto-chines.png" alt="o quarto chines">
</div>
<div class="title">Figura 1. O Quarto Chinês</div>
</div>
<div class="paragraph">
<p>Programas são o livro de regras que é escrito por programadores. Isso significa que, por melhor que seja um programa, um computador não tem compreensão do que está acontecendo. O interlocutor até poderá acreditar que o programa entende chinês, mas se houver alguma situação não prevista no livro de regras, não será possível formular uma resposta e o interlocutor ficará em dúvida.</p>
</div>
<div class="paragraph">
<p>Como já falamos, um computador é uma entidade extremamente burra. Ela só vai conseguir compreender as regras se elas forem muito bem escritas em uma linguagem muito bem estruturada. Essa linguagem vai ter uma sintaxe bem definida e se por algum motivo ela for violada o computador não será capaz de compreender. Ou seja, o computador não pode usar daquilo que todos os humanos tem: bom senso. Ele não vai conseguir compreender se um sujeito for omitido. É por esse motivo que as chamamos de <strong>Linguagens Formais</strong>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Linguagens Formais</div>
São linguagens que podem ser representadas de maneira finita e precisa através de sistemas com sustentação matemática (dispositivos formais ou modelos matemáticos).
</div>
</div>
<div class="paragraph">
<p>Java, C, Javascript, PHP, Python, etc&#8230;&#8203; são linguagens formais. Elas não emergem da experiência humana, mas são propostas por humanos para se comunicar com computadores. Um humano consegue identificar um erro em uma linguagem natural e mesmo assim compreender o que é proposto, mas um erro em uma linguagem formal impossibilita todo o processo. Se você quiser saber como definir uma linguagem formal, eu já escrevi sobre isso em <a href="https://blog.vepo.dev/posts/como-criar-uma-linguagem-usando-antlr4-e-java">"Como criar uma linguagem usando ANTLR4 e Java"</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_a-sintaxe-java">A Sintaxe Java</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Agora vamos falar do Java&#8230;&#8203; Java é uma linguagem que normalmente chamamos de <em>C-Like</em>, isso significa que ela herda muitas características do C. Se você nunca ouviu falar de C, não se preocupe, apesar dela ser uma das linguagens mais influente da história, ela não tem muito espaço no desenvolvimento web moderno, está nichada em desenvolvimento embarcado e nos drivers e kernel dos sistemas operacionais. Mas o C emprestou ao Java muito das estruturas que usamos no dia a dia e são nessas estruturas que vamos focar por enquanto.</p>
</div>
<div class="paragraph">
<p>O C é uma linguagem de propósito geral e estruturada. Isso significa que é possível escrever qualquer tipo de programa com ela, mas por suas características o estilo de programação mais comum é o imperativa. Quando falamos de <a href="https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_imperativa">paradigma imperativa</a> dizemos que nosso programa está definindo a forma como as coisas devem ser feitas e não a definição formal da solução, como acontece com a <a href="https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_declarativa">programação declarativa</a>. A programação declarativa está focada na transformação do dado, enquanto a programação imperativa irá ditar os passos que devemos fazer para transformar os dados.</p>
</div>
<div class="paragraph">
<p>Com o Java é possível programar das duas formas, mas como vamos estudar a sintaxe da linguagem vamos nos preocupar por enquanto apenas com a programação imperativa, por isso vamos deixar orientação a objetos e programação funcional para outro momento. Pensar no Java como uma linguagem imperativa é pensar que devemos escrever um programa que irá transformar os dados de acordo com os passos que definimos, então precisamos pensar em como esses dados serão transformados. Esse "como" é o que chamamos de algoritmo. Algoritmo é uma receita de bolo muito bem definida que transforma dados. Por "muito bem definida" entenda que ele deve ter uma entrada, uma saída e passos definidos, os passos serão definidos através da sintaxe.</p>
</div>
<div class="paragraph">
<p>Já falei que um computador é algo extremamente burro? Sim! Tudo que ele faz é ler um programa, executar uma instrução e executar a próxima instrução. Cada instrução altera o estado interno da aplicação, esse estado por sua vez é a memória do computador. Quando falamos de programação imperativa, como o fluxo da aplicação define os processos de transformação do dado a execução pode ter caminhos diferente dependendo dos dados. Em muitos casos o processo pode ser visualizado através de fluxogramas simples. Sempre que você for tentar entender um programa estrutural, você vai ter que ter em mente quais são os dados relevantes na execução e o fluxo da execução.</p>
</div>
<div id="fluxograma" class="imageblock text-center text-center">
<div class="content">
<img src="/assets/images/java-101/cap-02/fluxograma.png" alt="fluxograma">
</div>
<div class="title">Figura 2. Fluxograma simples definindo o processo de leitura de um arquivo.</div>
</div>
<div class="paragraph">
<p>As estruturas que vamos falar são usadas para definir esse fluxo, como em todas linguagens <em>C-like</em> elas tem nomes em inglês mas elas refletem as decisões que devem ser feitas baseadas nos dados em memória. Essas estruturas são validadas em temos de compilação, mas se você usa uma boa IDE você vai ver se houver um erro durante a edição do seu código fonte. Enquanto essas estruturas não estiverem muito bem definidas, o programa não poderá ser compilado e por isso não poderá ser executado.</p>
</div>
<div class="paragraph">
<p>Para facilitar o entendimento do fluxo, abaixo listo todas as estruturas que vamos detalhar resumidamente com uma tradução livre to termo em português. Ao lado de cada uma temos a documentação oficial (para versão 8 do Java) com a especificação formal. Não se preocupe se você não conseguir entender a documentação. Eu fiz a tradução para que você possa compreender melhor, nunca a utilize porque isso não é comum, a não ser que você deseje aprender <a href="https://potigol.github.io/docs/">Potigol</a>, a tradução serve para você ver que tem uma lógica na nomenclatura, é como se o código fosse um tipo de linguagem verbalizável.</p>
</div>
<div class="paragraph">
<p><a href="#cap-02-bloco">1. Bloco (Block)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-declaracao">2. Declaração (Statement)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-variaveis">3. Definição de Variáveis (Local Variable Declaration)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-comentario">4. Comentário (Comments)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-se">5. Se (if)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-enquanto">6. Enquanto (while)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-faca-enquanto">7. Faça enquanto (do-while)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-para">8. Para (for)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-escolha">9. Escolha (switch)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-quebra">10. Quebra e continua (break e continue)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-lance">11. Lance (throw)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-sincronizado">12. Sincronizado (synchronized)</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-operador-logico">13. Operadores Lógicos</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-operador-binario">14. Operadores Binários</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-operador-matemarico">15. Operadores Matemáticos</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-operador-unario">16. Operadores Unários</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-cast">17. Cast</a></p>
</div>
<div class="paragraph">
<p><a href="#cap-02-operador-condicional">18. Operador condicional</a></p>
</div>
<div class="sect2">
<h3 id="cap-02-bloco">1. Bloco (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.2">Block</a>)</h3>
<div class="paragraph">
<p>Um bloco de código é uma estrutura que pode ser tanto obrigatória quanto opcional. Essa estrutura é definida <code>{}</code> e dentro desse bloco teremos um novo escopo de variáveis assim como as instruções que vão definir esse bloco. Por escopo entenda que toda variável definida dentro de um bloco será conhecida apenas por aquele bloco e todo bloco definido dentro dele. Vamos ver a definição de variável no próximo tópico.</p>
</div>
<div class="paragraph">
<p>Observe o código abaixo. Nele temos os blocos <code>B1</code> a <code>B4</code>. Os blocos <code>B1</code> e <code>B2</code> fazem parte de estruturas mais complexas e são obrigatórios, que no caso são uma classe e um método respectivamente (não vamos falar da definição de classe e método por enquanto). Já os blocos <code>B3</code> e <code>B4</code> são opcionais e estão aí para mostrar que podemos criar um bloco quando bem entendermos, apesar dessa não ser uma prática comum no desenvolvimento Java. 🤓</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">HelloWorldSintaxe</span> { <span style="color: #408080; font-style: italic">// B1</span>
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">main</span>(String<span style="color: #666666">[]</span> args) { <span style="color: #408080; font-style: italic">// B2</span>
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Olá mundo&quot;</span>);

        String variavel <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;abc&quot;</span>;
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Valor de variavel=&quot;</span> <span style="color: #666666">+</span> variavel);

        {} <span style="color: #408080; font-style: italic">// B3: Bloco vazio</span>

        { <span style="color: #408080; font-style: italic">// B4</span>
            String variavel2 <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;xyz&quot;</span>;
            System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Valor de variavel2=&quot;</span> <span style="color: #666666">+</span> variavel2);
        }

        <span style="color: #408080; font-style: italic">// System.out.println(&quot;Valor de variavel2=&quot; + variavel2);  // Se você</span>
    }

    <span style="color: #408080; font-style: italic">// private void x() return 1; // Bloco é obrigatório no caso de método, essa construção vai falhar</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Se você começar a brincar com esse código, vai ver que a <code>variavel2</code> só pode ser usada dentro do <code>B4</code>. Isso é o que chamamos de escopo, ao finalizar a execução de <code>B4</code> ela é completamente desnecessária e poderá ser eliminada da memória.</p>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-declaracao">2. Declaração (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.5">Statement</a>)</h3>
<div class="paragraph">
<p>Se você pegar um código Java, ou de qualquer outra linguagem <em>C-Like</em>, vai perceber que o comportamento dele é sempre similar. Existe um método/função <code>main</code> que deve ter uma assinatura especifica e uma série de declarações.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">HelloWorld</span> {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">main</span>(String<span style="color: #666666">[]</span> args) {
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Hello World!&quot;</span>);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>No código acima, temos o mais simples <em>Hello World</em> escrito em Java. Quando a JVM vai executar esse código será feito como é feito em qualquer outra linguagem imperativa, primeiro a JVM lê a primeira declaração, executa ela alterando o estado do programa, e depois executa a próxima até não existirem mais declarações ou o programa for finalizado por alguma instrução.</p>
</div>
<div class="paragraph">
<p>Podemos dizer que toda estrutura Java é uma declaração e toda declaração tem significado. Declarações em Java devem ser separadas por <code>;</code> ou devem conter um Bloco de código. Tudo que devemos entender de uma declaração é que ela tem um significado e que elas são executadas em sequencia.</p>
</div>
<div class="paragraph">
<p>Vamos imaginar um outro código hipotético que é composto pela chama de 3 métodos. Tudo que podemos supor é que as três declarações são executadas em sequência, desde que não aconteça nada excepcional.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>metodo1();
declaracao1();
metodo2();</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-variaveis">3. Definição de Variáveis (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.4">Local Variable Declaration</a>)</h3>
<div class="paragraph">
<p>Variáveis são posições da memória usadas para armazenar informações necessárias durante a execução do código. Uma variável pode ser de um tipo primitivo (<code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code> <code>double</code>, <code>boolean</code> ou <code>char</code>) ou um objeto. Tipos primitivos diferem de objeto porque armazenam apenas um valor sem ter nenhum método associado a ele. Uma variável irá pertencer a um bloco de código e sua existência existe do momento da declaração até a finalização do bloco. Como falamos, variáveis são posições de memória, mas existem dois tipos de memória em Java, que vamos falar posteriormente, a heap e a stack. Tipos primitivos são declarados na heap, enquanto objetos são declarados na heap, isso significa que para tipos primitivos cada variável é uma posição única enquanto um mesmo objeto pode ser compartilhado por várias variáveis.</p>
</div>
<div class="paragraph">
<p><em>— Ein?!?!</em></p>
</div>
<div class="paragraph">
<p>Sim! A princípio é difícil de entender. Todo bloco de código possui um valor associado a uma variável, no tipo primitivo temos na variável o valor exato enquanto nos objetos temos uma referência ao valor. Vamos demonstrar por um exemplo? Dê uma olhada no código abaixo. Observer que uma definição de variável sempre é acompanhada no formato <code>&lt;tipo&gt; &lt;nome da variável&gt; = &lt;valor&gt;;</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">int</span> x <span style="color: #666666">=</span> <span style="color: #666666">0</span>;    <span style="color: #408080; font-style: italic">// x = 0</span>
<span style="color: #B00040">int</span> y <span style="color: #666666">=</span> x;    <span style="color: #408080; font-style: italic">// x = 0,  y = 0</span>
x <span style="color: #666666">=</span> y <span style="color: #666666">+</span> <span style="color: #666666">20</span>;   <span style="color: #408080; font-style: italic">// x = 20, y = 0</span>
y <span style="color: #666666">=</span> <span style="color: #666666">10</span>;       <span style="color: #408080; font-style: italic">// x = 20, y = 10</span>

Usuario usr1 <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Usuário(<span style="color: #666666">1</span>, <span style="color: #BA2121">&quot;João&quot;</span>); <span style="color: #408080; font-style: italic">// usr1 = Usuario[id=1, nome=João]</span>
Usuario usr2 <span style="color: #666666">=</span> usr1;                   <span style="color: #408080; font-style: italic">// usr1 = Usuario[id=1, nome=João],     usr2 = Usuario[id=1, nome=João]</span>
Usuario usr3 <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> Usuário(<span style="color: #666666">1</span>, <span style="color: #BA2121">&quot;João&quot;</span>); <span style="color: #408080; font-style: italic">// usr1 = Usuario[id=1, nome=João],     usr2 = Usuario[id=1, nome=João],     usr3 = Usuario[id=1, nome=João]</span>
usr1.<span style="color: #7D9029">setNome</span>(<span style="color: #BA2121">&quot;João Doe&quot;</span>);              <span style="color: #408080; font-style: italic">// usr1 = Usuario[id=1, nome=João Doe], usr2 = Usuario[id=1, nome=João Doe], usr3 = Usuario[id=1, nome=João]</span>
usr1 <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">null</span>;                           <span style="color: #408080; font-style: italic">// usr1 = null,                         usr2 = Usuario[id=1, nome=João Doe], usr3 = Usuario[id=1, nome=João]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>No código acima vemos os dois tipos de dados, temos a classe <code>Usuario</code> e temos o tipo primitivo <code>int</code>. Quando criamos uma variável do tipo primitivo a partir de outro valor, podemos alterar livremente o outro valor que a nova variável permanecerá inalterada. Mas o mesmo não acontece com a classe <code>Usuario</code>, que apesar de todos terem valores iguais, <code>usr1</code> e <code>usr2</code> por algum momento apontam para o mesmo objeto. <code>usr3</code> nunca se altera porque é um objeto distinto mesmo tendo o mesmo valor que <code>usr1</code> e <code>usr2</code>.</p>
</div>
<div class="paragraph">
<p>Na última linha do trecho de código usamos o valor <code>null</code>. <code>null</code> não é um tipo, apenas significa nulo em tradução livre, mas em computação significa a ausência de valor. É quando dizemos que uma variável não contem valor, ela não aponta para lugar nenhum. Variáveis que são tipos primitivos não pode ser nulas, elas deve sempre ter um valor associado.</p>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-comentario">4. Comentário (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.7">Comments</a>)</h3>
<div class="paragraph">
<p>Comentários são trechos de código que serão ignorados durante o processo de compilação. Apesar que alguns autores falam que todo comentário é uma falha, afirmação que eu discordo veementemente, eles são necessários para documentar informações que não podem ser documentadas no código. Tenha sempre em mente que comentários são necessários, com o tempo e a experiência você vai aprender sobre o que escrever nos comentários. Por enquanto vamos nos contentar em como comentar.</p>
</div>
<div class="paragraph">
<p>Existem 3 tipos de comentários em Java:
1. Comentários de fim de linha
2. Comentários tradicionais
3. Javadoc</p>
</div>
<div class="paragraph">
<p>Para criar um comentário em linha, adicione os dois caracteres <code>//</code> e tudo que você escrever até o fim da linha será desconsiderado durante a compilação. O exemplo abaixo foi retirado do código do <a href="https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java#L1012">Apache Kafka</a>, apesar de estar em inglês ele contém informações relevantes ao código.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #408080; font-style: italic">// Try to calculate partition, but note that after this call it can be RecordMetadata.UNKNOWN_PARTITION,</span>
<span style="color: #408080; font-style: italic">// which means that the RecordAccumulator would pick a partition using built-in logic (which may</span>
<span style="color: #408080; font-style: italic">// take into account broker load, the amount of data produced to each partition, etc.).</span>
<span style="color: #B00040">int</span> partition <span style="color: #666666">=</span> partition(record, serializedKey, serializedValue, cluster);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para criar um comentário tradicional, inicie com <code>/<strong></code> e todo caractere até encontrar o final <code></strong>/</code> será desconsiderado. Abaixo temos mais um comentário retirado do código do <a href="https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/security/authenticator/SaslClientAuthenticator.java#L289">Apache Kafka</a>, ele explica a decisão de não existir um <code>break</code> naquela posição como veremos mais a frente.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">case</span> REAUTH_RECEIVE_HANDSHAKE_OR_OTHER_RESPONSE:
    handshakeResponse <span style="color: #666666">=</span> (SaslHandshakeResponse) receiveKafkaResponse();
    <span style="color: #008000; font-weight: bold">if</span> (handshakeResponse <span style="color: #666666">==</span> <span style="color: #008000; font-weight: bold">null</span>)
        <span style="color: #008000; font-weight: bold">break</span>;
    handleSaslHandshakeResponse(handshakeResponse);
    setSaslState(SaslState.<span style="color: #7D9029">REAUTH_INITIAL</span>); <span style="color: #408080; font-style: italic">// Will set immediately</span>
    <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">     * Fall through and start SASL authentication using the configured client</span>
<span style="color: #408080; font-style: italic">     * mechanism. Note that we have to either fall through or add a loop to enter</span>
<span style="color: #408080; font-style: italic">     * the switch statement again. We will fall through to avoid adding the loop and</span>
<span style="color: #408080; font-style: italic">     * therefore minimize the changes to authentication-related code due to the</span>
<span style="color: #408080; font-style: italic">     * changes related to re-authentication.</span>
<span style="color: #408080; font-style: italic">     */</span>
<span style="color: #008000; font-weight: bold">case</span> REAUTH_INITIAL:
    sendInitialToken();
    setSaslState(SaslState.<span style="color: #7D9029">INTERMEDIATE</span>);
    <span style="color: #008000; font-weight: bold">break</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>O Javadoc é um tipo especial de comentário tradicional que nos permite gerar uma documentação oficial a partir do código. Ele se diferencia do comentário tradicional por iniciar com <code>/<strong>**</code>, não apenas <code>/</strong></code>, e pode estar acima de classes, métodos e campos. Javadoc segue uma linguagem de marcação deve ser usada sempre, pois além de poder ser usada como documentação oficial, ela também será exibida pelas IDEs em funcionalidades que irão lhe auxiliar durante o desenvolvimento. Javadoc também aceita tags HTML, as não tente usar CSS e Javascript.</p>
</div>
<div class="paragraph">
<p>No exemplo abaixo temos um trecho da documentação oficial do <a href="https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java#L1234">Apache Kafka</a>. É interessante notar que o autor desse código se preocupou em descrever a funcionalidade do método, e os motivos pelo qual as exceções são lançadas, mas ignorou a descrição do parâmetro porque é intuitivo. Evite comentários desnecessários.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>
<span style="color: #408080; font-style: italic">/**</span>
<span style="color: #408080; font-style: italic"> * Get the partition metadata for the given topic. This can be used for custom partitioning.</span>
<span style="color: #408080; font-style: italic"> * @throws AuthenticationException if authentication fails. See the exception for more details</span>
<span style="color: #408080; font-style: italic"> * @throws AuthorizationException if not authorized to the specified topic. See the exception for more details</span>
<span style="color: #408080; font-style: italic"> * @throws InterruptException if the thread is interrupted while blocked</span>
<span style="color: #408080; font-style: italic"> * @throws TimeoutException if metadata could not be refreshed within {@code max.block.ms}</span>
<span style="color: #408080; font-style: italic"> * @throws KafkaException for all Kafka-related exceptions, including the case where this method is called after producer close</span>
<span style="color: #408080; font-style: italic"> */</span>
<span style="color: #AA22FF">@Override</span>
<span style="color: #008000; font-weight: bold">public</span> List<span style="color: #666666">&lt;</span>PartitionInfo<span style="color: #666666">&gt;</span> <span style="color: #0000FF">partitionsFor</span>(String topic) {}</code></pre>
</div>
</div>
<div id="cap02-javadoc" class="imageblock text-center text-center">
<div class="content">
<a class="image" href="https://kafka.apache.org/32/javadoc/org/apache/kafka/clients/producer/KafkaProducer.html#partitionsFor(java.lang.String)"><img src="/assets/images/java-101/cap-02javadoc.png" alt="cap 02javadoc"></a>
</div>
<div class="title">Figura 3. O comentário acima gerou essa documentação.</div>
</div>
<div class="paragraph">
<p>Comentar código não é uma atividade simples, ela será trabalhada com a maturidade. Com o tempo você vai aprende que informações devem ser consideradas auxiliar ao código. Você não precisa comentar o que está no código, mas a informação que falta ao código, não é o <strong>como</strong>, mas o <strong>porque</strong> do código. Eu gosto de comentar pressupostos e escolhas arquiteturais porque em alguns meses eu não vou lembrar ou outra pessoa que pegar meu código também não vai saber o motivo de alguns escolhas.</p>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-se">5. Se (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.9">if</a>)</h3>
<div class="paragraph">
<p>Agora vamos ver a primeira declaração de fluxo que também é a mais comum. Mais conhecida como <code>if</code>, ou condicional, é composto por <code>if (expressão booleana) &lt;bloco&gt; else &lt;bloco&gt;</code>, onde expressão booleana é qualquer função que retorne um <code>boolean</code> ou uma expressão lógica que veremos em Operadores Lógicos. A expressão pode ser resumida para <code>if (expressão booleana) &lt;bloco&gt;</code> ou pode ser encadeada em várias outras declarações condicionais <code>if (expressão booleana) &lt;bloco&gt; else if (outra expressão booleana) &lt;bloco&gt; else &lt;bloco&gt;</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">int</span> x <span style="color: #666666">=</span> leNumeroInteiro();

<span style="color: #008000; font-weight: bold">if</span> (x <span style="color: #666666">%</span> <span style="color: #666666">2</span> <span style="color: #666666">==</span> <span style="color: #666666">0</span>) { <span style="color: #408080; font-style: italic">// o operador % retorna o resto da divisão</span>
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;O valor lido é par!&quot;</span>);
} <span style="color: #008000; font-weight: bold">else</span> {
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;O valor lido é impar!&quot;</span>);
}

<span style="color: #008000; font-weight: bold">if</span> (x <span style="color: #666666">%</span> <span style="color: #666666">3</span> <span style="color: #666666">==</span> <span style="color: #666666">0</span>) {
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;O valor lido é múltiplo de 3!&quot;</span>);
} <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (x <span style="color: #666666">%</span> <span style="color: #666666">3</span> <span style="color: #666666">==</span> <span style="color: #666666">1</span>) {
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;O valor lido tem a forma f(x) = 3x + 1&quot;</span>);
} <span style="color: #008000; font-weight: bold">else</span> {
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;O valor lido tem a forma f(x) = 3x + 2&quot;</span>);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>No exemplo acima temos 3 expressões lógica. A primeira calcula se o valor é par então logicamente o bloco else será executado para todo valor impar. A segunda calcula se o valor é divisível por 3, isso significa que o bloco else será chamado para todo valor não divisível, mas com o <code>if</code> encadeado fazemos a visão daquele que são no formato <code>3x + 1</code> e <code>3x + 2</code>. Vamos ver as expressões mais a frente.</p>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-enquanto">6. Enquanto (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.11">while</a>)</h3>
<div class="paragraph">
<p>Enquanto define que um bloco de código será executado até que uma expressão lógica seja falsa. A execução do bloco de código é feita continuamente logo depois do teste da expressão lógica. Exemplo?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">int</span> x <span style="color: #666666">=</span> leValor();
<span style="color: #008000; font-weight: bold">while</span>(x <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>) {
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Valor é positivo!&quot;</span>);
    x <span style="color: #666666">=</span> leValor();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>O bloco de código acima será executado continuamente até que venha um valor 0 ou negativo.</p>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-faca-enquanto">7. Faça enquanto (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.13">do-while</a>)</h3>
<div class="paragraph">
<p>O Faça enquanto funciona de forma bem similar, a diferença é que o teste é feito depois que o bloco de código é executado. Ele é muito similar a declaração anterior, a diferença é a ordem de execução entre o teste lógico e o bloco de código.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">do</span> {
    executa();
} <span style="color: #008000; font-weight: bold">while</span> (emExecução)</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-para">8. Para (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14">for</a>)</h3>
<div class="paragraph">
<p>O famoso <code>for</code> é um pouco mais complexo. Ele é composto por 3 blocos que podem ser chamados de <strong>inicialização</strong>, <strong>condição</strong> e <strong>passo</strong>. Ao iniciar será executado uma única vez o trecho de código <strong>inicialização</strong> e em cada iteração será executado o trecho de código <strong>condição</strong>, que deve retornar uma expressão booleana, depois será executado o bloco de código para depois ser executado o trecho <strong>passo</strong>. O exemplo mais comum é para se iterar em um array.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">int</span><span style="color: #666666">[]</span> array <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">int</span><span style="color: #666666">[]</span> {<span style="color: #666666">0</span> , <span style="color: #666666">1</span>, <span style="color: #666666">2</span>, <span style="color: #666666">3</span>, <span style="color: #666666">4</span>, <span style="color: #666666">5</span>};
<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> array.<span style="color: #7D9029">length</span>; i<span style="color: #666666">++</span>) {
    <span style="color: #408080; font-style: italic">// bloco de código</span>
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-escolha">9. Escolha (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.11">switch</a>)</h3>
<div class="paragraph">
<p>O <code>switch</code> escolhe o código de acordo com o valor de uma variável. O <code>switch</code> é uma estrutura que pode facilmente induzir a erros porque cada bloco não é exclusivo, o fluxo de execução passar de um bloco ao outro até que seja encontrada a instrução <code>break</code>. Vamos ver um exemplo?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">int</span> x <span style="color: #666666">=</span> leValor();
<span style="color: #008000; font-weight: bold">switch</span> (x) {
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">1</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É igual a 1!&quot;</span>);
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">2</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É maior ou igual a 2!&quot;</span>);
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">3</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É maior ou igual a 3!&quot;</span>);
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">4</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É maior ou igual a 4!&quot;</span>);
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">5</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É maior ou igual a 5!&quot;</span>);
    <span style="color: #008000; font-weight: bold">default</span>
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É maior que 5 ou menor que 1!&quot;</span>);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>O que aconteceria se o valor de <code>x</code> for igual a 3? Seriam executados os blocos de 3 até o <code>default</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code><span></span>É maior ou igual a 3!
É maior ou igual a 4!
É maior ou igual a 5!
É maior que 5 ou menor que 1!</code></pre>
</div>
</div>
<div class="paragraph">
<p>Se quisermos um valor exato, podemos usar o break:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">int</span> x <span style="color: #666666">=</span> leValor();
<span style="color: #008000; font-weight: bold">switch</span> (x) {
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">1</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É igual a 1!&quot;</span>);
        <span style="color: #008000; font-weight: bold">break</span>;
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">2</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É igual a 2!&quot;</span>);
        <span style="color: #008000; font-weight: bold">break</span>;
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">3</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É igual a 3!&quot;</span>);
        <span style="color: #008000; font-weight: bold">break</span>;
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">4</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É igual a 4!&quot;</span>);
        <span style="color: #008000; font-weight: bold">break</span>;
    <span style="color: #008000; font-weight: bold">case</span> <span style="color: #666666">5</span>:
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É igual a 5!&quot;</span>);
        <span style="color: #008000; font-weight: bold">break</span>;
    <span style="color: #008000; font-weight: bold">default</span>
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;É maior que 5 ou menor que 1!&quot;</span>);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Agora você deve ter se perguntado porque no texto do bloco <code>default</code> eu usei <em>menor que 1</em>? Isso porque o <code>switch</code> não é usado para intervalos de valores, mas para valores exatos e caso nenhum valor seja igual aos valores declarados é chamado o bloco <code>default</code>.</p>
</div>
<div class="paragraph">
<p>Vale lembrar que o switch pode ser usado para números, enumeradores e qualquer valor constante, inclusive String.</p>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-quebra">10. Quebra e continua (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.15">break</a> e <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.16">continue</a>)</h3>
<div class="paragraph">
<p>Uma quebra deve ser chamada dentro bloco <code>switch</code>, <code>while</code>, <code>do</code> ou <code>for</code>. Ao se deparar com essa instrução o programa irá finalizar a execução do bloco externo imediatamente.</p>
</div>
<div class="paragraph">
<p>Vamos demonstrar isso com um exemplo básico? No código abaixo vamos criar um <code>for</code> que será finalizado usando <code>break</code>. Observe que o ponto de parada do for seria no máximo inteiro possível, mas através do break finalizamos em 10.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Iniciando for...&quot;</span>);
<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> Integer.<span style="color: #7D9029">MAX_VALUE</span>; i<span style="color: #666666">++</span>) {
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Valor: &quot;</span> <span style="color: #666666">+</span> i);
    <span style="color: #008000; font-weight: bold">if</span> (i <span style="color: #666666">==</span> <span style="color: #666666">10</span>) {
        <span style="color: #008000; font-weight: bold">break</span>;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Quando usamos <code>break</code> dentro de um switch evitamos que os blocos de códigos abaixo dele seja executados.</p>
</div>
<div class="paragraph">
<p>O <code>continue</code> tem um comportamento parecido, mas ao invés de finalizar o bloco será apenas finalizada a iteração. Ele só é aceito em iterações como <code>while</code>, <code>do</code> ou <code>for</code>. Vamos incrementar o exemplo acima para imprimir apenas números impares. Observe que no código abaixo foi preciso mudar a condição de execução do <code>break</code> porque ele nunca seria executado se usássemos <code>i == 10</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span>System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Iniciando for...&quot;</span>);
<span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> Integer.<span style="color: #7D9029">MAX_VALUE</span>; i<span style="color: #666666">++</span>) {
    <span style="color: #008000; font-weight: bold">if</span> (i <span style="color: #666666">%</span> <span style="color: #666666">2</span> <span style="color: #666666">==</span> <span style="color: #666666">0</span>) {
        <span style="color: #008000; font-weight: bold">continue</span>;
    }
    System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Valor: &quot;</span> <span style="color: #666666">+</span> i);
    <span style="color: #008000; font-weight: bold">if</span> (i <span style="color: #666666">&gt;</span> <span style="color: #666666">10</span>) {
        <span style="color: #008000; font-weight: bold">break</span>;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Se você leu a documentação atentamente, viu que <code>break</code> e <code>continue</code> podem aceitar rótulos. O que isso significa? Vamos imaginar que temos um loop encadeado em que buscamos um valor dentro de uma matrix. Como as linhas dessa matrix são ordenadas, se o valor em uma coluna for maior que o valor desejado, podemos pular para próxima linha. A decisão do <code>break</code> e do <code>continue</code> é feita usando os rótulos que todo bloco de código aceita.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">int</span><span style="color: #666666">[][]</span> matrix <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">int</span><span style="color: #666666">[][]</span> {
        { <span style="color: #666666">2</span>, <span style="color: #666666">2</span>, <span style="color: #666666">2</span>, <span style="color: #666666">3</span>, <span style="color: #666666">4</span>, <span style="color: #666666">5</span> },
        { <span style="color: #666666">2</span>, <span style="color: #666666">4</span>, <span style="color: #666666">8</span>, <span style="color: #666666">8</span>, <span style="color: #666666">9</span>, <span style="color: #666666">9</span> },
        { <span style="color: #666666">1</span>, <span style="color: #666666">2</span>, <span style="color: #666666">4</span>, <span style="color: #666666">5</span>, <span style="color: #666666">6</span>, <span style="color: #666666">8</span> },
        { <span style="color: #666666">0</span>, <span style="color: #666666">3</span>, <span style="color: #666666">4</span>, <span style="color: #666666">8</span>, <span style="color: #666666">8</span>, <span style="color: #666666">9</span> },
        { <span style="color: #666666">3</span>, <span style="color: #666666">4</span>, <span style="color: #666666">4</span>, <span style="color: #666666">6</span>, <span style="color: #666666">6</span>, <span style="color: #666666">9</span> },
        { <span style="color: #666666">0</span>, <span style="color: #666666">3</span>, <span style="color: #666666">6</span>, <span style="color: #666666">7</span>, <span style="color: #666666">8</span>, <span style="color: #666666">8</span> },
};
<span style="color: #A0A000">linhas:</span> <span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> linha <span style="color: #666666">=</span> <span style="color: #666666">0</span>; linha <span style="color: #666666">&lt;</span> matrix.<span style="color: #7D9029">length</span>; <span style="color: #666666">++</span>linha) {
    colunas: <span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> coluna <span style="color: #666666">=</span> <span style="color: #666666">0</span>; coluna <span style="color: #666666">&lt;</span> matrix<span style="color: #666666">[</span>linha<span style="color: #666666">]</span>.<span style="color: #7D9029">length</span>; <span style="color: #666666">++</span>coluna) {
        <span style="color: #008000; font-weight: bold">if</span> (matrix<span style="color: #666666">[</span>linha<span style="color: #666666">][</span>coluna<span style="color: #666666">]</span> <span style="color: #666666">==</span> <span style="color: #666666">7</span>) {
            System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Número 7 encontrado! (&quot;</span> <span style="color: #666666">+</span> linha <span style="color: #666666">+</span> <span style="color: #BA2121">&quot;,&quot;</span> <span style="color: #666666">+</span> coluna <span style="color: #666666">+</span> <span style="color: #BA2121">&quot;)&quot;</span>);
            <span style="color: #008000; font-weight: bold">break</span> linhas;
        } <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (matrix<span style="color: #666666">[</span>linha<span style="color: #666666">][</span>coluna<span style="color: #666666">]</span> <span style="color: #666666">&gt;</span> <span style="color: #666666">7</span>) {
            System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Desistindo da linha! (&quot;</span> <span style="color: #666666">+</span> linha <span style="color: #666666">+</span> <span style="color: #BA2121">&quot;,&quot;</span> <span style="color: #666666">+</span> coluna <span style="color: #666666">+</span> <span style="color: #BA2121">&quot;)&quot;</span>);
            <span style="color: #008000; font-weight: bold">continue</span> linhas;
        } <span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (matrix<span style="color: #666666">[</span>linha<span style="color: #666666">][</span>coluna<span style="color: #666666">]</span> <span style="color: #666666">&lt;</span> <span style="color: #666666">7</span>) {
            System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Pulando para próxima coluna! (&quot;</span> <span style="color: #666666">+</span> linha <span style="color: #666666">+</span> <span style="color: #BA2121">&quot;,&quot;</span> <span style="color: #666666">+</span> coluna <span style="color: #666666">+</span> <span style="color: #BA2121">&quot;)&quot;</span>);
            <span style="color: #008000; font-weight: bold">continue</span> colunas;
        }
        System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;Código nunca executado!&quot;</span>);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Se não fosse usado um rótulo, o <code>break</code> e o <code>continue</code> iriam atuar somente no bloco de código mais interno.</p>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-lance">11. Lance (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.18">throw</a>)</h3>
<div class="paragraph">
<p>O <code>throw</code> deve ser usado quando algo excepcional acontece. Algo inesperado, tanto que ele lança uma <code>Exception</code>, que significa exceção.</p>
</div>
<div class="paragraph">
<p>Exceções podem ser tratadas em código, mas as vezes elas não podem ser tratadas o que implica a finalização da execução. Ao se lançar uma exception, a JVM vai criar uma estrutura que contem o contexto da execução que chamamos de Stacktrace.</p>
</div>
<div class="paragraph">
<p>Para entender o que é uma Stacktrace, é preciso entender como um programa lida com contextos. Quando executamos um bloco de código é criado uma posição no topo da pilha de execução (<em>stack</em> é pilha em inglês). Ao terminar esse bloco, essa posição é removida da pilha. Vamos olhar o programa abaixo:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">StacktraceHelloWorld</span> {
    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">m1</span>(<span style="color: #B00040">int</span> x) {
        <span style="color: #008000; font-weight: bold">if</span> (x <span style="color: #666666">%</span> <span style="color: #666666">2</span> <span style="color: #666666">==</span> <span style="color: #666666">0</span> <span style="color: #666666">&amp;&amp;</span> x <span style="color: #666666">&gt;</span> <span style="color: #666666">100</span>) {
            <span style="color: #008000; font-weight: bold">throw</span> <span style="color: #008000; font-weight: bold">new</span> RuntimeException(<span style="color: #BA2121">&quot;Primeiro número impar depois de 100&quot;</span>);
        }
        m2(x <span style="color: #666666">+</span> <span style="color: #008000; font-weight: bold">new</span> Random().<span style="color: #7D9029">nextInt</span>(<span style="color: #666666">2</span>));
    }

    <span style="color: #008000; font-weight: bold">private</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">m2</span>(<span style="color: #B00040">int</span> j) {
        <span style="color: #008000; font-weight: bold">if</span> (j <span style="color: #666666">%</span> <span style="color: #666666">2</span> <span style="color: #666666">==</span> <span style="color: #666666">0</span> <span style="color: #666666">&amp;&amp;</span> j <span style="color: #666666">&gt;</span> <span style="color: #666666">100</span>) {
            <span style="color: #008000; font-weight: bold">throw</span> <span style="color: #008000; font-weight: bold">new</span> RuntimeException(<span style="color: #BA2121">&quot;Primeiro número par depois de 100&quot;</span>);
        }
        m1(j <span style="color: #666666">+</span> <span style="color: #008000; font-weight: bold">new</span> Random().<span style="color: #7D9029">nextInt</span>(<span style="color: #666666">2</span>));
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">main</span>(String<span style="color: #666666">[]</span> args) {
        m1(<span style="color: #666666">0</span>);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>A pilha vai ter como fundação o método <code>main</code>, depois ela será formada por um encadeamento de chamadas ao métodos <code>m1</code> e <code>m2</code>. Nenhum dos elementos é removido da pilha porque os métodos nunca terminam, els ficam se chamando até que a exceção do tipo <code>RuntimeException</code> seja lançada.</p>
</div>
<div class="paragraph">
<p>Esse exemplo é meramente didático para mostrar como funciona o uso do <code>throw</code>. Mas se alterarmos o tipo de <code>RuntimeException</code> para apenas <code>Exception</code> vemos que não será possível de compilar porque há uma exceção não tratada (<em>Unhandled exception type Exception</em>). Isso acontece porque existem 3 tipos de exceções:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>Error</code></p>
</li>
<li>
<p><code>RuntimeException</code></p>
</li>
<li>
<p><code>Exception</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p><code>Error</code> não deve ser definido em um programa. Ele será lançado quando a JVM não souber lidar com uma situação especifica, o exemplo mais comum é o <code>OutOfMemoryError</code> quando a JVM não conseguir alocar mais memória.</p>
</div>
<div class="paragraph">
<p>Uma <code>RuntimeException</code> é uma exceção que acontece em tempo de execução, mas poderia ser resolvido com pequenas validações, ou seja, é algo deveria ter sido previsto. É o que acontece quando valores nulos não são validados (<code>NullPointerException</code>) ou quando acontece a divisão por zero (<code>ArithmeticException</code>).</p>
</div>
<div class="paragraph">
<p>Os demais casos devem estender a classe <code>Exception</code>, mas ela adicionará uma peculiaridade ao código. Se um método não trata um <code>Exception</code>, ele deve declarar que lança a mesma. Isso porque ela é um resultado esperado, mas que pode ou não ser tratado em código. Um exemplo? Quando estamos lidando com conexões de rede, sempre existe a possibilidade de a conexão ser finalizada, por isso sempre temos a <code>IOException</code>. Essa declaração se dá usando o <code>throws</code> e este não pode ser ignorado. Ou a exceção é tratado no método acima ou lançada para o próximo método.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">conecta</span>() <span style="color: #008000; font-weight: bold">throws</span> IOException {
    <span style="color: #408080; font-style: italic">// abre e fecha conexão</span>
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-sincronizado">12. Sincronizado (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.19">synchronized</a>)</h3>
<div class="paragraph">
<p><code>synchronized</code> deve ser usada com muita parcimônia. Nós vamos ver o seu uso mais a fundo quando formos falar de threads. Mas sendo sucinto, ela pode ser usada tanto para métodos quanto para objetos.</p>
</div>
<div class="paragraph">
<p>Para entender o conceito de sincronia, é preciso entender o que é paralelismo e concorrência. Eu tenho duas atividades que rodam em paralelo quando elas acontecem ao mesmo tempo e não há interferência entre si. Mas elas se tornam concorrentes quando existem recursos compartilhados que não podem ser acessados ao mesmo tempo.</p>
</div>
<div class="paragraph">
<p>Difícil de entender, não? Então vamos criar um modelo real. Digamos que uma loja tenha um livro caixa que deve registrar todas as vendas. Mas esse livro caixa só é atualizado no final do dia através das anotações de cada vendedor. Assim quando o vendedor realiza uma venda, ele faz uma anotação que depois será repassada para o livro caixa. As vendas acontecem em paralelo. Mas ao finalizar a venda existe o registro do estoque que é um caderno único que registra a entrada e saída de itens do estoque. Ou seja, quando o vendedor finaliza a venda, ele deve pegar o registro do estoque e adicionar uma saída. Se o vendedor A está em posse do registro, o vendedor B precisará ficar esperando, logo a baixa no caixa são operações concorrentes.</p>
</div>
<div class="paragraph">
<p><code>synchronized</code> irá definir sob qual objeto será definida a sincronia da execução. Ele pode ser usado tanto para método (estático ou de instância) ou objeto avulso.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">Concorrente</span> {
    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">synchronized</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">syncStaticMethod</span>() {
        <span style="color: #408080; font-style: italic">// Toda execução desse método será concorrente</span>
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">synchronized</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">syncMethod</span>() {
        <span style="color: #408080; font-style: italic">// Toda execução desse método será concorrente somente se for a mesma instância de Concorrente</span>
    }

    <span style="color: #008000; font-weight: bold">public</span> <span style="color: #B00040">void</span> <span style="color: #0000FF">method</span>(Object lock) {
        <span style="color: #008000; font-weight: bold">synchronized</span> (lock) {
            <span style="color: #408080; font-style: italic">// Toda execução desse bloco será concorrente somente se a instância de lock for a mesma</span>
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para que a sincronia seja bem elaborada, devem ser usados também os métodos <code>wait</code>, <code>notify</code> e <code>notifyAll</code>. Mas nós veremos como isso deve ser feito mais a frente, caso você precise lidar com valores compartilhados, prefira usar <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html"><code>AtomicReference</code></a> ou outras classes do pacote <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html"><code>java.util.concurrent.atomic</code></a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-operador-logico">13. Operadores Lógicos</h3>
<div class="paragraph">
<p>Os operadores lógicos do Java são usados para se criar expressões booleanas. Uma expressão booleana só pode retornar dois tipos de valores: verdadeiro ou falso.</p>
</div>
<div class="paragraph">
<p>Como vimos no uso do <code>if</code>, devemos sempre definir um valor booleano, mas as vezes ele pode ser uma série de valores encadeados em uma expressão.</p>
</div>
<div class="paragraph">
<p>É muito importante saber resolver esses tipos de expressão, essa é um campo da matemática que se chama Algebra Booleana e, na minha opinião, é um dos requisitos mais básicos para desenvolvimento de software.</p>
</div>
<div class="paragraph">
<p>No Java tempos três operadores booleanos <code>&amp;&amp;</code>, <code>||</code> e <code>!</code></p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-center valign-top">Operador</th>
<th class="tableblock halign-center valign-top">Descrição</th>
<th class="tableblock halign-center valign-top">Exemplo</th>
<th class="tableblock halign-left valign-top">Significado</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>&amp;&amp;</code></p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">E</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>a &amp;&amp; b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>true</code> somente se <code>a</code> e <code>b</code> forem verdadeiras</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>||</code></p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">OU</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>a || b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>true</code> qualquer um dos valores for verdadeiro</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>!</code></p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">Negação</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>!a</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>true</code> se <code>a</code> for `false e vice versa</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="cap-02-operador-binario">14. Operadores Binários</h3>
<div class="paragraph">
<p>Operadores binários realizam operações binárias. Para entender como funcionam operações binárias é preciso entender que toda informação é armazenada em formato binário, isso significa que o número <code>6544</code> é o mesmo valor de <code>0b0001100110010000</code> e <code>0x1990</code>.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-center valign-top">Operador</th>
<th class="tableblock halign-left valign-top">Descrição</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>&lt;&lt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Translada os bits para esquerda</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>&gt;&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Translada os bits para a direita</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>&amp;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Faz a operação E bit a bit</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>|</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Faz a operação OU bit a bit</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>^</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Faz a operação XOU bit a bit</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock"><code>~</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Inverte (complemento) os valores dos bits</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="cap-02-operador-matemarico">15. Operadores Matemáticos</h3>
<div class="paragraph">
<p>Operadores matemáticos realizam operações matemáticas básicas.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-center valign-top">Operador</th>
<th class="tableblock halign-left valign-top">Descrição</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">+</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Operador aditivo (também usado para concatenação de String)</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">-</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Operador de subtração</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">*</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Operador de multiplicação</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">/</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Operador de divisão</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Operador restante</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="cap-02-operador-unario">16. Operadores Unários</h3>
<div class="paragraph">
<p>Operadores unários realizam operações matemáticas básicas usando uma única variável. Os operadores unários mais comuns são <code>++</code> e <code>--</code> que fazem duas operações sequenciais: retornam o valor e alteram o valor da variável. A posição do operador irá influenciar na ordem das operações. Veja o código abaixo a diferença.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">int</span> x <span style="color: #666666">=</span> <span style="color: #666666">0</span>;    <span style="color: #408080; font-style: italic">// x=0</span>
<span style="color: #B00040">int</span> y <span style="color: #666666">=</span> <span style="color: #666666">++</span>x;  <span style="color: #408080; font-style: italic">// x=1 y=1</span>
<span style="color: #B00040">int</span> z <span style="color: #666666">=</span> <span style="color: #666666">0</span>;    <span style="color: #408080; font-style: italic">// z=0</span>
<span style="color: #B00040">int</span> w <span style="color: #666666">=</span> z<span style="color: #666666">++</span>;  <span style="color: #408080; font-style: italic">// z=1 w=0</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>O operador unário pode ser usado também com expressões, mas para isso deve acompanhar o <code>=</code>. Veja no código abaixo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">int</span> x <span style="color: #666666">=</span> <span style="color: #666666">0</span>;         <span style="color: #408080; font-style: italic">// x=0</span>
x <span style="color: #666666">+=</span> <span style="color: #666666">10</span>;           <span style="color: #408080; font-style: italic">// x=10</span>
<span style="color: #B00040">int</span> y<span style="color: #666666">=2</span>;           <span style="color: #408080; font-style: italic">// x=10 y=2</span>
x<span style="color: #666666">-=</span>y;              <span style="color: #408080; font-style: italic">// x=8 y=2</span>
<span style="color: #B00040">boolean</span> w <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">true</span>;  <span style="color: #408080; font-style: italic">// w=true</span>
<span style="color: #B00040">boolean</span> v <span style="color: #666666">!=</span> x;    <span style="color: #408080; font-style: italic">// w=true v=false</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-cast">17. Cast</h3>
<div class="paragraph">
<p>O cast é uma conversão. Java é uma linguagem orientada a objetos, por isso todo valor estende a classe Object, mas todo valor tem uma própria classe. Usamos o cast em duas situações distintas, quando vamos lidar com classes mais especificas ou quando precisamos mudar o tipo de números.</p>
</div>
<div class="paragraph">
<p>O primeiro caso vamos ver mais a frente, já o segundo é quando precisamos alterar um tipo de valor para calculo matemático.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">float</span> x <span style="color: #666666">=</span> <span style="color: #666666">1.23121f</span>;
<span style="color: #B00040">int</span> y <span style="color: #666666">=</span> ((<span style="color: #B00040">int</span>) (x <span style="color: #666666">*</span> <span style="color: #666666">100.0f</span>)) <span style="color: #666666">/</span> <span style="color: #666666">2</span>;
System.<span style="color: #7D9029">out</span>.<span style="color: #7D9029">println</span>(<span style="color: #BA2121">&quot;x= &quot;</span> <span style="color: #666666">+</span> x <span style="color: #666666">+</span> <span style="color: #BA2121">&quot; y=&quot;</span> <span style="color: #666666">+</span> y);  <span style="color: #408080; font-style: italic">// x= 1.23121 y=61</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cap-02-operador-condicional">18. Operador condicional</h3>
<div class="paragraph">
<p>O operador condicional é como se fosse um <code>if</code> em uma só linha. Ele é composto de uma expressão booleana e dois blocos que devem retornar um valor.</p>
</div>
<div class="paragraph">
<p>Vamos supor que precisamos calcular o valor absoluto de um número inteiro, isso pode ser feito com uma linha só.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="pygments highlight" style="background: #f8f8f8;"><code data-lang="java"><span></span><span style="color: #B00040">void</span> <span style="color: #B00040">int</span> <span style="color: #0000FF">abs</span>(<span style="color: #B00040">int</span> valor) {
    <span style="color: #008000; font-weight: bold">return</span> valor <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span> <span style="color: #666666">?</span> valor : <span style="color: #666666">-</span>valor;
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cap-02-exercicios">Exercícios</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Os exercícios são propostos como forma de validar que você pode ir para o próximo passo. Para fixar o conteúdo dessa sessão implemente alguns algoritmos básicos como:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Implemente a área do círculo</p>
</li>
<li>
<p>Implemente o calculo da média aritmética</p>
</li>
<li>
<p>Implemente o calculo da mediana</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Para implementar os exercícios procure por <strong>// [EXERCÍCIO][CAP 02]</strong>, implemente e execute <code>mvn clean test</code> para validar.</p>
</div>
<div class="paragraph">
<p>&lt;div class="github-repo"&gt;
    &lt;h2&gt;
        &lt;img class="logo" src="/assets/images/plugins/github-logo.png" alt="GitHub logo" loading="lazy" /&gt;
        &lt;img class="user" src="https://avatars.githubusercontent.com/u/353569?v=4" loading="lazy" /&gt;
        &lt;span class="url"&gt;
            &lt;a href="https://github.com/vepo"&gt;
                vepo
            &lt;/a&gt;
            /
            &lt;a href="https://github.com/vepo/java-101-codigo"&gt;
                java-101-codigo
            &lt;/a&gt;
        &lt;/span&gt;
    &lt;/h2&gt;
&lt;/div&gt;</p>
</div>
</div>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Tutorial" /><summary type="html"><![CDATA[Você sabe o que é o mínimo que você precisa saber pra desenvolver Java? Aqui eu vou apresentar um pouco da sintaxe do Java. Quero passar por todas as estruturas que vão fazer você criar o melhor código possível. A ideia desta série é criar um tutorial Java onde mostrarei todos os segredos da linguagem e do ecossistema.]]></summary></entry><entry><title type="html">Como criar uma linguagem usando ANTLR4 e Java</title><link href="https://blog.vepo.dev/posts/como-criar-uma-linguagem-usando-antlr4-e-java" rel="alternate" type="text/html" title="Como criar uma linguagem usando ANTLR4 e Java" /><published>2020-04-13T00:00:00+00:00</published><updated>2020-04-13T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/23-44-31-como-criar-uma-linguagem-usando-antlr4-e-java</id><content type="html" xml:base="https://blog.vepo.dev/posts/como-criar-uma-linguagem-usando-antlr4-e-java"><![CDATA[<p>Ao desenvolver qualquer ferramenta, você topará com a ingrata tarefa de escrever um parser. Usei o termo ingrata porque a principio pode parecer fácil, mas depois você verá que é bem complicado.</p>

<p>O problema na maioria das vezes não é o parser, mas a infinidade de possibilidades que surgem ao se propor uma solução tão aberta a ponto de precisar de uma linguagem.</p>

<h1 id="antes-do-parser">Antes do Parser</h1>

<p>Para se precisar de um parser é primeiro necessário um problema que se precisa de uma linguagem. Temos dois tipos de linguagem em computação: Linguagem Formal e Linguagem Natural.</p>

<p>Parsers resolvem o problema de se compreender uma Linguagem Formal, mas precisamos entender o que é cada uma.</p>

<h2 id="linguagem-natural">Linguagem Natural</h2>

<p>Vamos primeiro iniciar pela que aprendemos primeiro. Linguagem Natural é a que estamos tentando ensinar para o meu filho de 1 ano e meio 👶. Devido a uma exposição a telas, ele acabou desenvolvendo outras linguagens antes da qual será a principal em sua vida. Ele já compreende o português, compreende algumas músicas, consegue cantarolar…. Mas não consegue falar ainda. Só o papai e mamãe, mas ainda não associa a fala dele as coisas. Ele associa o som nosso as coisas. Bizarro não?</p>

<p>Mas essa é a forma de compreensão nossa. Temos sons, falas, fonemas, etc… Eles existem apesar da gramática. A gramática serve como base, serve para criar uma linguagem comum onde todos podemos ser compreendidos.</p>

<p>Em uma linguagem natural, ela já existe antes de uma gramática. A gramática vem para normalizar ela.</p>

<p>Temos inúmeras Linguagens Natural no mundo:</p>
<ul>
  <li>Música ➡️ Partituras</li>
  <li>Fala ➡️ Português, Inglês, Espanhol, etc….</li>
  <li>UX ➡️ Aplicativo Mobile, Aplicativo Web, etc…</li>
</ul>

<p>Há inúmeras formas de Linguagem Natural, se formos analisar filosoficamente, uma <em><strong>Linguagem Natural</strong> é qualquer formas de símbolos gerados e consumidor conscientemente por humanos</em>.</p>

<p>Quer saber como processar uma Linguagem Natural. Procure por <a href="https://towardsdatascience.com/natural-language-processing-from-basics-to-using-rnn-and-lstm-ef6779e4ae66">RNN ou LSTM</a>.</p>

<h2 id="linguagem-formal">Linguagem Formal</h2>

<p>Apesar de usar a mesma palavra, uma <strong>Linguagem Formal</strong> ela é completamente diferente de uma <strong>Linguagem Natural</strong>. Uma Linguagem Formal tem um fim especifico, seja ele dar ordens a uma máquina ou a troca de informações entre sistemas.</p>

<p>Agora não sei se você percebeu a principal diferença: <em><strong>Linguagens Formais são feitas para serem compreendidas por Máquinas</strong></em>.</p>

<p>Você pode ter a fé que for em Tecnologia, mas a grande diferença é que nunca existirá um <strong>Guimarães Rosa</strong> da computação, pois Linguagens Formais não aceitam neologismos. Ou a linguagem segue estritamente ao binômio gramática e sintaxe, ou ela não é compreendida. Um compilador não entende aquilo que é fora do que já conhece.</p>

<p>Tá, e quais são as Linguagens Formais conhecidas:</p>
<ul>
  <li>C</li>
  <li>C++</li>
  <li>Java</li>
  <li>XML</li>
  <li>brainfuck!!! <em>Um dia aprenderei brainfuck!!!</em></li>
</ul>

<p>Segue o Hello World em brainfuck:</p>
<div class="language-brainfuck highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">+</span><span class="p">[</span><span class="nf">-</span><span class="p">[</span><span class="nb">&lt;&lt;</span><span class="p">[</span><span class="nf">+</span><span class="p">[</span><span class="nf">---</span><span class="nb">&gt;</span><span class="p">]</span><span class="nf">-</span><span class="p">[</span><span class="nb">&lt;&lt;&lt;</span><span class="p">]]]</span><span class="nb">&gt;&gt;&gt;</span><span class="nf">-</span><span class="p">]</span><span class="nb">&gt;</span><span class="nf">-.---.</span><span class="nb">&gt;</span><span class="nf">..</span><span class="nb">&gt;</span><span class="nf">.</span><span class="nb">&lt;&lt;&lt;&lt;</span><span class="nf">-.</span><span class="nb">&lt;</span><span class="nf">+.</span><span class="nb">&gt;&gt;&gt;&gt;&gt;</span><span class="nf">.</span><span class="nb">&gt;</span><span class="nf">.</span><span class="nb">&lt;&lt;</span><span class="nf">.</span><span class="nb">&lt;</span><span class="nf">-.</span><span class="c1">
</span></code></pre></div></div>

<h1 id="a-necessidade">A Necessidade</h1>

<p>Tá, mais porque vou precisar de uma nova linguagem? Bom, antes disso é preciso de uma necessidade. Eu acabei desenvolvendo uma em casa nos últimos dias como um exercício. A necessidade era: em uma reunião, todos odeia o JMeter.</p>

<p>A razão de todos odiarem o JMeter era óbvia, o JMeter usa o XML como Linguagem e XML é apenas uma Linguagem para armazenar informações, ela não é desenvolvida para se processar testes.</p>

<p>Então fiz esse exercício: Como seria uma Linguagem de Testes?</p>

<p><strong>Observação</strong>: Esse é um exercício e existem outras linguagens para Testes. Mas poucas substituem o que o JMeter faz…</p>

<h1 id="criando-o-parser">Criando o Parser</h1>

<p>A partir desse ponto, irei me referir a essa linguagem que estou desenvolvendo como <strong>PlainTest</strong>.</p>

<h2 id="imaginar">Imaginar</h2>

<p>O primeiro passo para se projetar uma Linguagem Formal é imaginar uma gramática básica.</p>

<p>Para a <strong>PlainTest</strong>, eu imaginei duas unidades básicas:</p>

<ul>
  <li>A <strong>Suite</strong>: É um agrupamento ordenado de passos ou suites. Serve como agrupamento lógico. Seria o <em>CriarUsuário</em>.</li>
  <li>O <strong>Step</strong>: É a únidade básica do Teste, ou seja a realização dele. Executar um comando, enviar uma Request HTTP, etc…</li>
</ul>

<p>Segue o meu primeiro exemplo de <strong>PlainTest</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Suite UserTest {
    HTTP CreateUser {
        url   : "http://127.0.0.1"
        method: "POST"
        body  : """
                   {
                       "id": 123,
                       "firstName": "John",
                       "lastName" : "Doe"
                   }
                """
        assert responseCode Equals 200
    }
}
</code></pre></div></div>

<h2 id="extrair">Extrair</h2>

<p>Imaginada a gramática, é preciso extrair dela algumas informações: seu léxico e sua gramática. Para isso precisaremos de uma Linguagem Formal, e por isso escolheremos o <a href="https://www.antlr.org/">ANTLR4</a>. O ANTLR4 tem uma gramática própria onde o desenvolvedor pode declarar a gramática e o léxico da sua linguagem.</p>

<h2 id="léxico">Léxico</h2>

<p>Vamos definir grosseiramente o Léxico, ou Tokenização, como a identificação de cada elemento da Linguagem.</p>

<p>Assim podemos definir na nossa linguagem:</p>
<ul>
  <li>Reserved Words: <code class="language-plaintext highlighter-rouge">Suite</code>, <code class="language-plaintext highlighter-rouge">assert</code></li>
  <li>Identifier: Serve para identificar elementos</li>
  <li>Número: sim, um número….</li>
  <li>String: sim, uma string…</li>
  <li>MultilineString: String definida por <code class="language-plaintext highlighter-rouge">"""</code> e que não necessita <em>escapes</em>.</li>
</ul>

<p>Para definir um <a href="https://github.com/antlr/antlr4/blob/master/doc/lexicon.md#identifiers">Token</a> em ANTLR4, é preciso definir um identificar com letra maiúscula:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grammar TestSuite;

STRING : DQUOTE (ESC | ~["\\])* DQUOTE;

VERB: 'Contains' | 'Equals';

IDENTIFIER: [A-Za-z] [._\-A-Za-z0-9]*;

NUMBER: '-'? INT '.' [0-9]+ EXP? | '-'? INT EXP | '-'? INT;

fragment DQUOTE: '"';

fragment ESC: '\\' (["\\/bfnrt] | UNICODE);

fragment UNICODE: 'u' HEX HEX HEX HEX;

fragment HEX: [0-9a-fA-F];

fragment INT: '0' | [1-9] [0-9]*; // no leading zeros

fragment EXP: [Ee] [+\-]? INT; // \- since - means "range" inside [...]

// Just ignore WhiteSpaces
WS: [ \t\r\n]+ -&gt; skip;
</code></pre></div></div>
<p>Na gramática acima definimos apenas alguns tokens. Observe que existem Tokens e fragmentos. No ANTLR4, o <em>fragment</em> deve ser usado porque um identificador não aceita ser composto por identificadores, ele deve ser composto por algo similar a um Regex e fragmentos.</p>

<h2 id="sintático">Sintático</h2>

<p>Quando me refiro a Sintático em ANTLR4, estou falando da gramática em si, as regras. No nosso caso iremos criar os seguintes valores:</p>

<ul>
  <li>Suite: Composto por Suites e Steps</li>
  <li>Step: Unidade básica do test</li>
  <li>Attribute: Um par de Chave/Valor</li>
  <li>Assertion: Um par de Chave/Valor</li>
  <li>Value: Um valor que pode ser de Attribute ou Assertion.</li>
</ul>

<p>Cada regra dessa será uma <a href="https://github.com/antlr/antlr4/blob/master/doc/parser-rules.md#parser-rules">Parser Rule</a> na gramática do ANTLR4. Na definição da gramática elas são diferenciadas pela primeira letra. O Léxico é maiúscula, enquanto o Sintático é minúsculo. Posteriormente veremos a diferença na prática.</p>

<p>Segue o exemplo de como ficaria nossa Suite definida:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grammar TestSuite;

suite:
	'Suite' IDENTIFIER '{'
		(suite | step)* 
	'}'
;

step:
	IDENTIFIER IDENTIFIER '{'
		(assertion | attribute)* 
	'}'
;

assertion: 'assert' IDENTIFIER VERB value;

attribute: IDENTIFIER ':' value;

value: NUMBER | STRING;

STRING : DQUOTE (ESC | ~["\\])* DQUOTE;

VERB: 'Contains' | 'Equals';

IDENTIFIER: [A-Za-z] [._\-A-Za-z0-9]*;

NUMBER: '-'? INT '.' [0-9]+ EXP? | '-'? INT EXP | '-'? INT;

fragment DQUOTE: '"';

fragment ESC: '\\' (["\\/bfnrt] | UNICODE);

fragment UNICODE: 'u' HEX HEX HEX HEX;

fragment HEX: [0-9a-fA-F];

fragment INT: '0' | [1-9] [0-9]*; // no leading zeros

fragment EXP: [Ee] [+\-]? INT; // \- since - means "range" inside [...]

// Just ignore WhiteSpaces
WS: [ \t\r\n]+ -&gt; skip;
</code></pre></div></div>
<h2 id="gerando-o-código">Gerando o Código</h2>

<p>Essa Gramática não ir se <em>plugar</em> automaticamente no código, antes disso é necessário gerar alguns códigos antes.</p>

<p>Nesse ponto recomendo fortemente usar o Maven para gerenciar o ANTLR4, assim você já terá tudo configurado facilmente.</p>

<p>Mas caso queira gerar manualmente…</p>

<h3 id="gerando-código-manualmente">Gerando Código Manualmente</h3>

<ol>
  <li>Faça o download do ANTLR4 Tool em <a href="https://www.antlr.org/download.html">
Download ANTLR</a>, procura por <strong>ANTLR tool itself</strong></li>
  <li>Depois execute o ANTLR4 Tool:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> ~/Downloads/antlr-4.8-complete.jar <span class="nt">-package</span> io.vepo.tutorial.antlr4.generated src/main/antlr4/io/vepo/tutorial/antlr4/generated/TestSuite.g4
</code></pre></div>    </div>
  </li>
  <li>Use os arquivos gerados no seu projeto, conforme abaixo:
<img src="https://dev-to-uploads.s3.amazonaws.com/i/wbw4yg3ntuv7bhha3ms8.png" alt="Arquivos ANTLR4" /></li>
</ol>

<h3 id="gerando-usando-o-maven">Gerando usando o Maven</h3>

<p>Usando o Maven é bem mais simples. Crie seu arquivo <code class="language-plaintext highlighter-rouge">.g4</code> no diretório similar ao pacote. Por exemplo, em nosso exemplo está:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/iuughcd323jeemn01d2f.png" alt="ANTLR4 Gramática" /></p>

<p>E depois configure o plugin do ANTLR4 em seu <code class="language-plaintext highlighter-rouge">pom.xml</code></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.antlr<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>antlr4-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;version&gt;</span>${version.antlr4}<span class="nt">&lt;/version&gt;</span>
	<span class="nt">&lt;configuration&gt;</span>
		<span class="nt">&lt;arguments&gt;</span>
			<span class="nt">&lt;argument&gt;</span>-package<span class="nt">&lt;/argument&gt;</span>
			<span class="nt">&lt;argument&gt;</span>io.vepo.tutorial.antlr4.generated<span class="nt">&lt;/argument&gt;</span>
		<span class="nt">&lt;/arguments&gt;</span>
	<span class="nt">&lt;/configuration&gt;</span>
	<span class="nt">&lt;executions&gt;</span>
		<span class="nt">&lt;execution&gt;</span>
			<span class="nt">&lt;goals&gt;</span>
				<span class="nt">&lt;goal&gt;</span>antlr4<span class="nt">&lt;/goal&gt;</span>
			<span class="nt">&lt;/goals&gt;</span>
		<span class="nt">&lt;/execution&gt;</span>
	<span class="nt">&lt;/executions&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<h2 id="usando-o-código-gerado">Usando o Código Gerado</h2>

<p>Do código gerado, será preciso apenas reimplementar uma classe. Veja a interface <code class="language-plaintext highlighter-rouge">TestSuiteListener</code>, para cada Regra é chamado um Método antes e depois de processado. Em cada método há um objeto de contexto onde podemos acessar todos os Tokens.</p>

<p>Esses métodos são chamados em ordem, assim para o exemplo abaixo, qualquer metodo do atributo <code class="language-plaintext highlighter-rouge">url</code> será chamado antes de <code class="language-plaintext highlighter-rouge">method</code> e assim por diante. Todos como tem apenas uma suite, o <code class="language-plaintext highlighter-rouge">enterSuite</code> e  o <code class="language-plaintext highlighter-rouge">exitSuite</code> serão o primeiro e último a serem chamados.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Suite UserTest {
    HTTP CreateUser {
        url   : "http://127.0.0.1"
        method: "POST"
        body  : """
                   {
                       "id": 123,
                       "firstName": "John",
                       "lastName" : "Doe"
                   }
                """
        assert responseCode Equals 200
    }
}
</code></pre></div></div>

<p>Por fim, para transformar texto em Objetos, basta chamar o parser?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TestSuiteParser</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TestSuiteParser</span><span class="o">(</span>
		<span class="k">new</span> <span class="nf">CommonTokenStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">TestSuiteLexer</span><span class="o">(</span><span class="nc">CharStreams</span><span class="o">.</span><span class="na">fromString</span><span class="o">(</span><span class="n">contents</span><span class="o">))));</span>
<span class="nc">ParseTreeWalker</span> <span class="n">walker</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ParseTreeWalker</span><span class="o">();</span>
<span class="nc">SuiteCreator</span> <span class="n">creator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SuiteCreator</span><span class="o">();</span>
<span class="n">walker</span><span class="o">.</span><span class="na">walk</span><span class="o">(</span><span class="n">creator</span><span class="o">,</span> <span class="n">parser</span><span class="o">.</span><span class="na">suite</span><span class="o">());</span>
<span class="nc">Suite</span> <span class="n">suite</span> <span class="o">=</span> <span class="n">creator</span><span class="o">.</span><span class="na">getTestSuite</span><span class="o">();</span>
</code></pre></div></div>

<h1 id="conclusão">Conclusão</h1>

<p>Existem problemas que só podem ser resolvidos criando uma linguagem. Se usarmos padrões como JSON ou XML vamos complicar mais que simplificar.</p>

<p>Para essas soluções, é mais fácil usar o ANTLR. Assim criamos uma linguagem facilmente.</p>

<h1 id="recursos">Recursos</h1>

<p>Todo o código usado nesse post está disponível no repositório <a href="https://github.com/vepo/antlr4-post">github.com/vepo/antlr4-post</a></p>

<p>Continuarei o desenvolvimento dessa tool em <a href="https://github.com/vepo/plain-test">Plain Test github.com/vepo/plain-test</a>. Qualquer ajuda é bem vinda….</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Parser" /><category term="ANTLR4" /><category term="Tutorial" /><summary type="html"><![CDATA[Nesse post ensinarei como criar uma linguagem, não de programação, usando ANTLR4 em Java.]]></summary></entry></feed>