<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/Troubleshooting.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/Troubleshooting.xml</id><title type="html">vepo</title><subtitle>Um reposit√≥rio para todos os posts, palestras e tutoriais que j√° fiz. Java, Desenvolvimento de Software e reflex√µes sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">Como a ci√™ncia pode te ajudar a resolver bugs</title><link href="https://blog.vepo.dev/posts/como-a-ciencia-pode-te-ajudar" rel="alternate" type="text/html" title="Como a ci√™ncia pode te ajudar a resolver bugs" /><published>2021-07-02T00:00:00+00:00</published><updated>2021-07-02T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/11-53-00-como-a-ciencia</id><content type="html" xml:base="https://blog.vepo.dev/posts/como-a-ciencia-pode-te-ajudar"><![CDATA[<p>Est√° na moda falar sobre ci√™ncia. Em meio a uma pandemia algumas pessoas est√£o louvando-a (<em>estou nesse grupo talkey!</em>) e outras odiando. Mas creio que muitos nem conhecem como a ci√™ncia funciona. Entender como ela funciona pode te ajudar em muitas coisas na sua vida, muitas decis√µes pr√°ticas podem ser tomadas de forma melhor se conhecermos o m√©todo da ci√™ncia. <strong><em>M√©todo??!?!</em></strong> Sim meu caro, ci√™ncia √© um m√©todo e n√£o um ser m√°gico que det√™m o conhecimento do al√©m de como as coisas funcionam.</p>

<p>Mas antes de come√ßarmos vou fazer uma pergunta: <em>Qual √© o seu m√©todo?</em> Talvez voc√™ n√£o saiba responder a essa pergunta, mas voc√™ tem sim um m√©todo. Esse m√©todo pode ser at√© descrito. Tenta refletir a√≠ baseado nas perguntas abaixo:</p>

<ul>
  <li>O que voc√™ faz quando recebe um ticket para implementar?</li>
  <li>O que voc√™ faz pensa quando sabe que tem um bug?</li>
  <li>Como voc√™ aprende?</li>
</ul>

<p>Tudo tem um m√©todo, as vezes ele √© completamente subconsciente e emocional. Mas voc√™ pode refletir sobre ele e mudar ele.</p>

<h2 id="como-funciona-o-m√©todo-cient√≠fico">Como funciona o M√©todo Cient√≠fico?</h2>

<p><em><strong>Aviso</strong>: Eu n√£o sou filosofo e nem cientista e minha faculdade n√£o tinha nenhuma mat√©ria sobre m√©todo cient√≠fico, logo n√£o leve minhas afirma√ß√µes como √∫ltimas, elas podem estar imprecisas. Aprendi sobre m√©todo cient√≠fico na pr√°tica em laborat√≥rio de f√≠sica.</em></p>

<p>A base do m√©todo cient√≠fico √© a formula√ß√£o e valida√ß√£o de hip√≥teses. Mas como isso funciona? Vamos dividir em passos e explicar cada passo pensando na solu√ß√£o de bugs.</p>

<ol>
  <li>Observa√ß√£o</li>
  <li>Formula√ß√£o de hip√≥teses</li>
  <li>Elabora√ß√£o de experimentos</li>
  <li>Valida√ß√£o das hip√≥teses</li>
  <li>An√°lise de dados</li>
  <li>Conclus√£o</li>
</ol>

<h3 id="1-observa√ß√£o">1. Observa√ß√£o</h3>

<p>A primeira coisa que devemos fazer quando nos deparamos com um bug √© observar o que est√° acontecendo. Nesse caso precisamos levantar dados como em que ambiente o bug acontece, qual o contexto, saber se o sistema est√° sob estresse, h√° outros processos rodando na mesma m√°quina, quais foram as altera√ß√µes recentes e quem fez, etc‚Ä¶ Quanto mais perguntas voc√™ fizer nessa fase, mais informa√ß√µes vai ter.</p>

<p>√â muito importante saber todo o contexto, porque em muitos casos bugs s√£o criados por efeitos colaterais de outras altera√ß√µes e algumas solu√ß√µes podem desfazer altera√ß√µes pr√©vias que s√£o requisitos necess√°rios.</p>

<p>No final, a observa√ß√£o deve resultar em coleta de logs do sistema. Se o erro acontece sem nenhuma mensagem de erro ou alerta, isso por si j√° faz parte do bug.</p>

<h3 id="2-formula√ß√£o-de-hip√≥teses">2. Formula√ß√£o de hip√≥teses</h3>

<p>O segundo passo √© formular hip√≥teses. Desenvolvimento de software tamb√©m √© baseado em hip√≥teses, algumas delas s√£o requisitos e outras s√£o padr√µes arquiteturais.</p>

<p>A hip√≥tese √© nada mais do que uma afirma√ß√£o sobre o contexto. Por que √© importante formular hip√≥teses? Porque n√£o podemos simplesmente sair alterando c√≥digo sem saber o que ele faz. Precisamos ser cir√∫rgicos nas nossas altera√ß√µes para evitar efeitos colaterais. Se formos cir√∫rgicos em nossas altera√ß√µes, o c√≥digo vai ficar cada vez mais est√°vel, caso contr√°rio teremos cada vez mais bugs em um processo que custar√° cada vez mais caro para o desenvolvimento. Nada √© pior do que c√≥digo inst√°vel.</p>

<p>Quer exemplos de hip√≥teses?</p>
<ul>
  <li>O arquivo de configura√ß√£o n√£o est√° sendo lido</li>
  <li>O processo n√£o tem permiss√£o de leitura</li>
  <li>O HD est√° cheio</li>
  <li>H√° um memory leaky e o processo est√° sendo finalizado pelo sistema operacional</li>
</ul>

<h3 id="3-elabora√ß√£o-de-experimentos">3. Elabora√ß√£o de experimentos</h3>

<p>Agora que temos uma hip√≥tese, precisamos validar ela, mas para isso temos que fazer experimentos. Como eu posso criar um experimento a partir de uma hip√≥tese? Nosso camarada Karl Popper pode nos ajudar (<em>acho que era outro Karl?</em> üôÉ), precisamos falsear essa hip√≥tese.</p>

<p>Falsear √© um termo que pode parecer estranho, mas √© como se peg√°ssemos nossa hip√≥tese e tent√°ssemos ver como ela pode ser refutada. Esse √© o princ√≠pio b√°sico para se criar testes. Se eu tenho uma hipotese que o erro acontece por um motivo, ser√° que eu consigo criar um teste que reproduz aquele erro?</p>

<p>Vamos tentar fazer isso com nossa primeira hip√≥tese? Se o arquivo de configura√ß√£o n√£o est√° sendo lido, quais s√£o as possibilidades que podem fazer isso acontecer? Ser√° que ele existe? Se ele n√£o existir h√° uma mensagem de erro? Ser√° que o caminho dele est√° certo? Ser√° que h√° alguma vari√°vel de ambiente que sobrescreve ele? Ser√° que h√° algum erro no arquivo, algum par√¢metro escrito de forma incorreta? Quais mensagens de logs demonstram isso?</p>

<p>Falsear √© refletir sobre a hip√≥tese e em como construir testes que validem a hip√≥tese. √â simplesmente tentar destruir ela a todo custo.</p>

<h3 id="4-valida√ß√£o-das-hip√≥teses">4. Valida√ß√£o das hip√≥teses</h3>

<p>Agora com minhas suposi√ß√µes, precisamos criar testes para validar se √© realmente isso que est√° acontecendo. Esses testes podem n√£o ser testes automatizados, pode ser apenas <em>‚Äúpede pra pessoa de opera√ß√£o executar <code class="language-plaintext highlighter-rouge">df -h</code> e me mandar a resposta‚Äù</em>.</p>

<p>Ou pode ser criar testes mesmo, no nosso exemplo, o que acontece se existe um arquivo de configura√ß√£o especificado, mas ele n√£o existe? Deve aparecer algum erro? O processo deve ser finalizado? Criar os testes automatizados podem ser importantes para que altera√ß√µes futuras n√£o tragam o erro de volta.</p>

<p>Nessa fase da valida√ß√£o de hip√≥teses √© necess√°rio em muitos casos voltar a fase de observa√ß√£o. Na grande maioria dos bugs de produ√ß√£o n√£o h√° dados para prever ele porque ningu√©m imaginava que ele poderia acontecer.</p>

<h3 id="5-an√°lise-de-dados">5. An√°lise de dados</h3>

<p>Ao executar os testes, temos mais dados. Mas ser√° que os testes realmente reproduzem o problema? √â nessa hora vamos comprovar nossa hip√≥tese. Se a mensagem de erro √© a mesma ou o comportamento √© similar podemos assumir que nossa hip√≥tese √© v√°lida, caso contr√°rio precisamos de uma nova hip√≥tese e assim voltamos ao passo <strong>2</strong>. √â muito importante que o erro seja reproduzido, pois s√≥ assim sabemos quais condi√ß√µes o levaram a acontecer.</p>

<h3 id="6-conclus√£o">6. Conclus√£o</h3>

<p>Ora, na ci√™ncia temos uma hip√≥tese validada, mas e em desenvolvimento de software? Tamb√©m temos uma hip√≥tese validada! E isso pode levar a v√°rias a√ß√µes. Observe que nesse processo eu n√£o falo de a√ß√µes ou corre√ß√µes, pois esse √© o processo de encontrar o problema.</p>

<p>Mas dada a nossa hip√≥tese, quais a√ß√µes devem ser tomadas? O processo deve ser executado com permiss√£o de administrador? O processo deve ser finalizado se houver um erro no arquivo de configura√ß√£o? O software deve sempre colocar no log as configura√ß√µes lidas? O software deve validar se tem permiss√£o de leitura/escrita de certos arquivos?</p>

<p>√â muito importante que a conclus√£o leve a poss√≠veis requisitos de automatiza√ß√£o. Isso pode ser feito com a cria√ß√£o de testes ou com dashboards para validar a opera√ß√£o. O conceito de observabilidade √© muito importante, devemos ter dados sobre a opera√ß√£o que possam validar e guiar o desenvolvimento.</p>

<h2 id="conclus√£o">Conclus√£o</h2>

<p>M√©todo √© importante, sem ele atuamos cegamente sem sabermos o que realmente estamos fazendo. H√° v√°rios m√©todos no desenvolvimento de software e as vezes n√£o pensamos sobre eles, como desenvolvimento tempos o Test Driven Development que √© um m√©todo bem comum. Ter m√©todo √© bastante √∫til porque nos ajuda a n√£o procrastinar, sabemos como iniciar a fazer e quais s√£o os passos. Em muitos casos a procrastina√ß√£o √© o medo de executar por n√£o saber.</p>

<p>Agora que voc√™ conhece como eu aplico o M√©todo Cient√≠fico no meu trabalho do dia a dia, me manda um oi para ver se eu te ajudei!</p>

<p>Se quiser conhecer mais sobre Karl Popper, eu achei esse texto simples no blog Nau dos Loucos: <a href="https://naudosloucos.com.br/falseabilidade-descomplicada-karl-popper-e-o-falsificacionismo/">Falseabilidade Descomplicada: Karl Popper e o Falsificacionismo</a></p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Ci√™ncia" /><category term="M√©todo Cient√≠fico" /><category term="Troubleshooting" /><summary type="html"><![CDATA[Qual √© o m√©todo que voc√™ usa para resolver bugs? Voc√™ tem m√©todo?]]></summary></entry><entry><title type="html">Debugando ou Troubleshooting</title><link href="https://blog.vepo.dev/posts/debugando-ou-troubleshooting" rel="alternate" type="text/html" title="Debugando ou Troubleshooting" /><published>2020-05-29T00:00:00+00:00</published><updated>2020-05-29T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/15-02-56-debugando-ou-troubleshooting</id><content type="html" xml:base="https://blog.vepo.dev/posts/debugando-ou-troubleshooting"><![CDATA[<p>Uma das fun√ß√µes de um desenvolvedor S√™nior √© fazer o time andar. Al√©m dele ser melhorar a comunica√ß√£o interna do time, ser√° respons√°vel tamb√©m por n√£o deixar o time parar. √â a√≠ que entra o <em>Debug</em>, <em>Troubleshooting</em>‚Ä¶ ou em bom portugu√™s Resolu√ß√£o de Problemas.</p>

<p>Fazer troubleshooting √© quase como investigar um crime. Voc√™ precisa tem muito conhecimento do que estava acontecendo, muito conhecimento do local e ir seguindo rastros.</p>

<p>Ent√£o vamos l√° em dicas de como encontrar e resolver problemas.</p>

<h1 id="n√£o-se-contente-com-a-apar√™ncia">N√£o se contente com a apar√™ncia</h1>

<p>Muito tempo atr√°s, um um mundo onde <em>git</em> e <em>agile</em> ainda eram palavras ex√≥ticas, existia o <em>Waterfall</em>. <em>Waterfall</em> √© o famoso processo de desenvolvimento que cada fase dura ao menos 3 meses. Voc√™ passa 3 semanas planejando, 2 meses desenvolvendo e uma semana testando. √â uma loucura, literalmente. Mas tem uma coisa que o <em>Waterfall</em> me ensinou que eu nunca esque√ßo: <em>Root Cause Analysis</em>.</p>

<p>Receb√≠amos um <strong>CR</strong> (<em>Change Request</em>) e antes de receber um branch pra desenvolver precis√°vamos fazer uma an√°lise minuciosa da causa do problema em uma ferramenta web rudimentar.</p>

<p>Vamos propor um problema: um simples <em>NullPointerException</em>.</p>

<p>Na hora um j√∫nior falaria pra colocar uma verifica√ß√£o de <code class="language-plaintext highlighter-rouge">null</code> e pronto.</p>

<p>Mas uma boa An√°lise de Causa Raiz, pelo nome j√° diz que essa solu√ß√£o √© inv√°lida. Para fazer essa an√°lise, voc√™ tem que fazer perguntas ao sistema:</p>

<ol>
  <li>De onde vem esse valor <code class="language-plaintext highlighter-rouge">null</code>?</li>
  <li>Ele pode ser <code class="language-plaintext highlighter-rouge">null</code>? Ou deve sempre vir com algum valor?</li>
  <li>Caso seja <code class="language-plaintext highlighter-rouge">null</code>, qual o comportamento do sistema?</li>
</ol>

<p>Dependendo das respostas acima, √© bem prov√°vel que a solu√ß√£o proposta mude. At√© porque voc√™ pode se perguntar: <em>Porque o cara que desenvolveu isso n√£o o fez?</em> √ìbvio?</p>

<p>Pois bem, um S√™nior n√£o se contenta com an√°lises superficiais. Vai investigar.</p>

<h1 id="an√°lise-de-logs">An√°lise de logs</h1>

<p>Um S√™nior sabe ler logs, mesmo que n√£o seja de aplica√ß√µes dele. Logs s√£o o registro factual e uma execu√ß√£o. O passo a passo para um bug. Um log, em si, j√° diz muita coisa, mas se associarmos um log com o c√≥digo temos tudo!</p>

<p>Mas como ler um log? Vamos l√°‚Ä¶.</p>

<ol>
  <li>Encontre onde deu o problema</li>
  <li>Analise a c√≥digo levante algumas suposi√ß√µes</li>
  <li>Retroceda no log, acompanhando com os trechos de c√≥digo e validando suas suposi√ß√µes</li>
  <li>Caso consiga uma suposi√ß√£o valida, crie um teste unit√°rio que recria o estado da execu√ß√£o</li>
</ol>

<p>Fazer esses quatro passos exige muito treino. A principio √© dif√≠cil analisar log, mas com o tempo vai se pegando o jeito e s√≥ de olhar o c√≥digo √© poss√≠vel supor alguns poss√≠veis problemas.</p>

<h1 id="deixe-rastros">Deixe Rastros</h1>

<p>Pior do que analisar logs √© n√£o ter logs para analisar. <a href="https://dev.to/vepo/deixando-rastros-ou-como-usar-log-peg">Nesse post expliquei como usar Log em Java</a>.</p>

<p>Log consome performance, caso voc√™ n√£o use log por causa disso, voc√™ n√£o sabe usar log!</p>

<p>Antes vamos entender os n√≠veis de log‚Ä¶</p>

<h2 id="n√≠veis-de-log">N√≠veis de log</h2>

<p>Em Java temos uma biblioteca padr√£o de log, a <a href="http://www.slf4j.org/">SLF4J</a>, eu recomendo que voc√™ a use, escolha uma implementa√ß√£o, mas pode olhar um benchmark.</p>

<p>Cada mensagem de log tem um n√≠vel associado. No SLF4J h√° os seguintes:</p>

<table>
  <thead>
    <tr>
      <th>Nivel</th>
      <th>Descri√ß√£o</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>TRACE</td>
      <td>O mais interno. Use-o quando voc√™ quer marcar trechos de c√≥digo executados. Por exemplo: ‚ÄúIniciando getUsers‚Äù</td>
    </tr>
    <tr>
      <td>DEBUG</td>
      <td>Use-o para imprimir valores de vari√°veis durante a execu√ß√£o.</td>
    </tr>
    <tr>
      <td>INFO</td>
      <td>Use-o para imprimir informa√ß√µes uteis para a execu√ß√£o de informa√ß√µes. Em casos excepcionais, esse n√≠vel de log pode ser usado em produ√ß√£o.</td>
    </tr>
    <tr>
      <td>WARN</td>
      <td>Opa! Alguma coisa n√£o devia ter acontecido. Porque? √â bom investigar! Use esse n√≠vel para marcar comportamento inesperado, mas que n√£o deram erro. Normalmente √© aquela situa√ß√£o que pode ser contornada.</td>
    </tr>
    <tr>
      <td>ERROR</td>
      <td>Opa! Erro inesperado! N√£o fique logando com log erros esperados. Um ERROR j√° √© sinal de um Bug‚Ä¶. Ou √© um erro na l√≥gica, ou algum servi√ßo falhou!</td>
    </tr>
  </tbody>
</table>

<p>Use esses servi√ßos sem cerimonia, para garantir a performance voc√™ deve configurar o n√≠vel de log de acordo com os ambientes. E, por favor, fa√ßa a <a href="https://12factor.net/pt_br/config">configura√ß√£o ser por vari√°vel de ambiente</a>, <a href="https://12factor.net/pt_br/dev-prod-parity">nada de uma build pra cada ambiente!</a>.</p>

<p>O que eu costumo fazer:</p>

<table>
  <thead>
    <tr>
      <th>Nivel</th>
      <th>Ambiente</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>TRACE</td>
      <td>Desenvolvimento em debugging</td>
    </tr>
    <tr>
      <td>DEBUG</td>
      <td>Desenvolvimento, Staging</td>
    </tr>
    <tr>
      <td>INFO</td>
      <td>Testes, Staging, UAT</td>
    </tr>
    <tr>
      <td>WARN</td>
      <td>Produ√ß√£o</td>
    </tr>
    <tr>
      <td>ERROR</td>
      <td>Oi? Vai ignorar os warnings?</td>
    </tr>
  </tbody>
</table>

<p>Os N√≠veis de log da produ√ß√£o eu baixo esporadicamente para determinados modulos somente quando h√° um Bug em Produ√ß√£o que n√£o consigo reproduzir localmente. Mas √© somente at√© conseguir encontrar registro do erro. Depois volta para WARN.</p>

<h1 id="conhe√ßa-o-c√≥digo">Conhe√ßa o C√≥digo</h1>

<p>Muitos desenvolvedores consideram um produto/biblioteca/framework uma caixa preta. Trabalham na base do input/output. Essa abordagem √© necess√°ria quando se tem muito conhecimento a reter. Quando eu inicio o uso de um produto/biblioteca/framework eu tomo essa abordagem, mas com o andamento do projeto precisamos de mais informa√ß√µes.</p>

<p>O conhecimento do funcionamento interno de todo o projeto √© necess√°rio para entender poss√≠veis erros. Quando h√° um erro em produ√ß√£o, 1h √© bastante tempo, logo tem que se ter uma boa ideia de tudo. O que pode t√° errado?</p>

<p>Um dica √© aos poucos ir lendo os c√≥digos que voc√™ usa como caixa preta. Mesmo que voc√™ n√£o entenda, v√° lendo e vendo o que ele faz com seus inputs.</p>

<p>Quando estava desenvolvendo a Engine de Processos de Neg√≥cios de uma antiga empresa que trabalhei, enfretamos um grande problema de Memory Leak. Em resumo, toda intergra√ß√£o de neg√≥cio era escrita em XML e associado c√≥digo Java. Assim um cara do comercial podia entender as integra√ß√µes bizarras que existiam.</p>

<p>Para fazer com que <code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">case</code>, <code class="language-plaintext highlighter-rouge">switch</code>, <code class="language-plaintext highlighter-rouge">for</code>, etc‚Ä¶ fosse colocados em XML, usamos o <a href="http://commons.apache.org/proper/commons-jexl/"><strong>Java Expression Language (JEXL)</strong></a> da Apache.</p>

<p>Estava tudo indo certo at√© ir para Produ√ß√£o. Mas o neg√≥cio n√£o ficava de p√© por alguns dias. Estourava a mem√≥ria. Depois de uma analise bem detalhada, percebi que n√£o era no nosso c√≥digo. At√© encontrar que na limpesza do cache do JEXL, eles n√£o limpavam as refer√™ncias as classes utilizadas. Assim, se usassemos ClassLoaders dinamicos, como era uma escolha arquitetural nossa, ficavamos com muito lixo na Heap. Entendeu? Se n√£o depois falo sobre Gerenciamento de Mem√≥ria no Java.</p>

<p>E agora, como resolver? Bom, tive que abrir os objetos pro Reflection, violando todos os principios de OOP para limpar o cache. E funcionou!</p>

<p>N√£o d√° pra garantir que exista um software sem erros, conhecer as suas depend√™ncias √© um requisito.</p>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>Um S√™nior deve saber resolver os problemas do time. Deve ser um guia para criar meios de deixar rastros e entender o que est√° acontecendo. Troubleshooting √© dif√≠cil, mas √© uma pr√°tica.</p>

<p>Leia c√≥digo, tente executar eles na sua mente. Simule execu√ß√µes baseada em logs.</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Troubleshooting" /><category term="Debugging" /><category term="Logging" /><summary type="html"><![CDATA[Um S√™nior deve saber fazer troubleshooting. Aqui v√£o algumas dicas.]]></summary></entry></feed>