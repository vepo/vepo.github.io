<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/Middleware.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/Middleware.xml</id><title type="html">vepo</title><subtitle>Um reposit√≥rio para todos os posts, palestras e tutoriais que j√° fiz. Java, Desenvolvimento de Software e reflex√µes sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">O que √© o Apache Kafka</title><link href="https://blog.vepo.dev/posts/o-que-e-o-apache-kafka" rel="alternate" type="text/html" title="O que √© o Apache Kafka" /><published>2020-02-07T00:00:00+00:00</published><updated>2020-02-07T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/11-46-34-o-que-e-o-apache-kafka</id><content type="html" xml:base="https://blog.vepo.dev/posts/o-que-e-o-apache-kafka"><![CDATA[<p>Esse artigo √© uma <a href="https://medium.com/@vepo/entendendo-o-kafka-bf64169e421f">reescrita de um que escrevi 2 anos atr√°s</a>. Naquela √©poca estava tentando entender como funcionava esse middleware t√£o importante em sistemas distribu√≠dos. Depois trabalhei na reestrutura√ß√£o de um sistema bem complexo usando Kafka como base de verdade.</p>

<h1 id="o-que-√©">O que √©?</h1>

<p>Antes de Entender o que √© Kafka, precisamos entender um pouco de Sistemas Distribu√≠dos.</p>

<h2 id="pubsub">Pub/Sub</h2>

<p>Dentre os padr√µes de arquiteturas de Sistemas Distribu√≠dos h√° o <a href="https://cloud.google.com/pubsub/docs/overview?hl=pt-br">Pub/Sub</a>. Quando desenhamos um sistema, ao enviar uma mensagem, h√° duas quest√µes b√°sicas:</p>

<ol>
  <li>Para quem enviaremos?</li>
  <li>Como enviaremos?</li>
</ol>

<p>Quando usamos APIs REST (ou gRPC) estamos limitados a conhecer o destinat√°rio e enviar para todos os destinat√°rios que est√£o esperando essa mensagem. Usando um middleware Pub/Sub n√£o precisamos nos preocupar com isso.</p>

<p>Em uma arquitetura Pub/Sub, temos duas perguntas b√°sicas para fazer ao se enviar uma mensagem:</p>

<ol>
  <li>Para quais T√≥picos enviaremos essa mensagem?</li>
  <li>Qual o formato que ser√° a mensagem?</li>
</ol>

<p>Pub/Sub √© baseado no conceito de T√≥pico. T√≥pico √© como se fosse um canal, quem subscreve a um T√≥pico ir√° receber todas as mensagens enviadas nele. Quem envia a mensagem n√£o sabe quem ir√° receber, e vice versa! üßê</p>

<h2 id="o-kafka">O Kafka</h2>

<p>Kafka estende o conceito de Pub/Sub ao seu limite. O que de certa forma por o tornar bem mais complexo que seus similares como <a href="https://www.rabbitmq.com/">RabbitMQ</a>, <a href="https://activemq.apache.org/">ActiveMQ</a>, ou o <a href="https://aws.amazon.com/pt/sqs/">SQS</a>/<a href="https://aws.amazon.com/pt/sns/">SNS</a> da Amazon.</p>

<p>Com o Kafka voc√™ pode:</p>

<ol>
  <li>Configurar o tempo de armazenamento de cada T√≥pico.
    <ul>
      <li>Por padr√£o o <a href="http://kafka.apache.org/documentation/#topicconfigs">retention.ms</a> de um T√≥pico √© configurado para 604800000 ms (7 dias!)</li>
    </ul>
  </li>
  <li>Criar v√°rios <em>Consumers</em> concorrentes e garantir a forma de funcionamento deles!
    <ul>
      <li>Uma Mensagem ser recebida por todos os <em>Consumers</em></li>
      <li>Uma Mensagem ser recebida por apenas um <em>Consumer</em></li>
      <li>Uma Mensagem ser recebida por <em>Consumers</em> Diferentes!</li>
      <li>Etc‚Ä¶ Com o Kafka qualquer tipo de configura√ß√£o √© poss√≠vel</li>
    </ul>
  </li>
  <li>Escalonamento f√°cil.
    <ul>
      <li>F√°cil de adicionar um novo n√≥ Kafka</li>
      <li>F√°cil de adicionar um novo <em>Consumer</em>/<em>Producer</em></li>
    </ul>
  </li>
  <li>Reprocessamento de mensagens
    <ul>
      <li>√â poss√≠vel reprocessar todas as mensagens de um T√≥pico/<em>Consumer</em> espec√≠fico</li>
    </ul>
  </li>
  <li>Sem <a href="https://pt.wikipedia.org/wiki/Ponto_%C3%BAnico_de_falha">Ponto √önico de Falha (SPOF)</a></li>
  <li>Criar Streaming de Eventos</li>
  <li>Tratar Streaming de Eventos como Base de Dados</li>
</ol>

<p>Essas duas √∫ltimas features s√£o bastantes complexas e n√£o devem ser utilizadas sem muito experimenta√ß√£o pr√©via.</p>

<h1 id="refer√™ncia-liter√°ria">Refer√™ncia Liter√°ria</h1>

<p>H√° um termo comum que muitos n√£o devem conhecer que √© a <a href="https://www.jornalopcao.com.br/colunas-e-blogs/contraponto/burocracia-brasileira-e-mais-kafkiana-do-que-kafka-56504/">Burocracia Kafkaniana</a>. Talvez se voc√™ √© que nem eu, que conhece a literatura de Franz Kafka, mas nunca a leu, s√≥ sabe que ele vira uma barata, voc√™ n√£o saber√° que ele tinha horror a burocracia e que isso est√° expresso nos livros dele.</p>

<p>Talvez esse nome se refere ao problema que o Apache Kafka resolve. Seu sistema n√£o precisa ser que nem Guich√™s do Detran, vai de um para outro, para outro‚Ä¶ indefinidamente!!!</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/akka1r41bfnwlf4hrjpg.jpg" alt="A Barata" /></p>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>Se voc√™ est√° construindo um sistema que demandar√° um n√≠vel de complexidade ainda desconhecido, mas j√° seguro que ser√° bastante complexo. Voc√™ pode considerar de usar o Kafka para delegar a responsabilidade de integra√ß√£o de cada servi√ßo.</p>

<p>Com o Kafka, cada servi√ßo deve se preocupar em:</p>

<ol>
  <li>Gerar Eventos</li>
  <li>Ouvir os Eventos interessados</li>
</ol>

<p>Assim h√° um grande desacoplamento dos servi√ßos. Voc√™ pode criar uma Loja virtual que apenas emite um evento de <em>CompraEfetuada</em> gerando assincronamente:</p>
<ol>
  <li>Um servi√ßo de EmitirNotaFiscal</li>
  <li>Um servi√ßo de ProcessarPacote</li>
  <li>Etc‚Ä¶</li>
  <li>Etc‚Ä¶ no tempo! Daqui a 1 semana voc√™ pode criar um novo servi√ßo e usar TODOS esses eventos! üòäüòäüòäüòä</li>
</ol>

<p><em>To be continue‚Ä¶</em></p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Apache Kafka" /><category term="Messaging" /><category term="Middleware" /><category term="Microsservi√ßos" /><summary type="html"><![CDATA[Nesse artigo vou explicar brevemente o que √© o Kafka e qual sua finalidade]]></summary></entry><entry><title type="html">Rodando o Apache Kafka localmente</title><link href="https://blog.vepo.dev/posts/rodando-o-apache-kafka-localmente" rel="alternate" type="text/html" title="Rodando o Apache Kafka localmente" /><published>2020-02-07T00:00:00+00:00</published><updated>2020-02-07T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/11-47-27-rodando-o-apache-kafka-localmente</id><content type="html" xml:base="https://blog.vepo.dev/posts/rodando-o-apache-kafka-localmente"><![CDATA[<p>Continuando a s√©rie de <strong>Entendendo o Kafka</strong>, vou criar aqui um pequeno tutorial de como rodar o Kafka localmente em ambiente Windows.</p>

<p>Para desenvolvimento, recomendo usar containers Docker. Por√©m, para aprendizado vale a pena configurar um cluster manualmente.</p>

<h1 id="configurando">Configurando</h1>

<ol>
  <li>Instale o JDK 8</li>
  <li>Baixe a √∫ltima vers√£o do Kafka em <a href="https://kafka.apache.org/downloads">https://kafka.apache.org/downloads</a>
    <ul>
      <li>H√° v√°rias vers√µes baseadas na vers√£o do Scala, escolha qualquer uma delas. Vamos usar a <strong>kafka_2.12-2.4.0</strong> por ela estar recomendada no site.</li>
    </ul>
  </li>
  <li>Extraia o arquivo
    <ul>
      <li>No Windows a extens√£o <strong>.tgz</strong> n√£o √© muito amig√°vel, mas voc√™ precisa das ferramentas corretas. Dica, use o <a href="https://www.7-zip.org/">7-Zip</a>. Com ele d√° pra extrair usando o menu de contexto do mouse.</li>
    </ul>
  </li>
  <li>Feito! N√£o √© necess√°rio nenhuma configura√ß√£o a mais. Para melhor organiza√ß√£o eu sempre instalo em <code class="language-plaintext highlighter-rouge">C:\opt</code>, ficando o Kafka com o PATH <code class="language-plaintext highlighter-rouge">C:\opt\kafka</code>.</li>
</ol>

<h1 id="iniciando-o-servidor-kafka">Iniciando o Servidor Kafka</h1>

<p>O Kafka depende do Zookeeper. Este √© um servi√ßo para sincronia de configura√ß√µes. Provavelmente ser√° removido em futuras release. Mas por enquanto √© necess√°rio.</p>

<p>Para iniciar o Kafka, abra duas linhas de comando e execute a partir da pasta de instala√ß√£o do Kafka:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.\bin\windows\zookeeper-server-start.bat config\zookeeper.properties
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.\bin\windows\kafka-server-start.bat config\server.properties
</code></pre></div></div>

<p>Pronto! Voc√™ tem um Kafka <strong><em>Up &amp; Running</em></strong>!</p>

<h2 id="testando-o-cluster">Testando o Cluster</h2>

<p>Para testar o cluster, a instala√ß√£o do Kafka j√° vem com alguns scripts preparados.</p>

<p>Primeiro precisamos criar um t√≥pico para enviar mensagens. Isso pode ser feito com a linha abaixo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.\bin\windows\kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test
</code></pre></div></div>

<p>Ap√≥s criado o t√≥pico √© s√≥, a partir de duas janelas, executar as seguintes linhas abaixo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginning
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/x6zzoik8zb1a66ytivow.png" alt="Kafka Consumer" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.\bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic test
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/3plxrkla0kra0g7ga46p.png" alt="Kafka Producer" /></p>

<p>A primeira inicia um consumidor do T√≥pico <code class="language-plaintext highlighter-rouge">test</code> e a segunda um produtor. Cada mensagem escrita na segunda ser√° enviada para a primeira.</p>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>√â f√°cil configurar um servidor Kafka para testes. Em outra oportunidade vou compartilhar como utilizar uma imagem docker, mas por enquanto apenas com o JDK 8 instalado √© poss√≠vel fazer essa configura√ß√£o de qualquer ambiente.</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Apache Kafka" /><category term="Messaging" /><category term="Middleware" /><category term="Microsservi√ßos" /><summary type="html"><![CDATA[Nesse artigo, vou mostrar como rodar localmente o Kafka em uma M√°quina Windows.]]></summary></entry><entry><title type="html">Enviando Mensagens</title><link href="https://blog.vepo.dev/posts/enviando-mensagens" rel="alternate" type="text/html" title="Enviando Mensagens" /><published>2020-02-07T00:00:00+00:00</published><updated>2020-02-07T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/14-09-55-enviando-mensagens</id><content type="html" xml:base="https://blog.vepo.dev/posts/enviando-mensagens"><![CDATA[<p>Enviar mensagens no Kafka √© bastante simples.</p>

<h1 id="instanciando-um-producer">Instanciando um Producer</h1>

<p>Para configurar, √© preciso basicamente apenas 3 parametros:</p>

<ul>
  <li><strong>BOOTSTRAP_SERVERS</strong>: Conjunto de pares IP:PORTA para acessar o cluster. Por exemplo, <code class="language-plaintext highlighter-rouge">kafka-1:9092,kafka-2:9092</code> ir√° acessar o cluster que contem os duas inst√¢ncias <code class="language-plaintext highlighter-rouge">kafka-1:9092</code> e <code class="language-plaintext highlighter-rouge">kafka-2:9092</code></li>
  <li><strong>KEY_SERIALIZER_CLASS</strong>: √â a classe que far√° a serializa√ß√£o da Chave. O que √© e como √© usada a chave, vamos explicar posteriormente. Deve ser uma implementa√ß√£o da interface <code class="language-plaintext highlighter-rouge">org.apache.kafka.common.serialization.Serializer</code>.</li>
  <li><strong>VALUE_SERIALIZER_CLASS</strong>: √â a class que far√° a serializa√ß√£o do Valor. N√£o h√° mensagem sem um valor. Deve ser uma implementa√ß√£o da interface <code class="language-plaintext highlighter-rouge">org.apache.kafka.common.serialization.Serializer</code>.</li>
</ul>

<div data-gist="https://gist.github.com/vepo/1468c5a3af73aff7e0fc78ae296ca589"></div>

<p>Pronto, configurado o <em>Producer</em>, basta criar o objeto <code class="language-plaintext highlighter-rouge">ProducerRecord</code>, que ir√° associar mensagem/chave/t√≥pico, e enviar ela.</p>

<p>No c√≥digo acima, eu criei um simples cliente que l√™ todas as mensagens do STDIN e envia para o t√≥pico em quest√£o.</p>

<h1 id="recomenda√ß√µes">Recomenda√ß√µes</h1>

<ul>
  <li>O envio √© ass√≠ncrono, verifique se a mensagem foi realmente enviada e tente novamente caso negativo. Normalmente o cliente Kafka j√° faz algumas tentativas.</li>
  <li>Particione tipos de mensagens por chave, a ordem das entregas de mensagens s√≥ √© garantida para mensagens com mesma chave.</li>
</ul>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>O envio de mensagens Kafka √© simples e descomplicado, mas mesmo assim deve ser feito de forma cuidadosa para se garantir a entrega. Tendo a entrega da mensagem garantida, √© certo que teremos o recebimento dela garantido.</p>

<p>Mais informa√ß√µes sobre Chave ser√£o dadas quando formos falar de ordena√ß√£o.</p>

<h1 id="refer√™ncias">Refer√™ncias</h1>

<p>Todos os c√≥digos est√£o no reposit√≥rio <a href="https://github.com/vepo/kafka-articles">vepo/kafka-articles</a></p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Apache Kafka" /><category term="Messaging" /><category term="Middleware" /><category term="Microsservi√ßos" /><summary type="html"><![CDATA[Exemplo de como enviar uma mensagem para um broker Kafka]]></summary></entry><entry><title type="html">Recebendo Mensagens</title><link href="https://blog.vepo.dev/posts/recebendo-mensagens" rel="alternate" type="text/html" title="Recebendo Mensagens" /><published>2020-02-07T00:00:00+00:00</published><updated>2020-02-07T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/19-01-26-recebendo-mensagens</id><content type="html" xml:base="https://blog.vepo.dev/posts/recebendo-mensagens"><![CDATA[<p>Ao iniciar o post <strong>Enviando Mensagens</strong>, falei que enviar √© simples. Se voc√™ n√£o achou simples, depois de ver a complexidade de receber uma mensagem ver√° que <em>sim, √© simples!</em></p>

<h1 id="par√¢metros-comuns">Par√¢metros comuns</h1>

<p>Para configurar um <em>consumer</em> s√£o necess√°rios mais par√¢metros. Os par√¢metros abaixo s√£o similares ao do <em>producer</em> com excess√£o da troca de Serializador por Desserializador, visto que a mensagem deve ser agora transformada de byte[] para um objeto.</p>

<ul>
  <li><strong>BOOTSTRAP_SERVERS</strong>: Conjunto de pares IP:PORTA para acessar o cluster. Por exemplo, <code class="language-plaintext highlighter-rouge">kafka-1:9092,kafka-2:9092</code> ir√° acessar o cluster que contem os duas inst√¢ncias <code class="language-plaintext highlighter-rouge">kafka-1:9092</code> e <code class="language-plaintext highlighter-rouge">kafka-2:9092</code></li>
  <li><strong>KEY_DESERIALIZER_CLASS</strong>: √â a classe que far√° a desserializa√ß√£o da Chave. O que √© e como √© usada a chave, vamos explicar posteriormente. Deve ser uma implementa√ß√£o da interface <code class="language-plaintext highlighter-rouge">org.apache.kafka.common.serialization.Deserializer</code>.</li>
  <li><strong>VALUE_DESERIALIZER_CLASS</strong>: √â a class que far√° a desserializa√ß√£o do Valor. N√£o h√° mensagem sem um valor. Deve ser uma implementa√ß√£o da interface <code class="language-plaintext highlighter-rouge">org.apache.kafka.common.serialization.Deserializer</code>.</li>
</ul>

<p>Dados os parametros abaixo, agora √© preciso configurar o <strong>GROUP_ID</strong>. Antes de escolher um, √© necess√°rio pensar em como ser√° a leitura dessa mensagem.</p>

<h1 id="read-once"><em>Read once</em></h1>

<p>Um <em>Producer</em>, escreve uma mensagem por t√≥pico. Ele n√£o se preocupa como essa mensagem ser√° lida. J√° o <em>Consumer</em> deve se preocupar para que a mensagem n√£o apenas uma vez, n√£o menos que isso.</p>

<p>No Kafka, uma mensagem √© recebida apenas uma vez por um <em>Consumer</em> de um <strong>GROUP_ID</strong>. Isso que dizer que, se dois processos diferentes tiverem consumers com o mesmo <strong>GROUP_ID</strong>, essa mensagem ser√° consumida por apenas um.</p>

<p>Essa funcionalidade pode ajudar muito, mas pode tamb√©m atrapalhar. O cuidado que deve ser tomado √©:</p>
<ul>
  <li>Para cada tipo de consumer, sempre escolher um <strong>GROUP_ID</strong> por tipo</li>
  <li>Tratar as mensagens como <a href="https://pt.wikipedia.org/wiki/Idempot%C3%AAncia">idempotentes</a></li>
</ul>

<h1 id="instanciando-um-consumer">Instanciando um <em>Consumer</em></h1>

<p>Para instanciar um consumer, ent√£o, s√£o necess√°rios os 4 par√¢metros: <strong>BOOTSTRAP_SERVERS</strong>, <strong>KEY_DESERIALIZER_CLASS</strong>, <strong>VALUE_DESERIALIZER_CLASS</strong> e <strong>GROUP_ID</strong>.</p>

<div data-gist="https://gist.github.com/vepo/66ee3db0a6684cec90d8c1349a2a2e1d"></div>

<p>Pronto, criado o <em>Consumer</em>, deve-se fazer o pull e processar as mensagens.</p>

<p>No exemplo acima, h√° uma condi√ß√£o de saida, mas isso √© apenas para exemplo. Normalmente um programa que processas mensagens opera at√© ser interrompido.</p>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>Criar um <em>Consumer</em> para um T√≥pico Kafka √© simples, n√£o t√£o simples quanto um <em>Producer</em>. Deve-se atentar para quantos outros consumers v√£o concorrer pelas mensagens, se uma mensagem deve ser lida por um ou mais consumer. E ainda deve-se tratar a mensagem como se ela fosse repetida.</p>

<p>Ficou com d√∫vida‚Ä¶ alguns pontos ainda ser√£o tradados. Mas pode perguntar!</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Apache Kafka" /><category term="Messaging" /><category term="Middleware" /><category term="Microsservi√ßos" /><summary type="html"><![CDATA[Exemplo de como receber uma mensagem para um broker Kafka]]></summary></entry></feed>