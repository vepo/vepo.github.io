<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/TDD.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/TDD.xml</id><title type="html">vepo</title><subtitle>Um reposit√≥rio para todos os posts, palestras e tutoriais que j√° fiz. Java, Desenvolvimento de Software e reflex√µes sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">Testes 101 - Testando aplica√ß√µes Java</title><link href="https://blog.vepo.dev/posts/testes-101-testando-aplicacoes-java" rel="alternate" type="text/html" title="Testes 101 - Testando aplica√ß√µes Java" /><published>2020-09-01T00:00:00+00:00</published><updated>2020-09-01T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/21-16-00-testes-101-testando-aplicacoes-java</id><content type="html" xml:base="https://blog.vepo.dev/posts/testes-101-testando-aplicacoes-java"><![CDATA[<p>Testes s√£o fundamentais. Se voc√™ deseja ser desenvolvedor Java lhe recomendo pelo menos conhecer o que s√£o TDD, Maven e JUnit. E vou te apresentar o porque.</p>

<h1 id="tdd">TDD</h1>

<p>TDD significa Test-Driven-Development. Se voc√™ imagina que √© criar o testes e depois o c√≥digo, voc√™ est√° um pouco enganado. TDD √© uma disciplina um pouco diferente.</p>

<p>TDD √© uma disciplina, n√£o √© algo que pode ser explicado. √â uma cultura que voc√™ tem que aprender, e treinar. Depois de anos voc√™ vai ver j√° melhorou bastante, mas tem muito mais a aprender.</p>

<h2 id="ciclos-do-tdd">Ciclos do TDD</h2>

<p>Pra explicar o TDD facilmente, temos que falar dos ciclos. Nem todos os testes criados ser√£o usados e eles n√£o devem refletir o requisito final. Voc√™ tem que usar <strong>Baby Steps</strong>, passos de beb√™, em cara ciclo. Imagine um ciclo como um rodada de desenvolvimento de 10 a 30 minutos:</p>

<ul>
  <li><strong>[R]</strong> Voc√™ cria um Test, ele deve falhar.</li>
  <li><strong>[G]</strong> Voc√™ implementa o c√≥digo para o teste funcionar</li>
  <li><strong>[R]</strong> Voc√™ Refatora o c√≥digo</li>
</ul>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/pfjgroqac0hnojyt7vmj.png" alt="Ciclo RGR" /></p>

<p>Ao final de um tempo de desenvolvimento voc√™ ter√° v√°rios testes. Alguns podem ser descartados, outros v√£o ficar. Eu recomento ficar apenas os que representem a funcionalidades do c√≥digo. E recomendo tamb√©m que cubram o m√°ximo poss√≠vel o seu c√≥digo.</p>

<h1 id="maven">Maven</h1>

<p>Se estamos falando de testes, estamos falando de Processo de Build. Se voc√™ cria os seus testes e n√£o os colocar para serem executados automaticamente, voc√™ n√£o fez praticamente nada.</p>

<p>O Maven abstrai cada build criando um ciclo com fases. Ent√£o os testes sempre ser√£o executados se voc√™ deseja executar ou empacotar o seu projeto.</p>

<p>Para criar um projeto usando Maven, instale o Maven e execute:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn archetype:generate <span class="nt">-DgroupId</span><span class="o">=</span>io.vepo.tests <span class="nt">-DartifactId</span><span class="o">=</span>testsExample <span class="nt">-DarchetypeArtifactId</span><span class="o">=</span>maven-archetype-quickstart <span class="nt">-DinteractiveMode</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<p>Voc√™ vai observar duas coisas:</p>
<ul>
  <li>o Maven criou um arquivo pom.xml colocando como depend√™ncia o JUnit, e que vers√£o antiga! üôÑ</li>
  <li>o Maven criou duas pastas de c√≥digo: <code class="language-plaintext highlighter-rouge">src/main/java</code> e <code class="language-plaintext highlighter-rouge">src/test/java</code>.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
  <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>io.vepo.tests<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>testsExample<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;name&gt;</span>testsExample<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
  <span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/g21r9j3qm38eh6eh95cd.png" alt="Estrutura de diret√≥rio" /></p>

<p>Mas onde o Maven configura que os testes devem ser executados durante a build ou como ele descobre os testes? O Maven se baseia na ideia convention-over-configuration, ou seja, Conven√ß√£o acima de Configura√ß√£o. Para realizar certas configura√ß√µes basta apenas usar a conven√ß√£o apropriada.</p>

<p>O projeto criado j√° vem com alguns testes JUnit configurado, por√©m √© usado a vers√£o <code class="language-plaintext highlighter-rouge">3.8.1</code>‚Ä¶ Algu√©m por favor atualiza o <a href="https://github.com/apache/maven-archetypes">github.com/apache/maven-archetypes</a>, por favor!</p>

<h1 id="junit-5">JUnit 5</h1>

<p>O JUnit √© o framework que ir√° gerenciar o ciclo de vida de seus testes. Cara classe dentro de <code class="language-plaintext highlighter-rouge">src/test/java</code> contendo um m√©todo com a annotation <a href="https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/Test.html"><code class="language-plaintext highlighter-rouge">org.junit.jupiter.api.Test</code></a> ser√° executado como testes. Assim para migrarmos o arquivo gerado automaticamente, basta mudar o seguinte conte√∫do:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
  <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>io.vepo.tests<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>testsExample<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;name&gt;</span>testsExample<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
  <span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-engine<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>5.5.2<span class="nt">&lt;/version&gt;</span>
      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;/dependencies&gt;</span>
  <span class="nt">&lt;build&gt;</span>
    <span class="nt">&lt;plugins&gt;</span>
        <span class="c">&lt;!-- Need at least 2.22.0 to support JUnit 5 --&gt;</span>
        <span class="nt">&lt;plugin&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>3.0.0-M3<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;plugin&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
            <span class="nt">&lt;configuration&gt;</span>
                <span class="nt">&lt;source&gt;</span>1.8<span class="nt">&lt;/source&gt;</span>
                <span class="nt">&lt;target&gt;</span>1.8<span class="nt">&lt;/target&gt;</span>
            <span class="nt">&lt;/configuration&gt;</span>
        <span class="nt">&lt;/plugin&gt;</span>
    <span class="nt">&lt;/plugins&gt;</span>
<span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">io.vepo.tests</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppTest</span> 
<span class="o">{</span>   
    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"Test if it works"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpleTest</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="s">"OK"</span><span class="o">,</span> <span class="s">"OK"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Observe que com o JUnit 5 eu consigo dar nomes aos testes, isso facilita em muito a identifica√ß√£o de um erro. Eu costumo usar frases que definem as features testadas. Isso facilita quando preciso fazer manuten√ß√£o em c√≥digo escrito meses, ou anos, antes.</p>

<h2 id="ciclo-de-vida">Ciclo de Vida</h2>

<p>O ciclo de vida de um teste passa pela execu√ß√£o m√©todos antes/depois da classe ser criada e m√©todos antes/depois da execu√ß√£o de cada teste. D√™ uma olhada na <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods">documenta√ß√£o</a>. H√° v√°rios exemplos de como usar <a href="https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/BeforeAll.html">@BeforeAll</a>, <a href="https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/BeforeEach.html">@BeforeEach</a>, <a href="https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/AfterEach.html">@AfterEach</a> e <a href="https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/BeforeAll.html">@AfterAll</a>.</p>

<p>Se eu for detalhar cada feature do JUnit 5, esse post n√£o ter√° fim. S√£o muitas, conhe√ßa elas, assim voc√™ pode construir bons testes.</p>

<h2 id="asser√ß√µes">Asser√ß√µes</h2>

<p>O mais importante do JUnit n√£o √© apenas a execu√ß√£o dos testes, mas a valida√ß√£o dos resultados.</p>

<p>O JUnit prov√™ uma classe com m√©todos est√°ticos para realizar isso. Na <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions">documenta√ß√£o oficial</a> h√° v√°rios exemplos.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">standardAssertions</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span>
            <span class="s">"The optional failure message is now the last parameter"</span><span class="o">);</span>
    <span class="n">assertTrue</span><span class="o">(</span><span class="sc">'a'</span> <span class="o">&lt;</span> <span class="sc">'b'</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="s">"Assertion messages can be lazily evaluated -- "</span>
            <span class="o">+</span> <span class="s">"to avoid constructing complex messages unnecessarily."</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="tests-dsl">Tests DSL</h1>

<p>DSL significa <em>Domain-Specific Language</em>. Voc√™ cria uma DSL seu c√≥digo pode ser lido como uma linguagem. Em testes √© comum se construir uma DSL usando os termos <a href="https://www.agilealliance.org/glossary/gwt">Given-When-Then</a>. Voc√™ pode fazer isso em portugu√™s Dado-Quando-Ent√£o:</p>

<ul>
  <li>(<strong>Dado</strong>) Qual o contexto que o teste √© executado?</li>
  <li>(<strong>Quando</strong>) Qual a√ß√£o vai ser testada?</li>
  <li>(<strong>Ent√£o</strong>) O que deve ser validado?</li>
</ul>

<p>Um bom exemplo pode ser:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dadoNovoUsu√°rio</span><span class="o">()</span>
    <span class="o">.</span><span class="na">executaChecking</span><span class="o">()</span>
        <span class="o">.</span><span class="na">validaReserva</span><span class="o">();</span>
</code></pre></div></div>

<p>A√≠ fica de voc√™ implementar cada m√©todo e reutilizar ele quando poss√≠vel.</p>

<h2 id="assertj">AssertJ</h2>

<p>H√° algumas bibliotecas que auxiliam na constru√ß√£o dessa DSL. Eu gosto muito da <a href="https://assertj.github.io/doc/">AssertJ</a>. Com ela √© poss√≠vel usar uma DSL para valida√ß√£o de resultados complexos.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// extracting multiple values at once grouped in tuples</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">fellowshipOfTheRing</span><span class="o">).</span><span class="na">extracting</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"age"</span><span class="o">,</span> <span class="s">"race.name"</span><span class="o">)</span>
                               <span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">tuple</span><span class="o">(</span><span class="s">"Boromir"</span><span class="o">,</span> <span class="mi">37</span><span class="o">,</span> <span class="s">"Man"</span><span class="o">),</span>
                                         <span class="n">tuple</span><span class="o">(</span><span class="s">"Sam"</span><span class="o">,</span> <span class="mi">38</span><span class="o">,</span> <span class="s">"Hobbit"</span><span class="o">),</span>
                                         <span class="n">tuple</span><span class="o">(</span><span class="s">"Legolas"</span><span class="o">,</span> <span class="mi">1000</span><span class="o">,</span> <span class="s">"Elf"</span><span class="o">));</span>
</code></pre></div></div>

<h1 id="mocks">Mocks</h1>

<p>Mock significa Imita√ß√£o. Imagina no caso de estarmos acessando uma base de dados. Voc√™ tem duas op√ß√µes, ou liga a base de dados e testa diretamente nela, ou voc√™ mocka o acesso a base. O problema da primeira abordagem √© que ela torna o teste mais abrangente. N√£o estaremos fazendo um Teste Unit√°rio, mas um Teste de Integra√ß√£o.</p>

<p>N√£o h√° problema em fazer Testes de Integra√ß√£o, mas eles ser√£o muito mais lentos. Outro problema √© que muitas vezes voc√™ n√£o precisa testar uma base de dados. Mas as vezes √© bom testar a integra√ß√£o, sempre evita um NullPointerException! ‚ò†Ô∏è</p>

<p>H√° algumas boas bibliotecas para Mock, vou falar um pouco do <a href="https://site.mockito.org/">Mockito</a> e <a href="https://github.com/powermock/powermock">PowerMock</a></p>

<h1 id="mockito">Mockito</h1>

<p>Mockito serve para criar classes onde o c√≥digo original pode ou n√£o ser executado.</p>

<p>Quando voc√™ quer executar o c√≥digo orignal, estamos falando de um spy. O c√≥digo √© executado e voc√™ pode validar o que foi feito.</p>

<p>Um Spy pode ser criado usando <a href="https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#spy"><code class="language-plaintext highlighter-rouge">Mockito.spy</code></a> ou usando o Jupiter Extension para o JUnit 5.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"Testa o exemplo de Mock para UserRepository"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addUserInMemoryTest</span><span class="o">()</span> <span class="o">{</span>

    <span class="nc">User</span> <span class="n">userWithoutId</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="n">userWithoutId</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"vepo@vepo.com"</span><span class="o">);</span>
    <span class="n">userWithoutId</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"vepo"</span><span class="o">);</span>

    <span class="n">assertThat</span><span class="o">(</span><span class="n">userRepositoryInMemory</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">userWithoutId</span><span class="o">)).</span><span class="na">hasFieldOrPropertyWithValue</span><span class="o">(</span><span class="s">"id"</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span>

    <span class="n">verify</span><span class="o">(</span><span class="n">userRepositoryInMemory</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">userWithoutId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Observe que um Spy serve para verificar se o m√©todo foi chamado com um valor especifico. Ou seja, precisamos ter uma implementa√ß√£o concreta da classe.</p>

<p>Agora quando falamos de Mocks n√£o precisamos de implementa√ß√µes concretas. Podemos usar em interfaces. Quando √© criado um mock, o c√≥digo real n√£o √© chamado, s√£o sempre retornados valores vazios ou nulls. Ent√£o √© preciso definir o que ser√° retornado e quando.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"Testa o exemplo de Mock para UserRepository"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addUserTest</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">userWithoutId</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="n">userWithoutId</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"vepo@vepo.com"</span><span class="o">);</span>
    <span class="n">userWithoutId</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"vepo"</span><span class="o">);</span>

    <span class="nc">User</span> <span class="n">userWithId</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="n">userWithId</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="n">userWithId</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"vepo@vepo.com"</span><span class="o">);</span>
    <span class="n">userWithId</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"vepo"</span><span class="o">);</span>
    
    <span class="n">when</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">userWithoutId</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">userWithId</span><span class="o">);</span>
    
    <span class="n">assertThat</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">userWithoutId</span><span class="o">)).</span><span class="na">hasFieldOrPropertyWithValue</span><span class="o">(</span><span class="s">"id"</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="cobertura-de-testes">Cobertura de Testes</h1>

<p>As coisas n√£o andam se n√£o tivermos estatisticas! Ent√£o para testes, precisamos saber com exatid√£o qual √© a cobertura de testes do nosso projeto. Se n√£o colocarmos isso em pr√°tica, muito rapidamente a cobertura ir√° cair e nem perceberemos.</p>

<p>Uma ferramenta para gerar um relat√≥rio de cobertura √© o <a href="https://www.jacoco.org/jacoco/">JaCoCo</a></p>

<p>Para configurar o JaCoCo no Maven, basta adicionar ele como um plugin e configurar quando ser√° executado.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.jacoco<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>jacoco-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>0.8.1<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;executions&gt;</span>
        <span class="nt">&lt;execution&gt;</span>
            <span class="nt">&lt;id&gt;</span>prepare-agent<span class="nt">&lt;/id&gt;</span>
            <span class="nt">&lt;goals&gt;</span>
                <span class="nt">&lt;goal&gt;</span>prepare-agent<span class="nt">&lt;/goal&gt;</span>
            <span class="nt">&lt;/goals&gt;</span>
        <span class="nt">&lt;/execution&gt;</span>
        <span class="nt">&lt;execution&gt;</span>
            <span class="nt">&lt;id&gt;</span>report<span class="nt">&lt;/id&gt;</span>
            <span class="nt">&lt;phase&gt;</span>test<span class="nt">&lt;/phase&gt;</span>
            <span class="nt">&lt;goals&gt;</span>
                <span class="nt">&lt;goal&gt;</span>report<span class="nt">&lt;/goal&gt;</span>
            <span class="nt">&lt;/goals&gt;</span>
        <span class="nt">&lt;/execution&gt;</span>
    <span class="nt">&lt;/executions&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<p>Depois para executar:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn clean <span class="nb">test </span>jacoco:report
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/tlsl5nnyppc2ikfbzr6v.png" alt="Relat√≥rio de Tests" /></p>

<p>No caso ser√° gerado um relat√≥rio. Esse relat√≥rio pode ser armazenado no Jenkins ou mesmo usado pela pr√≥xima ferramenta que vamos ver.</p>

<h1 id="code-smells">Code Smells</h1>

<p>Antes de partir para √∫ltima ferramenta, vamos definir uma coisa.</p>

<p><strong>Code Smells</strong> s√£o constru√ß√µes que podem trazer m√° qualidade ao c√≥digo. Eliminando eles, voc√™ pode melhorar a qualidade do seu c√≥digo.</p>

<h1 id="an√°lise-est√°tica-de-c√≥digo">An√°lise Est√°tica de C√≥digo</h1>

<p>Como √∫ltima ferramenta, vamos falar de An√°lise Est√°tica de C√≥digo. Imagina se voc√™ pudesse analisar o seu c√≥digo e encontrar bugs ou Code Smells. Seria bom, n√£o?</p>

<p>Mas temos isso e de gra√ßa. Voc√™ pode usar o <a href="https://www.sonarqube.org/">SonarQube</a>. Com esse plugin para o Maven voc√™ pode criar um servidor para armazenar a qualidade atual do seu c√≥digo e construir uma timeline dele. Assim voc√™ pode desafiar o time a reduzir o n√∫mero de Code Smells em 50%. Ou em aumentar a covertura de testes at√© um determinado patamar.</p>

<p>Para integrar no Maven, basta colocar:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.sonarsource.scanner.maven<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>sonar-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.7.0.1746<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;executions&gt;</span>
        <span class="nt">&lt;execution&gt;</span>
            <span class="nt">&lt;phase&gt;</span>verify<span class="nt">&lt;/phase&gt;</span>
            <span class="nt">&lt;goals&gt;</span>
                <span class="nt">&lt;goal&gt;</span>sonar<span class="nt">&lt;/goal&gt;</span>
            <span class="nt">&lt;/goals&gt;</span>
        <span class="nt">&lt;/execution&gt;</span>
    <span class="nt">&lt;/executions&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<p>Ao adicionar o plugin, crie o projeto no Github e j√° inicialize ele no <a href="https://sonarcloud.io">SonarCloud</a>. Ao iniciar um projeto, voc√™ pode pegar um Token que deve ser usado na build.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn <span class="nt">-Dsonar</span>.login<span class="o">=</span>&lt;SONAR_TOKEN&gt; verify sonar:sonar
</code></pre></div></div>

<p>Caso queira rodar o <a href="https://www.sonarqube.org/downloads/">Sonar</a> em projetos internos da sua empresa, voc√™ s√≥ precisa de um servidor e uma instala√ß√£o do Sonar. √â simples de configurar.</p>

<h1 id="tudo-junto">Tudo Junto</h1>

<p>Agora vamos responder a √∫ltima pergunta. Quem vai rodar tudo isso? Voc√™ pode configurar algumas ferramentas. Entre elas podemos citar:</p>

<table>
  <thead>
    <tr>
      <th>Ferramenta</th>
      <th>Contexto</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Jenkins</td>
      <td>Para rodar projetos internos. N√£o √© um servi√ßo cloud.</td>
    </tr>
    <tr>
      <td>Github Actions</td>
      <td>Excelentes para projetos Github.</td>
    </tr>
    <tr>
      <td>TravisCI</td>
      <td>Could e facilmente integrado com o Github.</td>
    </tr>
  </tbody>
</table>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>Testes s√£o fundamentais e voc√™ n√£o precisa saber fazer antes de come√ßar a desenvolver. MAS‚Ä¶ Se voc√™ souber criar testes, seu c√≥digo ter√° muita estabilidade.</p>

<p>Treine fazer testes. Treine TDD. Conhe√ßa as ferramentas e boa sorte!</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/36whvqvlgpj79iy7lzmc.jpg" alt="Alt Text" /></p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Java" /><category term="Testes" /><category term="TDD" /><category term="JaCoCo" /><summary type="html"><![CDATA[Um guia r√°pido para tudo o que voc√™ precisa saber para fazer testes em aplica√ß√µes Java]]></summary></entry><entry><title type="html">Construindo softwares resilientes</title><link href="https://blog.vepo.dev/posts/construindo-software-resilientes" rel="alternate" type="text/html" title="Construindo softwares resilientes" /><published>2020-05-08T00:00:00+00:00</published><updated>2020-05-08T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/20-05-31-construindo-softwares-resilientes</id><content type="html" xml:base="https://blog.vepo.dev/posts/construindo-software-resilientes"><![CDATA[<p><em>‚Äî  J√° ouviu falar de <strong>eXtreme Go Horse (XGH)</strong>?</em> <br />
<em>‚Äî  N√£o?!</em> üôÑ <br />
<em>‚Äî  Mas voc√™ pratica <strong>XGH</strong>?</em> ü§®<br />
<em>‚Äî  N√£o?</em> <br />
<em>‚Äî  Ainda bem!</em> üòÄ</p>

<p><strong>XGH</strong> √© uma piada que gosto muito. Espero que voc√™ n√£o o pratique. Mas coloquei ele na roda por seu exato oposto. Um S√™nior deve construir softwares est√°veis. E para se construir software est√°veis voc√™ tem que ir pro extremo oposto do <strong>XGH</strong>. Devemos construir software resilientes.</p>

<p>Sim, eu usei a palavra resiliente. Vamos ao significado?</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/ou8mdzzu5v5ii8n4fbay.png" alt="Alt Text" /></p>

<p>Resili√™ncia √© a propriedade de um sistema suportar adversidade.</p>

<h1 id="construindo-resili√™ncia">Construindo Resili√™ncia</h1>

<p>N√≥s como desenvolvedores resolvemos problemas automatizando coisas. Quando vemos um problema j√° pensamos no modo como ele deve ser resolvido.</p>

<p>Mas e se houver outra forma? 
E se seu usu√°rio n√£o entender a forma como deve ser feito o processo? 
E se houver um erro durante processo? 
E se necessitar uma configura√ß√£o na m√°quina?</p>

<p>√â nessas horas que seu software tem que ser Resiliente.</p>

<p>Verdadeiros S√™niors constroem sistemas resilientes. Mas n√£o seja gn√≥stico, n√£o √© um post que vai te fazer construir sistemas resilientes, √© resolvendo bugs! Tudo que posso fazer por voc√™ √© te ensinar o caminho, voc√™ ter√° que trilhar ele sozinho.</p>

<p>Ent√£o vamos com algumas dicas:</p>

<h2 id="1-um-s√™nior-pensa-em-todos-os-problemas-que-podem-acontecer-em-um-fluxo">1. Um S√™nior pensa em todos os problemas que podem acontecer em um fluxo</h2>

<p>Quando voc√™ vai escrever um c√≥digo, voc√™ sempre tem premissas:</p>

<ol>
  <li>Existe um arquivo de configura√ß√£o.</li>
  <li>H√° uma classe que implementa essa interface.</li>
  <li>O servidor est√° de p√©.</li>
  <li>Etc‚Ä¶</li>
</ol>

<p>E se uma premissas dessas n√£o for verdadeira? Seu c√≥digo ir√° funcionar? Ou pelo menos ir√° mostrar o erro correto?</p>

<p>Vamos para exemplos reais?</p>

<p>Eu tenho um projeto que estou desenvolvendo para ser um tipo de tester. D√° uma olhada l√°:</p>

<div class="github-repo">
    <h2>
        <img class="logo" src="/assets/images/plugins/github-logo.png" alt="GitHub logo" loading="lazy" />
        <img class="user" src="https://avatars.githubusercontent.com/u/353569?v=4" loading="lazy" />
        <span class="url">
            <a href="https://github.com/vepo">
                vepo
            </a> 
            /
            <a href="https://github.com/vepo/plain-test">
                plain-test
            </a>
        </span>
    </h2>
</div>

<p>Nele eu executo o testes em passos (<em>Step</em>), cada passo tem um plugin que implementa. Ent√£o para execu√ß√£o de um passo eu preciso:</p>

<ol>
  <li>Achar o Plugin de Execu√ß√£o</li>
  <li>Executar o Passo</li>
  <li>Verificar os Assertions do Passo</li>
</ol>

<p>Simples? Poderia ser implementado em 1 linha?</p>

<div data-gist="https://gist.github.com/vepo/871ebd3e0fa62aebfbc135e61ad74235"></div>

<p>Mas temos dois problemas aqui que devem ser validados.</p>

<ol>
  <li>H√° um Plugin para implementar o Passo?</li>
  <li>Na defini√ß√£o do Passo, todos os par√¢metros est√£o definidos?</li>
</ol>

<p>V√™ que temos mais dois problemas a verificar? E detalhe, esses problemas s√£o um erro de defini√ß√£o do teste e n√£o de execu√ß√£o do teste. Logo o motivo da falha deve ser diferente.</p>

<div data-gist="https://gist.github.com/vepo/416b699bb7c9fca3b49e202b19d99d7d"></div>

<p>Ao se identificar um erro, exiba a mensagem de erro correta, que ajuda quem ir√° resolver esse erro.</p>

<h2 id="2-um-s√™nior-desenvolve-software-que-√©-resistente-a-desenvolvedores">2. Um S√™nior desenvolve software que √© resistente a desenvolvedores</h2>

<p>Ok! Voc√™ desenvolveu o neg√≥cio lindamente. Est√° tudo funcionando perfeitamente, fez o <em>deploy</em> em produ√ß√£o. Resultado: usu√°rios felizes! üòÄ</p>

<p>Fim? Pode ser que n√£o, em algum momento esse software poder√° ser atualizado. Pode ser necess√°rios corrigir os bugs que ainda n√£o foram encontrados, ou poder√° ser adicionada alguma feature. Qualquer altera√ß√£o, em qualquer lugar, tem o potencial de alterar a l√≥gica do seu software. Como podemos validar que tudo est√° funcionando corretamente?</p>

<p><em>N√£o vou vender TDD como uma bala de prata, esse n√£o √© o problema que TDD resolve. Depois falo de TDD. Eu gosto de TDD por isso repito TDD‚Ä¶ Continuamente‚Ä¶ TDD</em></p>

<p>Um S√™nior de verdade constr√≥i software resiliente a desenvolvedores. Mas como fazer isso?</p>

<p>Voc√™ deveria se preocupar com algumas coisas:</p>

<ol>
  <li>Qual a cobertura de testes do sistema?</li>
  <li>Os testes foram feitos s√≥ pra passar pela cobertura de testes e agradar o arquiteto? Ou os testes est√£o realmente validando o output?</li>
  <li>Os testes s√£o executados no processo de build?</li>
</ol>

<p>Caso voc√™ tenha respondido n√£o para qualquer uma das perguntas abaixo, seu software n√£o √© resiliente a desenvolvedores. E voc√™ n√£o pode confiar em si mesmo a ponto de pensar que voc√™ conseguir√° resolver todos os problemas no futuro.</p>

<p>Quando resolvemos um bug, ou adicionamos uma feature nova, temos um pensamento viciado. Apenas pensamos em um fluxo, e nos esquecemos de outros. √â normal e esperado isso. Voc√™ √© um engenheiro e n√£o Deus.</p>

<p>Como eu resolvo isso? Eu crio testes unit√°rios com todos os pressupostos.</p>

<div data-gist="https://gist.github.com/vepo/88d10d4c6e4ae0523ffe19268f5871f0"></div>

<p>√â um habito meu come√ßar meu desenvolvimento com alguns pressupostos desses, mas eles n√£o fazem parte do <em><strong>TDD</strong></em>, pois n√£o s√£o <em>Baby Step</em>. Mas eles d√£o uma clara vis√£o do que vai falhar. Pode ser que em uma pr√≥xima feature um passo desses falhe, e o desenvolvedor ir√° decidir:</p>

<ol>
  <li>Se corrige o problema</li>
  <li>Se corrige o teste</li>
  <li>Se remove o teste, caso ele n√£o fa√ßa mais sentido.</li>
</ol>

<h2 id="3-um-s√™nior-investiga-poss√≠veis-erros">3. Um S√™nior investiga poss√≠veis erros</h2>

<p><em>‚Äî  Ent√£o, esse teste falha em 50% dos casos. Mas caso falhe, roda de novo que d√° certo.</em></p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/lefte06h7r9ngi7d4l8b.jpg" alt="Alt Text" /></p>

<p>Se voc√™ ouvir essa frase. Recrimine! Isso n√£o pode acontecer.</p>

<p>Um poss√≠vel erro intermitente em um teste pode ser um erro intermitente em produ√ß√£o. Pode ser custoso investigar antes do <em>deploy</em>? Pode! Mas ser√° mais barato do que investigar depois do <em>deploy</em>, n√£o?</p>

<p>Um S√™nior de verdade sabe que pequenos problemas n√£o podem passar sem investiga√ß√£o. N√£o pode buscar a solu√ß√£o f√°cil de ignorar ou remover o teste. Isso √© f√°cil, mas para um s√™nior √© porco <em>(com todo respeito aos porcos)</em>.</p>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>Quase todo software necessita de resili√™ncia. E um S√™nior de Verdade sabe ver isso.</p>

<p>Ele consegue se precaver de v√°rias situa√ß√µes:</p>

<ol>
  <li>Erros esperados</li>
  <li>Erros inesperados</li>
  <li>Pessoas esperadas</li>
  <li>Pessoas inesperadas</li>
  <li>Aleatoriedades‚Ä¶.</li>
</ol>

<p>N√£o que ele deva ser um Deus em se tratando de desenvolvimento, mas tem que praticar a disciplina de promover a resili√™ncia.</p>

<p>Esse √© um caminho a ser trilhado‚Ä¶.</p>

<h1 id="livros-recomendados">Livros Recomendados</h1>

<ol>
  <li><a href="https://www.amazon.com.br/projeto-f%C3%AAnix-Gene-Kim/dp/8550801895?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=2AYVJTDQGN55J&amp;keywords=projeto+phoenix&amp;qid=1588968692&amp;sprefix=projeto+ph%2Caps%2C272&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=45c6f18224bfe9cf0d82b737331a5761&amp;language=pt_BR&amp;ref_=as_li_ss_tl">O Projeto F√™nix: um Romance Sobre TI, DevOps e Sobre Ajudar o seu Neg√≥cio a Vence</a></li>
  <li><a href="https://www.amazon.com.br/Test-Driven-Development-Kent-Beck/dp/0321146530?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=BXKYM1LP3IQH&amp;keywords=test+driven+development&amp;qid=1588968574&amp;sprefix=test+dr%2Caps%2C275&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=b9ad00a6e5089e02d277bed813cb0283&amp;language=pt_BR&amp;ref_=as_li_ss_tl">Test Driven Development: By Example</a></li>
  <li><a href="https://www.amazon.com.br/C%C3%B3digo-limpo-Robert-C-Martin/dp/8576082675?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;keywords=clean+code&amp;qid=1588968796&amp;sr=8-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=7ff5c1abee4d3b6a1860924b6f392698&amp;language=pt_BR&amp;ref_=as_li_ss_tl">C√≥digo Limpo: Habilidades Pr√°ticas do Agile Software</a></li>
</ol>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Desenvolvimento de Software" /><category term="Programa√ß√£o" /><category term="TDD" /><category term="Carreira" /><summary type="html"><![CDATA[Um S√™nior de Verdade sabe construir software resilientes! Mas o que significa um Software Resiliente?]]></summary></entry></feed>