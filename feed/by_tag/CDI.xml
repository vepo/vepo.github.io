<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/CDI.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/CDI.xml</id><title type="html">vepo</title><subtitle>Um reposit√≥rio para todos os posts, palestras e tutoriais que j√° fiz. Java, Desenvolvimento de Software e reflex√µes sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">Contexts and Dependency Injection (CDI) 2.0</title><link href="https://blog.vepo.dev/posts/context-and-dependency-injection-cdi-2-0" rel="alternate" type="text/html" title="Contexts and Dependency Injection (CDI) 2.0" /><published>2021-03-26T00:00:00+00:00</published><updated>2021-03-26T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/12-00-00-context-and-dependency-injection-cdi-2-0</id><content type="html" xml:base="https://blog.vepo.dev/posts/context-and-dependency-injection-cdi-2-0"><![CDATA[<p>CDI √© a especifica√ß√£o mais b√°sica do Jakarta EE e do Microprofile.io. Est√° na base de todas as outras e √© utilizada por quase todas outras.</p>

<h2 id="o-meu-projeto-tem-cdi">O meu projeto tem CDI?</h2>

<p>Pra quem n√£o conhece a especifica√ß√£o, pode ficar perdido. Era o que acontecia comigo. Voc√™ se depara com classes assim:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ApplicationScoped</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">long</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">userId</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>E voc√™ se pergunta:</p>
<ul>
  <li><em>T√°, quem instancia essa classe?</em></li>
  <li><em>Como eu configuro <code class="language-plaintext highlighter-rouge">userRepository</code>?</em></li>
  <li><em>Como eu uso UserService?</em></li>
</ul>

<p>Se voc√™ n√£o sabe responder essas perguntas, vamos l√°‚Ä¶.</p>

<h2 id="o-que-√©-cdi">O que √© CDI?</h2>

<p>A primeira vers√£o de <em>Contexts and Dependency Injection for Java EE (CDI)</em> entrou no Java EE 6, e rapidamente se tornou uma das mais importantes e populares especifica√ß√µes da plataforma.</p>

<p>CDI define um conjunto de especifica√ß√µes que permite uma boa modulariza√ß√£o do c√≥digo do projeto:</p>

<ul>
  <li>Um ciclo de vida bem definidos para objetos e seu respectivo contextos. Tamb√©m um conjunto extens√≠vel de contextos.</li>
  <li>Um sofisticado e mecanismo de inje√ß√£o com tipagem forte sem configura√ß√£o</li>
  <li>Suporte a constru√ß√£o de Componentes totalmente desacoplados</li>
  <li>Integra√ß√£o com JSF</li>
  <li>Decorators</li>
  <li>Interceptors</li>
  <li>Programa√ß√£o Event-Driven</li>
</ul>

<h3 id="escopo">Escopo</h3>

<p>O Java CDI define uma API b√°sica para que frameworks de dependency injection possam criar, gerenciar e remover TypeSafe beans automaticamente dentro de containers Jakarta EE.</p>

<h3 id="porque-usar-cdi">Porque usar CDI</h3>

<p>CDI permite desacoplar totalmente o ciclo de vida de um objeto e seu uso. O desenvolvedor que usa uma classe n√£o precisa saber como instanciar e nem como remover estes objetos. Permitindo assim:</p>

<ul>
  <li>Velocidade de Desenvolvimento</li>
  <li>Padroniza√ß√£o do c√≥digo</li>
  <li>Baixo acoplamento e alta coes√£o</li>
  <li>Foco na L√≥gica de Neg√≥cio</li>
</ul>

<h2 id="defini√ß√µes">Defini√ß√µes</h2>

<p>Para entender o que √© o Java CDI √© preciso compreender algumas defini√ß√µes antes.</p>

<h3 id="invers√£o-de-controle">Invers√£o de Controle</h3>

<p>Invers√£o de controle, <a href="https://martinfowler.com/bliki/InversionOfControl.html">segundo Martin Fowler</a>, √© o que difere Frameworks de Bibliotecas. Ao usar uma biblioteca, deve ser explicitamente carregado no c√≥digo as depend√™ncias de cada componente. Ao se usar um componene, as depend√™ncias de cada componente s√£o carregadas pelo mesmo, sendo <strong>apenas</strong> responsabilidade do desenvolvedor usar o compomenente.</p>

<h3 id="programa√ß√£o-por-aspectos">Programa√ß√£o por Aspectos</h3>

<p>Quando se fala de AOP, h√° in√∫meros conceitos, mas podemos ser bem simples em definir. Ao se escrever um c√≥digo, o desenvolvedor pode separar v√°rios n√≠veis de tipos de c√≥digos. Aqueles que definem o que est√° sendo feito, requisitos funcionais e requisitos b√°sicos.</p>

<p>Vamos imaginar que voc√™ est√° desenvolvendo um endpoint para tratar de reservar um item em um carrinho de compra. Existe o c√≥digo de reservar o item (1), existe o c√≥digo que implementar√° o protocolo HTTP (2) e existe outras funcionalidades que dar√£o seguran√ßa ao servi√ßo (3). <strong>1</strong> √© o c√≥digo principal, <strong>2</strong> e <strong>3</strong> s√£o apenas aspectos desse c√≥digo e podem ser definidos ortogonalmente ao c√≥digo. Como fazer isso? Vamos ver a seguir: Decorators ou Interceptors!</p>

<h2 id="criando-um-projeto-cdi">Criando um Projeto CDI</h2>

<p>Para criar um projeto CDI, basta adicionar o arquivo <code class="language-plaintext highlighter-rouge">src/main/resources/META-INF/beans.xml</code> a um projeto Maven.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee"</span> 
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span> 
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"</span> 
    <span class="na">bean-discovery-mode=</span><span class="s">"all"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<p>Isso far√° com que automaticamente TODOS os objetos definidos nesse projeto sejam considerados um bean e carregados aotumaticamente.</p>

<h2 id="instanciando-objetos-cdi">Instanciando Objetos CDI</h2>

<p>Objetos CDI s√£o automaticamente carregados. Para isso √© preciso que sigam os seguintes requisitos:</p>
<ul>
  <li>N√£o seja uma Inner Class</li>
  <li>N√£o seja uma Classe abstrata e n√£o possui a Annotation @Decorator</li>
  <li>N√£o implementa a interface javax.enterprise.inject.spi.Extension</li>
  <li>N√£o possui a Annotation @Vetoed e nem est√° em um pacote com @Vetoed</li>
  <li>Tem um construtor apropriado
    <ul>
      <li>Um construtor sem par√¢metros</li>
      <li><del>Um construtor com par√¢metros com @Inject</del>
        <ul>
          <li>Est√° na especifica√ß√£o, mas n√£o funciona! ü§î ü§¶‚Äç‚ôÇÔ∏è</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="escopo-e-contexto">Escopo e Contexto</h3>

<p>Cada objeto deve definir qual o seu escopo. Isso impactar√° diretamente quando cada objeto ser√° criado e removido. Ou se existir√° apenas um ou v√°rias ao mesmo tempo. Os escopos pre definidos pelo Java CDI s√£o:</p>

<table>
  <thead>
    <tr>
      <th>Scope</th>
      <th>Annotation</th>
      <th>Duration</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Request</td>
      <td>@RequestScoped</td>
      <td>A user‚Äôs interaction with a web application in a single HTTP request.</td>
    </tr>
    <tr>
      <td>Session</td>
      <td>@SessionScoped</td>
      <td>A user‚Äôs interaction with a web application across multiple HTTP requests.</td>
    </tr>
    <tr>
      <td>Application</td>
      <td>@ApplicationScoped</td>
      <td>Shared state across all users‚Äô interactions with a web application.</td>
    </tr>
    <tr>
      <td>Dependent</td>
      <td>@Dependent</td>
      <td>The default scope if none is specified; it means that an object exists to serve exactly one client (bean) and has the same lifecycle as that client (bean).</td>
    </tr>
    <tr>
      <td>Conversation</td>
      <td>@ConversationScoped</td>
      <td>A user‚Äôs interaction with a JavaServer Faces application, within explicit developer-controlled boundaries that extend the scope across multiple invocations of the JavaServer Faces lifecycle. All long-running conversations are scoped to a particular HTTP servlet session and may not cross session boundaries.</td>
    </tr>
  </tbody>
</table>

<p>Nesse tutorial, para facilitar os exemplos, vamos tratar apenas dos escopos Request e Application.</p>

<p>O <code class="language-plaintext highlighter-rouge">SessionScoped</code> √© usado em projetos JSF onde h√° uma sess√£o de usu√°rio ativa.</p>

<h3 id="diretamente">Diretamente</h3>

<p>Qualquer objeto que cumpra todos os requisitos acima. Como voc√™ pode ver em <a href="https://github.com/vepo/cdi-tutorial/blob/master/src/main/java/io/vepo/access/user/UserRepository.java">UserRepository.java</a>, o campo <code class="language-plaintext highlighter-rouge">collection</code> √© inserido e inicializado apenas usando a annotation <code class="language-plaintext highlighter-rouge">@Inject</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Dependent</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserRepository</span> <span class="o">{</span>
    <span class="o">[...]</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">MongoCollection</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">collection</span><span class="o">;</span>

    <span class="o">[...]</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="ciclo-de-vida">Ciclo de Vida</h3>

<p>Juntamente com a instancia√ß√£o, o Java CDI permite controlar o ciclo de vida de um objeto. Se for preciso limpar o objeto ao mesmo ser removido ou instanciar objetos n√£o CDI, como faz?</p>

<p>Para isso podemos usar as annotations <code class="language-plaintext highlighter-rouge">@PostConstruct</code> e <code class="language-plaintext highlighter-rouge">@PreDestroy</code>.</p>

<p>Veja o exemplo de <a href="https://github.com/vepo/cdi-tutorial/blob/master/src/main/java/io/vepo/access/infra/MongoClientFactory.java">MongoClientFactory</a>. Observe que ao ser inicializado, √© chamado automaticamente o metodo <code class="language-plaintext highlighter-rouge">buildMongoClient</code> e ao ser removido o metodo <code class="language-plaintext highlighter-rouge">cleanup</code>.</p>

<h2 id="factory">Factory</h2>

<p><em>E se a classe n√£o for definida no meu c√≥digo, como fa√ßo?</em></p>

<p>Para isso, podemos inicializar ela atrav√©s de uma <a href="https://refactoring.guru/pt-br/design-patterns/factory-method/java/example"><strong>Factory</strong></a>.</p>

<p>Em CDI ela √© definida pela annotation <code class="language-plaintext highlighter-rouge">@Produces</code>.</p>

<p>Veja o caso de <code class="language-plaintext highlighter-rouge">MongoClientFactory</code>, a classe √© usada pelo CDI para instanciar qualquer instancia de <a href="https://github.com/vepo/cdi-tutorial/blob/master/src/main/java/io/vepo/access/infra/MongoClientFactory.java#L84">MongoCollection</a>.</p>

<p>Se a classe MongoCollection fosse Closeable, eu precisaria tamb√©m implementaro um metodo pra isso, logo:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">disposeMongoCollection</span><span class="o">(</span><span class="nd">@Dispose</span> <span class="nc">MongoCollection</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">collection</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// close if possible</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="usando-qualifiers">Usando Qualifiers</h2>

<p>E se agora eu precisar escolher entre implementa√ß√µes distintas? Como fa√ßo?</p>

<p>O CDI tamb√©m tem a solu√ß√£o para isso com baixo acoplamento. Primeiro voc√™ vai ter que definir uma interface ou uma class abstrata. Em nosso exemplos vamos criar o <code class="language-plaintext highlighter-rouge">HelloService</code> com a unica inten√ß√£o de dizer <em>Oi</em>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HelloService</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">sayHello</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Nessa interface n√£o √© necess√°rio praticamente nada.</p>

<p>Depois √© necess√°rio definir quais ser√£o os qualifiers usados:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Qualifier</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">({</span> <span class="no">TYPE</span><span class="o">,</span> <span class="nc">ElementType</span><span class="o">.</span><span class="na">FIELD</span> <span class="o">})</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">PtBr</span> <span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>

<p>O proximo passo √© definir as implementa√ß√µes, segue abaixo as duas que fiz:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ApplicationScoped</span>
<span class="nd">@PtBr</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServicePtBr</span> <span class="kd">implements</span> <span class="nc">HelloService</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">sayHello</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Ol√°! %s"</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>E</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ApplicationScoped</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServiceUs</span> <span class="kd">implements</span> <span class="nc">HelloService</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">sayHello</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Hello! %s"</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Nos dois casos acima, voc√™ pode observar que <code class="language-plaintext highlighter-rouge">HelloServiceUs</code> √© a implementa√ß√£o padr√£o, enquanto <code class="language-plaintext highlighter-rouge">HelloServicePtBr</code> seria uma alternativa. Assim podemos usar:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SayHelloEndpoing</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="kd">private</span> <span class="nc">HelloService</span> <span class="n">helloService</span><span class="o">;</span>

    <span class="c1">// something</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Para usar a implementa√ß√£o padr√£o, e apenas adicionando <code class="language-plaintext highlighter-rouge">@PtBr</code> podemos alterar a implementa√ß√£o.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SayHelloEndpoing</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="nd">@PtBr</span>
    <span class="kd">private</span> <span class="nc">HelloService</span> <span class="n">helloService</span><span class="o">;</span>

    <span class="c1">// something</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Assim √© poss√≠vel trocar a implementa√ß√£o de um componente com minimas altera√ß√µes nas classes.</p>

<h2 id="interceptando">Interceptando</h2>

<p>Uma √∫ltima feature do CDI √© a possibilidade de se interceptar. Essa √© a implementa√ß√£o do que podemos chamar de AOP.</p>

<p>Vamos deixar claro, qual a inten√ß√£o de se usar um interceptador? Remover do c√≥digo funcionalidades que n√£o fazem parte da inten√ß√£o direta do c√≥digo. Por exemplo: Uma cria√ß√£o de usu√°rio, exitem as regras de neg√≥cio e transa√ß√µes, transa√ß√µes s√£o eleg√≠veis para um interceptador, enquantoas regras de neg√≥cio DEVEM estar expressas no c√≥digo.</p>

<p>Como fazer uma intercepta√ß√£o?</p>

<ol>
  <li>Sua classe a ser interceptada deve ser provida pelo CDI</li>
  <li>Uma <code class="language-plaintext highlighter-rouge">Annotation</code>, usando <code class="language-plaintext highlighter-rouge">@Inherited</code> e <code class="language-plaintext highlighter-rouge">@InterceptorBinding</code>, para marcar o metodo/classe</li>
  <li>Sua classe a ser interceptada deve ter algum qualifier associado (a ela ou ao m√©todo)</li>
  <li>Deve ser declarado um interceptador tanto na classe como no <code class="language-plaintext highlighter-rouge">beans.xml</code>.</li>
</ol>

<p>Vamos supor que em algumas classes eu desejo gerar estatisticas, ent√£o observe a implementa√ß√£o abaixo:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Measured</span>
<span class="nd">@Interceptor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StatisticInterceptor</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">StatisticInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@AroundInvoke</span>
	<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">calculateExecutionTime</span><span class="o">(</span><span class="nc">InvocationContext</span> <span class="n">invocationContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">Object</span> <span class="n">returnedValue</span> <span class="o">=</span> <span class="n">invocationContext</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"The execution of {}.{} took {}ms"</span><span class="o">,</span> <span class="n">invocationContext</span><span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">getName</span><span class="o">(),</span>
        <span class="n">invocationContext</span><span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">getDeclaringClass</span><span class="o">().</span><span class="na">getName</span><span class="o">(),</span> <span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">returnedValue</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Observe a execu√ß√£o! Sucesso! üòÄ</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2020-05-27 13:37:16,263 INFO  [i.v.a.i.s.StatisticInterceptor] (default task-1) The execution of findByUsernameAndPassword.io.vepo.access.user.UserRepository took 6ms
2020-05-27 13:37:16,333 INFO  [i.v.a.i.s.StatisticInterceptor] (default task-1) The execution of login.io.vepo.access.user.UserEndpoint took 113ms
2020-05-27 13:37:35,087 INFO  [i.v.a.i.s.StatisticInterceptor] (default task-1) The execution of findByUsernameAndPassword.io.vepo.access.user.UserRepository took 2ms
2020-05-27 13:37:35,088 INFO  [i.v.a.i.s.StatisticInterceptor] (default task-1) The execution of login.io.vepo.access.user.UserEndpoint took 4ms
2020-05-27 13:37:40,430 INFO  [i.v.a.i.s.StatisticInterceptor] (default task-1) The execution of findByUsernameAndPassword.io.vepo.access.user.UserRepository took 2ms
2020-05-27 13:37:40,431 INFO  [i.v.a.i.s.StatisticInterceptor] (default task-1) The execution of login.io.vepo.access.user.UserEndpoint took 3ms
</code></pre></div></div>

<h2 id="events-e-observers">Events e Observers</h2>

<p>Uma √∫ltima feature para usar do CDI s√£o os eventos. O CDI habilita a comunica√ß√£o asincrona e desacoplada dentro de uma mesma JVM.</p>

<p>Um evento pode ser qualquer objeto Java, de prefer√™ncia um que representa o evento em si. No meu exemplo usei o <code class="language-plaintext highlighter-rouge">UserCreated</code> e <code class="language-plaintext highlighter-rouge">UserRemoved</code> para representar essas a√ß√µes.</p>

<p>Como enviar? Basta instanciar um producer usando o <code class="language-plaintext highlighter-rouge">@Inject</code> e pronto:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Inject</span>
<span class="kd">private</span> <span class="nc">Event</span><span class="o">&lt;</span><span class="nc">UserCreated</span><span class="o">&gt;</span> <span class="n">createdEvent</span><span class="o">;</span>


<span class="nd">@POST</span>
<span class="nd">@Secured</span>
<span class="nd">@Produces</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
<span class="nd">@Consumes</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">User</span> <span class="nf">createUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Credentials: {}"</span><span class="o">,</span> <span class="n">credentials</span><span class="o">);</span>
	<span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">passwordEncrypter</span><span class="o">.</span><span class="na">encrypt</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">()));</span>
	<span class="k">this</span><span class="o">.</span><span class="na">userRepository</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
	<span class="k">this</span><span class="o">.</span><span class="na">createdEvent</span><span class="o">.</span><span class="na">fire</span><span class="o">(</span><span class="k">new</span> <span class="nc">UserCreated</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()));</span>
	<span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Para consumir esse evento, basta criar um m√©todo com <code class="language-plaintext highlighter-rouge">@Observes UserCreated userCreatedEvent</code>.</p>

<p>Vejamos a implementa√ß√£o:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ApplicationScoped</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SendEmailHandler</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">SendEmailHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendUserCreatedEmail</span><span class="o">(</span><span class="nd">@Observes</span> <span class="nc">UserCreated</span> <span class="n">userCreatedEvent</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Sending User Created email! {}"</span><span class="o">,</span> <span class="n">userCreatedEvent</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendUserRemovedEmail</span><span class="o">(</span><span class="nd">@Observes</span> <span class="nc">UserRemoved</span> <span class="n">userRemovedEvent</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Sending User Removed email! {}"</span><span class="o">,</span> <span class="n">userRemovedEvent</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="conclus√£o">Conclus√£o</h2>

<p>CDI ajudar a controlar o ciclo de vida de um objeto e com isso diminui o acomplamento do seu c√≥digo. Para quem n√£o o conhece parece m√°gica, por isso √© importante que seu equipe tenha total conhecimento da especifica√ß√£o antes de usa-lo.</p>

<p>Com os Intercepts do CDI √© poss√≠vel remover c√≥digos que s√£o ortogonais a l√≥gica de neg√≥cio para que estes n√£o atrapalhem o entendimento. Deixando a base de c√≥digo clara e compartimentada.</p>

<p>Com os Eventos CDI √© poss√≠vel fazer com que seu c√≥digo seja mais desacoplado e que novas funcionalidades n√£o precisem alterar c√≥digos antigos.</p>

<p>Bom uso!</p>

<p><em>Est√° faltando mais alguma coisa? Est√° achando confuso? Pergunte que eu posso melhorar!</em> üòÄ</p>

<p>Todos os exemplos desse post est√£o em:</p>

<div class="github-repo">
    <h2>
        <img class="logo" src="/assets/images/plugins/github-logo.png" alt="GitHub logo" loading="lazy" />
        <img class="user" src="https://avatars.githubusercontent.com/u/353569?v=4" loading="lazy" />
        <span class="url">
            <a href="https://github.com/vepo">
                vepo
            </a> 
            /
            <a href="https://github.com/vepo/cdi-tutorial">
                cdi-tutorial
            </a>
        </span>
    </h2>
</div>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Jakarta-EE" /><category term="Java-EE" /><category term="Java" /><category term="Java CDI" /><category term="CDI" /><summary type="html"><![CDATA[Nesse post vou detalhar um pouco as funcionalidades do Java CDI e como podem ser usadas para melhorar seu c√≥digo.]]></summary></entry></feed>