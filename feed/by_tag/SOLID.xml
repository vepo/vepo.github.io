<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/SOLID.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/SOLID.xml</id><title type="html">vepo</title><subtitle>Um reposit√≥rio para todos os posts, palestras e tutoriais que j√° fiz. Java, Desenvolvimento de Software e reflex√µes sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">S.O.L.I.D.: A s√≥lida base para Orienta√ß√£o a Objeto</title><link href="https://blog.vepo.dev/posts/s-o-l-i-d-a-solida-base-para-orientacao-a-objeto" rel="alternate" type="text/html" title="S.O.L.I.D.: A s√≥lida base para Orienta√ß√£o a Objeto" /><published>2020-07-20T00:00:00+00:00</published><updated>2020-07-20T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/22-33-17-s-o-l-i-d-a-solida-base-para-orientacao-a-objeto</id><content type="html" xml:base="https://blog.vepo.dev/posts/s-o-l-i-d-a-solida-base-para-orientacao-a-objeto"><![CDATA[<p>Entrevistas para vagas em empresas brasileiras √© muito focada nas tecnologias. Voc√™ √© um bom desenvolvedor do Framework ZYX? Ok. Sempre estive acostumado com isso, apesar de nunca querer me especializar em um framework.</p>

<p>At√© que quando fui fazer minha primeira entrevista para uma vaga em uma empresa de fora, a primeira pergunta foi: <em>‚ÄúMe explique o que √© o SOLID e como se aplica em Java.‚Äù</em> <strong>P√É!</strong> üö®üö®üö® Bugou! Em mais de 10 anos ningu√©m nunca tinha me perguntado isso. Acho que nunca mais tinha ouvido falar em SOLID desde a faculdade, e tamb√©m n√£o lembrava, obviamente.</p>

<h1 id="porque-√©-importante">Porque √© importante?</h1>

<p>Mas se ningu√©m se importa com isso, porque √© importante?</p>

<p>Simplesmente porque n√£o devemos saber as coisas s√≥ pra mostrar para os outros. SOLID √© a base paa um bom design <em>Orientado a Objetos</em>. Se voc√™ deseja ser um bom desenvolvedor Java, ou qualquer outra linguagem OO que aparecer num futuro, voc√™ vai ter que saber aplicar o SOLID. Ele vai ter ajudar a fazer um c√≥digo mais elegante. ü§µ</p>

<h1 id="porque-solid">Porque SOLID?</h1>

<p>SOLID foi proposto pelo ~Uncle Bob~ Seo Roberto, vulgo Robert C. Martin, em <a href="https://web.archive.org/web/20150906155800/http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf">2000</a>. Sua ideia ao propor alguns padr√µes era evitar podrid√£o no c√≥digo. Essa ideia de podrid√£o n√£o era novo, Joseph Yoder j√° tinha usado o termo Big Ball of Mud alguns anos antes. Mas a ideia era, quando um software vai evoluindo, algumas vezes o design/arquitetura n√£o evolui, logo √© preciso ter algumas parametros para analise antes de fazer uma altera√ß√£o.</p>

<blockquote>
  <p>Atualiza√ß√£o: Acerca do <strong>Seo Roberto</strong>, eu n√£o sou f√£ das ideias dele. Na √©poca que escrevi esse texto eu tinha um p√© atr√°s, hoje tenho 2 p√©s atr√°s. <a href="https://youtu.be/_5023ZrV2ek">O livro dele sobre Design De C√≥digo √© um desservi√ßo</a> e a pessoa dele √© ligada a movimentos politicos radicais. Mas isso √© o de menos, o pior √© a opini√£o dele sobre coment√°rios de c√≥digo. (√â ironia, a posi√ß√£o politica dele √© repugnante)</p>
</blockquote>

<p>Mas vamos conhecer antes quais problemas ele identificou?</p>

<h2 id="rigidez">Rigidez</h2>

<p>Est√° dificil alterar o seu c√≥digo? Bom, ent√£o ele est√° rigido!</p>

<p>Rigidez √© a capacidade de n√£o ser f√°cil fazer uma altera√ß√£o no c√≥digo. Ou por um alto acoplamento. Se mexer em um lugar vai ter que mexer em outro e assim por diante.</p>

<p>Desenvolvedores pouco experientes v√£o achar que isso √© natural de um sistema. Na verdade isso √© bastante comum e sempre ir√° existir, mas pode ser reduzido. Com a experi√™ncia temos mais repert√≥rio de solu√ß√µes de como deixar nosso c√≥digo pouco acoplado.</p>

<h2 id="fragilidade">Fragilidade</h2>

<p>Fragilidade √© a capacidade do c√≥digo de apresentar erros ao se criar altera√ß√µes. Quem nunca encontrou um coment√°rio ‚ÄúDO NOT TOUCH!‚Äù no meio do c√≥digo?</p>

<p>As vezes isso acontece por c√≥digos que iteragem entre si ou mesmo de comportamentos poucos ortodoxos. Ou isso simplesmente acontece por mudan√ßas de requisitos. Muda-se o requisito, mas n√£o se altera todo o software referente aquele requisito.</p>

<p>Mas h√° meios de se resolver isso‚Ä¶</p>

<h2 id="imobilidade">Imobilidade</h2>

<p>J√° teve que reescrever uma solu√ß√£o? Quando temos um c√≥digo que precisa ser replicado porque simplemente n√£o d√° pra generalizar o uso dele para dois casos bem similares, temos uma imobilidade.</p>

<p>Desenvolvedores menos experientes n√£o ver√£o problema nisso. At√© o dia que algu√©m alterar em um lugar e esquecer do outro.</p>

<h2 id="viscosidade">Viscosidade</h2>

<p>Viscosidade vem de duas forma: viscosidade do design e viscosidade do ambiente.</p>

<p>Viscosidade do Design acontece quando na necessidade de uma mudan√ßa, manter a consist√™ncia do design se torna dificil. Sempre que h√° a necessidade de uma mudan√ßa, voc√™ pode alterar o design ou manter o designo original. Se manter o padr√£o do desing √© dificil, temos um c√≥digo viscoso.</p>

<p>Viscosidade do Ambiente acontece quando o ambiente de desenvolvimento √© dificil de operar. Ou o tempo de compila√ß√£o √© demorado, ou o deploy em ambiente de desenvolvimento √© demorado.</p>

<h1 id="principios-da-orienta√ß√£o-objeto">Principios da Orienta√ß√£o Objeto</h1>

<p>Para resolver esses problemas foram propostos alguns principios que podem nos dar um caminho.</p>

<h2 id="srp---principio-da-responsabilidade-√∫nica">SRP - Principio da Responsabilidade √önica</h2>

<blockquote>
  <p>‚Äú<em>Uma classe deve ter um, e somente um, motivo para mudar.</em>‚Äù</p>
</blockquote>

<p>Tamb√©m chamado de Coes√£o, esse principio se relaciona a proximidade das fun√ß√µes de um modulo. Se o modulo faz diversas fun√ß√µes, n√£o √© coeso. J√° se o modulo possue uma √∫nica fun√ß√£o, se torna coeso.</p>

<p>Quando uma classe √© coesa, a necessidade de alterar ela diminui, pois as intera√ß√µes com ela se reduzem.</p>

<p>Por exemplo, imagine que tenho um framework de testes. Posso pensar em v√°rios tipos de testes a serem feitos, por√©m a classe que Executa os testes n√£o deve se preocupar com nada. Deve haver uma interface para se abstrair quais as atividades de um teste e essa classe deve chamar apenas essas abstra√ß√µes.</p>

<div data-gist="https://gist.github.com/vepo/cdcaa8c6adb667bdb305cfe02f8e8252"></div>

<h3 id="anti-pattern">Anti-Pattern</h3>

<p>O princ√≠pio da Responsabilidade √önica vem associada a um Anti-Pattern bem comum o <a href="https://pt.wikipedia.org/wiki/Objeto_deus">Objeto Deus</a>. Este objeto √© aquele que Sabe Tudo e Faz Tudo. J√° trabalhei em uma empresa que tinha que d√° manuten√ß√£o em um servidor de servi√ßos de voz (TTS e ASR), quando abri a classe que tratava as requisi√µes‚Ä¶. Mais de 10.000 linhas!!! üò± Qualquer altera√ß√£o era bastante dolorosa, por√©m com a implenta√ß√£o de alguns Design Patterns foi poss√≠vel reduzir ela para algo em torno de 100 linhas.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/ltor91r9jxxdf09s5uio.jpeg" alt="Matador de Deuses" /></p>

<h2 id="ocp---princ√≠pio-aberto-fechado">OCP - Princ√≠pio Aberto-Fechado</h2>

<blockquote>
  <p>‚Äú<em>Um m√≥dulo deve estar aberto para extens√£o, mas fechado para modifica√ß√£o.</em>‚Äù</p>
</blockquote>

<p>Esse principio pode ser resumido em dizer que um m√≥dulo, ou uma classe, deve ser aberto para extens√£o sem ser necess√°rio modifica√ß√£o.</p>

<p>Na √©poca em que foi proposto o SOLID isso se dava basicamente por heran√ßa, ou seja, cria√ß√£o de hieraquias de classes e interfaces. Por√©m hoje h√° outras formas mais comuns, e composi√ß√£o √© uma bem mais aceit√°vel para isso.</p>

<p>Voltando ao nosso exemplo da classe de teste, podemos ter Testes de v√°rios tipos, mas podemos criar testes compostos:</p>

<div data-gist="https://gist.github.com/vepo/21d01d3768980317d62ec8beccf29aae"></div>

<p>Nesse examplo acima vemos que Testes novos podem ser criados tanto por Heran√ßa quanto por acoplamento e n√£o ser√° necess√°rio reimplementar nenhuma das classes.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/kfzcj8aiuaz4c1s9txpo.jpg" alt="Please, come in and be nice!" /></p>

<h2 id="lsp---princ√≠pio-da-substitui√ß√£o-de-liskov">LSP - Princ√≠pio da Substitui√ß√£o de Liskov</h2>

<blockquote>
  <p>‚Äú<em>As subclasses devem ser substitu√≠veis por suas classes base.</em>‚Äù</p>
</blockquote>

<p>Esse principio parece simples, principalmente se voc√™ usa linguagens como Java, pois a linguagem aparentemente j√° garante ele. Certo?</p>

<p>Nem sempre, um dos erros mais comuns em Java √© n√£o se atentar ao Contrato de um M√©todo. Vamos explicar‚Ä¶</p>

<p>Em Java todo Objeto estende a classe Object, essa classe define alguns M√©todos para validar igualdade de objetos como o <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--">hashCode</a> e <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-">equals</a>. Muitos desenvolvedores nunca leram a defini√ß√£o desses m√©todos ou nunca se preocuparam em implementar eles. Mas o que acontece se eu n√£o implemento eles? Algumas classes da API dependem deles, as mais comuns s√£o: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html">HashMap</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html">HashSet</a>. Caso um objeto n√£o implemente corretamente esses m√©todos, uma opera√ß√£o de adi√ß√£o em uma dessas classes pode resultar em comportamentos inesperados.</p>

<h2 id="isp---princ√≠pio-da-segrega√ß√£o-da-interface">ISP - Princ√≠pio da Segrega√ß√£o da Interface</h2>

<blockquote>
  <p>‚Äú<em>Muitas interfaces espec√≠ficas do cliente s√£o melhores que uma interface de uso geral</em>‚Äù.</p>
</blockquote>

<p>Esse √© um padr√£o bem comum nas interfaces gr√°ficas, para cada a√ß√£o h√° uma interface <strong>Listerner</strong>. Havendo uma grande variedade de interfaces promove o desacoplamento de uma implementa√ß√£o com outras a√ß√µes indesejadas.</p>

<p>Esse princ√≠pio tem um efeito negativo que pode deve ser contido. N√£o se deve criar interfaces indesejadas. Por exemplo, se temos em uma interface gr√°fica um <strong>Bot√£o</strong> e <strong>Link</strong>, podemos supor que ambos possuem a mesma opera√ß√£o de <strong>Clique</strong>, logo n√£o faz sentido criar mais do que um <strong>CliqueListerner</strong>.</p>

<p>O Java padeceu por muito tempo de uma sobrecarga nas defini√ß√µes de classes por causa desse principio, em um √∫nico projeto havia inumeras implementas de Listeners etc‚Ä¶ Por√©m, desde o Java 8 isso pode ser contornado pelo uso de Lambdas e fun√ß√µes como par√¢metros. Um bom inicio para se conhecer essa interfaces √© o package <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">java.util.function</a>. Nele √© poss√≠vel encontrar interfaces como <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html">Consumer</a> e <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html">Function</a> que nos ajudam a evitar criar novas interfaces.</p>

<h2 id="dip---princ√≠pio-da-invers√£o-da-depend√™ncia">DIP - Princ√≠pio da invers√£o da depend√™ncia</h2>

<blockquote>
  <p>‚Äú<em>Dependa de abstra√ß√µes. N√£o dependa de implementa√ß√µes.</em>‚Äù</p>
</blockquote>

<p>Esse princ√≠pio n√£o √© resolvido pela linguagem, mas pelo design do seu c√≥digo. Dependa sempre de Classes Abstratas ou de Interfaces.</p>

<p>Porque disso? Sup√µe-se que toda implementa√ß√£o √© vol√°til e pode ser alterada, estendida ou substituida. At√© mesmo classes bem pouco vol√°til com String sofreu algumas altera√ß√µes com a adi√ß√£o de m√©todos. Obviamente que essa altera√ß√£o n√£o torna nenhum c√≥digo j√° implementado imcompat√≠vel. Mas se se houvesse uma mudan√ßa interna na classe? Isso alteraria seu c√≥digo?</p>

<p>Imagine que voc√™ estende um Cliente HTTP e altera o comportamento interno dele por algum motivo exot√©rico. Seria poss√≠vel migrar para uma nova vers√£o dessa depend√™ncia que usa HTTP2? Ou seria poss√≠vel trocar o cliente em tempo de execu√ß√£o? Muito provav√©l que n√£o.</p>

<p>Isso serve de sinal at√© mesmo quando for referenciar uma vari√°vel, use sempre o tipo mais abstrato que puder, evitando assim acoplamento.</p>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>Esses 5 princ√≠pios existem h√° muito tempo, e √© sempre bom relembrar eles. Com a ajuda deles podemos criar c√≥digos mais elegantes e que v√£o garantir que as altera√ß√µes sejam mais f√°ceis e a manuten√ß√£o menos trabalhosa.</p>

<p>Uma outra dica √© sempre refatorar seu c√≥digo. Procure pelos sinais de putrefa√ß√£o e levante esses defeitos com a equipe.</p>

<h1 id="livros-recomendados">Livros Recomendados</h1>

<ul>
  <li><a href="https://www.amazon.com.br/Java-Efetivo-Melhores-Pr%C3%A1ticas-Plataforma/dp/8550804622?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=2WMKZ78ONZQ85&amp;dchild=1&amp;keywords=java+efetivo&amp;qid=1595295115&amp;s=books&amp;sprefix=java+ef%2Caps%2C281&amp;sr=1-1&amp;linkCode=ll1&amp;tag=vepo0f-20&amp;linkId=c2642a6b2cbf9bbe71fd0f272208ffe2&amp;language=pt_BR&amp;ref_=as_li_ss_tl">Java Efetivo: as Melhores Pr√°ticas Para a Plataforma Java</a> de Joshua Bloch</li>
</ul>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Orienta√ß√£o a Objeto" /><category term="Java" /><category term="SOLID" /><category term="Programa√ß√£o" /><summary type="html"><![CDATA[SOLID √© uma das base a Orienta√ß√£o a Objeto. Nesse post explico os motivos que geraram essa base e os princ√≠pios de cada letra.]]></summary></entry></feed>