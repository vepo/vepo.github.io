<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.vepo.dev/feed/by_tag/Framework.xml" rel="self" type="application/atom+xml" /><link href="https://blog.vepo.dev/" rel="alternate" type="text/html" /><updated>2025-10-07T11:58:40+00:00</updated><id>https://blog.vepo.dev/feed/by_tag/Framework.xml</id><title type="html">vepo</title><subtitle>Um reposit√≥rio para todos os posts, palestras e tutoriais que j√° fiz. Java, Desenvolvimento de Software e reflex√µes sobre filosofia</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><entry><title type="html">Jakarta EE e Microprofile.io</title><link href="https://blog.vepo.dev/posts/jakarta-ee-e-microprofile-io" rel="alternate" type="text/html" title="Jakarta EE e Microprofile.io" /><published>2019-09-30T00:00:00+00:00</published><updated>2019-09-30T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/09-44-36-jakarta-ee-e-microprofile-io</id><content type="html" xml:base="https://blog.vepo.dev/posts/jakarta-ee-e-microprofile-io"><![CDATA[<p>Talvez voc√™ como desenvolvedor Java n√£o conhe√ßa esses dois nomes. Talvez quando voc√™ vai pensar em desenvolver Java j√° pensa em Spring. Caso voc√™ esteja nesses dois grupos, essa s√©rie √© para voc√™!</p>

<!--more-->

<p>Para quem n√£o conhece, o mundo Java √© direcionados por especifica√ß√µes. Especifica√ß√µes s√£o coisas as vezes um pouco chatas, mas que nos d√£o uma seguran√ßa enorme de desenvolvimento. Para quem desenvolve Java faz mais de 15 anos, nunca vi uma <em>breaking feature</em>, algo que tornou meu c√≥digo antigo n√£o compil√°vel! Isso se deve as especifica√ß√µes Java, cada feature nova deve ser compat√≠vel com especifica√ß√µes antigas e devem ser especificadas.</p>

<p>Especifica√ß√µes n√£o existem somente para a linguagem Java, existem tamb√©m para a comunidade Java.</p>

<h2 id="java-ee">Java EE</h2>

<p>At√© 2018 existia algo que chamavamos de Java EE.</p>

<p>RIP! ‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è</p>

<p>Long live to Jakarta EE! üëëüëëüëë</p>

<p>Java EE n√£o era um framework. Era um conjunto de especifica√ß√µes que serviam de base para implementa√ß√£o de Frameworks. O intuido dessas especifica√ß√µes era tornar qualquer aplica√ß√£o Java EE livre de implementa√ß√µes. Assim qualquer projeto Java EE, poderia ser facilmente migr√°vel para qualquer uma das implementa√ß√µes compat√≠veis. Evitando assim o que podemos chamar de <a href="https://en.wikipedia.org/wiki/Vendor_lock-in">Vendor Lock-in</a>.</p>

<p>Java EE tinha um s√©rio problema. O <em>timing</em> das especifica√ß√µes era mais lento que o passo da comunidade. Isso se devia ao processo imposto pela Oracle ao desenvolvimento, que ao ser <em><a href="https://www.oracle.com/java/technologies/java-ee-glance.html">Specification First</a></em> j√° impunha um passo lento √†s inova√ß√µes.</p>

<p>Mas‚Ä¶.</p>

<h2 id="microprofileio">Microprofile.io</h2>

<p>Por volta de 2017, alguns nomes da comunidade perceberam que o Java EE n√£o estava acompanhando o desenvolvimento de aplica√ß√µes <a href="https://12factor.net/pt_br/">Cloud Native</a>, suas especifica√ß√µes englobavam tudo que havia de novo em 2007, mas estavamos em 2017! Era preciso fazer algo!</p>

<p><img src="https://thepracticaldev.s3.amazonaws.com/i/eidzpplis9ehe42q46z6.png" alt="Microprofile.io" /></p>

<p>Para isso foi proposto um novo conjunto de especifica√ß√µes o <a href="https://microprofile.io/">Microprofile.io</a>. Este seria focado em implementar os padr√µes de projetos para Cloud Native e <a href="https://microservices.io/">Microsservi√ßos</a>. Mas em termos de gerenciamento, estas especifica√ß√µes n√£o seriam <em>Specification First</em>, mas <em>Coding First</em>. Assim os padr√µes que j√° era implementados por um ou mais framework seriam homogeinizados e qui√ßa melhorados. O projeto n√£o seria coordenado pela Oracle, mas pela <a href="https://twitter.com/EclipseFdn">Eclipse Foundation</a>. Com o padr√£o de governan√ßa da Eclise Fdn, haveria mais agilidade no desenvolvimento de novas especifica√ß√µes.</p>

<p><img src="https://thepracticaldev.s3.amazonaws.com/i/yzjn0p8qop27l9n5ff2s.png" alt="Especifica√ß√µes" /></p>

<h2 id="jakarta-ee">Jakarta EE</h2>

<p><img src="https://thepracticaldev.s3.amazonaws.com/i/3m3hhtorm5c8kdgc2nvs.jpg" alt="Jakarta EE" /></p>

<p>Com o crescimento do Microprofile.io, houve uma press√£o da comunidade para Oracle agilizar o processo de desenvolvimento de especifica√ß√µes. Isso levou a empresa a abrir m√£o e entregar o gerenciamento do projeto Java EE para Eclipse Foundation. Assim, o Java EE se tornou Jakarta EE. Java √© um nome registrado da Oracle. Todas as especifica√ß√µes <strong>Java EE 8.0</strong> seria automaticamente transformadas em especifica√ß√µes <strong>Jakarta EE 8.0</strong>.</p>

<p><img src="https://thepracticaldev.s3.amazonaws.com/i/r7qdl78m7mz01hyrc9vp.png" alt="Especifica√ß√µes" /></p>

<h2 id="modelo-de-programa√ß√£o">Modelo de Programa√ß√£o</h2>

<p>No fundo Jakarta EE √© um modelo de programa√ß√£o voltado a especifica√ß√µes. Uma aplica√ß√£o Jakarta EE n√£o depende de implementa√ß√£o, todas as depend√™ncias s√£o declaradas como providades e estas devem ser implementadas e providas pelo Container Jakarta EE.</p>

<h3 id="vantagens">Vantagens</h3>
<p>Usando o modelo puramente Jakarta EE, nos d√° certas vantagens ao desenvolvimento:</p>
<ul>
  <li>Velocidade de Desenvolvimento</li>
  <li>Padroniza√ß√£o do c√≥digo</li>
  <li>Baixo acoplamento e alta coes√£o</li>
  <li>Foco na L√≥gica de Neg√≥cio</li>
</ul>

<p>As especifica√ß√µes normalmente s√£o de funcionalidades comuns a v√°rias projetos. S√£o requisitos n√£o funcionais que liberam o desenvolvedor de se preocupar com coisas que j√° est√£o muito bem implementadas e testadas.</p>

<p>Exemplo:</p>
<ul>
  <li><em>Porque o desenvolvedor precisaria implementar um servidor HTTP?</em></li>
  <li><em>Porque o desenvolvedor precisaria implementar um framework de DI?</em></li>
  <li><em>Porque o desenvolvedor precisaria implementar um framework de Valida√ß√£o?</em></li>
  <li><em>Porque o desenvolvedor precisaria implementar um framework de Persist√™ncia?</em></li>
</ul>

<p>Na verdade n√£o h√° necessidade de re-implementar nenhum desses requisitos, os frameworks devem prover meios de integrar um c√≥digo a todas as funcionalidades propostar por ele. Jakarta EE padroniza esses meios. Assim qualquer aplica√ß√£o desenvolvida poder√° ser deployada em qualquer servidor de aplica√ß√£o compat√≠vel.</p>

<h3 id="container-jakarta-ee">Container Jakarta EE</h3>

<p>Quando falamos de Containers no mundo Jakarta EE, n√£o estamos se referindo ao Container Docker! N√£o! Esse conceito √© mais antigo.</p>

<p>Container Jakarta EE seria qualquer <a href="https://pt.wikipedia.org/wiki/Servidor_de_aplica%C3%A7%C3%A3o">Servidor de Aplica√ß√£o</a> respons√°vel pela administra√ß√£o e configura√ß√£o das aplica√ß√µes Jakarta EE.</p>

<h3 id="especifica√ß√µes">Especifica√ß√µes</h3>

<p>Esse post √© uma introdu√ß√£o a uma s√©rie que iniciarei detalhando as especifica√ß√µes Jakarta EE e Microprofile.io. Com isso gostaria de compartilhar como √© f√°cil desenvolver Microsservi√ßos Java robustos! Segue a lista de Especifica√ß√µes que planejo abranger:</p>
<ul>
  <li>JSR 365 ‚Äì Contexts and Dependency Injection (CDI) 2.0</li>
  <li>JSR 370 ‚Äì Java API for RESTful Web Services (JAX-RS) 2.1</li>
  <li>JSR 380 ‚Äì Bean Validation 2.0</li>
  <li>MicroProfile Configuration</li>
  <li>MicroProfile Health</li>
</ul>

<h2 id="conclus√£o">Conclus√£o</h2>

<p><img src="https://thepracticaldev.s3.amazonaws.com/i/1aed10d6upbh2rmvhdo8.jpg" alt="Just use-it!" /></p>

<p>Caso voc√™ n√£o conhe√ßa as especifica√ß√µes Jakarta EE, esse √© um bom ponto de inicio para voc√™.</p>

<p>Caso voc√™ j√° conhe√ßa as especifica√ß√µes Jakarta EE, esse √© um bom inicio para aprender um pouco mais.</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Jakarta-EE" /><category term="Java-EE" /><category term="Java" /><category term="Framework" /><summary type="html"><![CDATA[Introdu√ß√£o as especifica√ß√µes Jakarta EE e Microprofile.io]]></summary></entry><entry><title type="html">Escolhendo uma implementa√ß√£o Jakarta EE &amp;amp; Microprofile.io</title><link href="https://blog.vepo.dev/posts/escolhendo-uma-implementacao-jakarta-ee-e-microprofile-io" rel="alternate" type="text/html" title="Escolhendo uma implementa√ß√£o Jakarta EE &amp;amp; Microprofile.io" /><published>2019-09-30T00:00:00+00:00</published><updated>2019-09-30T00:00:00+00:00</updated><id>https://blog.vepo.dev/posts/10-28-52-escolhendo-uma-implementacao-jakarta-ee-microprofile-io</id><content type="html" xml:base="https://blog.vepo.dev/posts/escolhendo-uma-implementacao-jakarta-ee-e-microprofile-io"><![CDATA[<p>O primeiro passo ao se desenvolver uma aplica√ß√£o Jakarta EE ou Microprofile.io √© escolher qual ser√° a implementa√ß√£o que voc√™ ir√° utilizar. Ou o mais conhecido Servidor de Aplica√ß√£o.</p>

<p>As implementa√ß√µes de Microprofile.io s√£o mais leves que as implementa√ß√µes de Jakarta EE. Isso acontece porque o n√∫mero de especifica√ß√µes implementadas por um servidor Jakarta EE √© muito maior do que o de Microprofile.io. Logo, se voc√™ deseja implementar um simples Microsservi√ßos, escolher um <a href="https://wildfly.org/">WildFly</a> seria como escolher um canh√£o pra matar uma mosca.</p>

<h1 id="starters">Starters</h1>

<p>Um bom ponto para iniciar √© por um Starter. O Microprofile.io tem seu pr√≥prio <a href="https://start.microprofile.io/">Starter</a>, com ele √© poss√≠vel escolher qual vers√£o da especifica√ß√£o e qual plataforma dever√° ser usada.</p>

<p>N√£o encotrei um Starter para Jakarta EE oficial, mas h√° muitos tutoriais na internet. Nessa s√©rie nosso foco ser√° em projetos Microprofile.io, logo este starter √© suficiente.</p>

<p>Caso queira um Starter Jakarta EE, h√° alguns:</p>

<ul>
  <li><a href="http://generjee.inetseite.de/">generjee</a></li>
</ul>

<h1 id="servidores-de-aplica√ß√£o">Servidores de Aplica√ß√£o</h1>

<p>Segue abaixo uma lista n√£o exaustiva dos servidores de aplica√ß√£o existente. Nesse tutorial usaremos o Thorntail.io para nossas implementa√ß√µes.</p>

<p>Todos os servidores 100% compat√≠veis podem ser encontrados nas paginas de cada projeto:</p>

<ul>
  <li><a href="https://jakarta.ee/compatibility/">Jakarta EE</a></li>
  <li><a href="https://wiki.eclipse.org/MicroProfile/Implementation">Microprofile.io</a></li>
</ul>

<h2 id="glassfish">GlassFish</h2>

<p>O <a href="https://javaee.github.io/glassfish/download">GlassFish</a> √© a implementa√ß√£o oficial do Jakarta EE. O mesmo ser√° 100% compat√≠vel com as especifica√ß√µes.</p>

<h2 id="payara">Payara</h2>

<p>Compat√≠vel com Jakarta EE e Microprofile.io. <a href="https://www.payara.fish/documentation/getting-started-with-payara/">Getting started with Payara‚Ä¶</a></p>

<h2 id="wildfly">WildFly</h2>

<p><a href="https://wildfly.org/">Um dos mais conhecidos no mercado</a>. Anteriormente conhecido como JBoss. Compat√≠vel com Jakarta EE.</p>

<h2 id="tomee">TomEE</h2>

<p><a href="https://tomee.apache.org/">Compat√≠vel</a> com Jakarta EE e Microprofile.io.</p>

<h2 id="openliberty">OpenLiberty</h2>

<p><a href="https://openliberty.io/">Compat√≠vel</a> com Jakarta EE e Microprofile.io.</p>

<h2 id="quakusio">Quakus.io</h2>

<p>O <a href="https://quarkus.io/">Quarkus.io</a> n√£o √© 100% compat√≠vel com nenhuma das duas especifica√ß√µes! Mas ele est√° caminhando nesse caminho. Sua ideia principal √© prover um servidor de aplica√ß√£o mais leve que os outros e de f√°cil desenvolvimento. Ainda √© poss√≠vel usar a <a href="https://www.graalvm.org/">GraalVM</a>.</p>

<p><img src="https://thepracticaldev.s3.amazonaws.com/i/o9mpk38fl4yl4tp0t32t.png" alt="Quarkus.io" /></p>

<h2 id="thorntailio">Thorntail.io</h2>

<p>Fork do WildFly, o <a href="https://thorntail.io/generator/">Thorntail</a> √© voltado para implementa√ß√£o. Para o deploy n√£o √© necess√°rio configurar um servidor de aplica√ß√£o. O mesmo, junto com suas depend√™ncias, √© configurado automaticamente pela build Maven. Assim √© gerado ou um Fat-Jar ou um War + Hollow Jar.</p>

<p>No Fat-Jar temos todas as depend√™ncias prontas para serem executadas.</p>

<p>No Hollow-Jar temos todas as depend√™ncias empacotadas separadamente.</p>]]></content><author><name>{&quot;twitter&quot;=&gt;&quot;vepo&quot;, &quot;linkedin&quot;=&gt;&quot;https://www.linkedin.com/in/victorosorio/&quot;, &quot;picture&quot;=&gt;&quot;/assets/images/me.avif&quot;}</name></author><category term="Jakarta-EE" /><category term="Java-EE" /><category term="Java" /><category term="Framework" /><summary type="html"><![CDATA[Tutorial de como escolher uma implementa√ß√£o para Microprofile.io ou Jakarta EE. Ser√° atualizado sempre com novas informa√ß√µes.]]></summary></entry></feed>